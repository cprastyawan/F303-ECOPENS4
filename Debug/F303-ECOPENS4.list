
F303-ECOPENS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800f548  0800f548  0001f548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa64  0800fa64  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800fa64  0800fa64  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fa64  0800fa64  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa64  0800fa64  0001fa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa68  0800fa68  0001fa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800fa6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000020f8  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022e4  200022e4  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f33  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004415  00000000  00000000  0004514f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00049568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001880  00000000  00000000  0004af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a4f  00000000  00000000  0004c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020159  00000000  00000000  0006f25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f00  00000000  00000000  0008f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001632b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e60  00000000  00000000  0016330c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  0016b16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  0016b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f52c 	.word	0x0800f52c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800f52c 	.word	0x0800f52c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <DWT_Init+0x38>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10e      	bne.n	8000bd6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <DWT_Init+0x38>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <DWT_Init+0x38>)
 8000bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <DWT_Init+0x3c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <DWT_Init+0x3c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <DWT_Init+0x3c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
    }
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000edf0 	.word	0xe000edf0
 8000be4:	e0001000 	.word	0xe0001000

08000be8 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <DWT_Delay+0x40>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <DWT_Delay+0x44>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <DWT_Delay+0x48>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	0c9a      	lsrs	r2, r3, #18
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000c0a:	bf00      	nop
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <DWT_Delay+0x40>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d8f8      	bhi.n	8000c0c <DWT_Delay+0x24>
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e0001000 	.word	0xe0001000
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	431bde83 	.word	0x431bde83

08000c34 <commutateNow_0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void commutateNow_0(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A HIGH
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <commutateNow_0+0x48>)
 8000c3e:	f004 ff6d 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2108      	movs	r1, #8
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <commutateNow_0+0x48>)
 8000c48:	f004 ff68 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //PHASE B FLOATING
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <commutateNow_0+0x48>)
 8000c52:	f004 ff63 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <commutateNow_0+0x48>)
 8000c5c:	f004 ff5e 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C LOW
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <commutateNow_0+0x48>)
 8000c68:	f004 ff58 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <commutateNow_0+0x48>)
 8000c72:	f004 ff53 	bl	8005b1c <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400

08000c80 <commutateNow_1>:

void commutateNow_1(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //PHASE A FLOATING
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <commutateNow_1+0x48>)
 8000c8a:	f004 ff47 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <commutateNow_1+0x48>)
 8000c94:	f004 ff42 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B HIGH
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <commutateNow_1+0x48>)
 8000c9e:	f004 ff3d 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <commutateNow_1+0x48>)
 8000ca8:	f004 ff38 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C LOW
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <commutateNow_1+0x48>)
 8000cb4:	f004 ff32 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <commutateNow_1+0x48>)
 8000cbe:	f004 ff2d 	bl	8005b1c <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	48000400 	.word	0x48000400

08000ccc <commutateNow_2>:

void commutateNow_2(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A LOW
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	480f      	ldr	r0, [pc, #60]	; (8000d14 <commutateNow_2+0x48>)
 8000cd6:	f004 ff21 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <commutateNow_2+0x48>)
 8000ce0:	f004 ff1c 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B HIGH
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	; 0x40
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <commutateNow_2+0x48>)
 8000cea:	f004 ff17 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <commutateNow_2+0x48>)
 8000cf4:	f004 ff12 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //PHASE C FLOATING
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <commutateNow_2+0x48>)
 8000d00:	f004 ff0c 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <commutateNow_2+0x48>)
 8000d0a:	f004 ff07 	bl	8005b1c <HAL_GPIO_WritePin>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <commutateNow_3>:

void commutateNow_3(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A LOW
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <commutateNow_3+0x48>)
 8000d22:	f004 fefb 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <commutateNow_3+0x48>)
 8000d2c:	f004 fef6 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //PHASE B FLOATING
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <commutateNow_3+0x48>)
 8000d36:	f004 fef1 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <commutateNow_3+0x48>)
 8000d40:	f004 feec 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C HIGH
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <commutateNow_3+0x48>)
 8000d4c:	f004 fee6 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <commutateNow_3+0x48>)
 8000d56:	f004 fee1 	bl	8005b1c <HAL_GPIO_WritePin>

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <commutateNow_4>:

void commutateNow_4(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //PHASE A FLOATING
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <commutateNow_4+0x48>)
 8000d6e:	f004 fed5 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2108      	movs	r1, #8
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <commutateNow_4+0x48>)
 8000d78:	f004 fed0 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B LOW
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <commutateNow_4+0x48>)
 8000d82:	f004 fecb 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4808      	ldr	r0, [pc, #32]	; (8000dac <commutateNow_4+0x48>)
 8000d8c:	f004 fec6 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //PHASE C HIGH
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <commutateNow_4+0x48>)
 8000d98:	f004 fec0 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <commutateNow_4+0x48>)
 8000da2:	f004 febb 	bl	8005b1c <HAL_GPIO_WritePin>

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	48000400 	.word	0x48000400

08000db0 <commutateNow_5>:
void commutateNow_5(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //PHASE A HIGH
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <commutateNow_5+0x44>)
 8000dba:	f004 feaf 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <commutateNow_5+0x44>)
 8000dc4:	f004 feaa 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //PHASE B LOW
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <commutateNow_5+0x44>)
 8000dce:	f004 fea5 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <commutateNow_5+0x44>)
 8000dd8:	f004 fea0 	bl	8005b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //PHASE C FLOATING
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2140      	movs	r1, #64	; 0x40
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <commutateNow_5+0x44>)
 8000de2:	f004 fe9b 	bl	8005b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4802      	ldr	r0, [pc, #8]	; (8000df4 <commutateNow_5+0x44>)
 8000dec:	f004 fe96 	bl	8005b1c <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	48000400 	.word	0x48000400

08000df8 <commutationPattern>:

void commutationPattern(uint8_t step) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	if (step == NEXT && waitForCommutation == 1) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	f040 80cc 	bne.w	8000fa2 <commutationPattern+0x1aa>
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <commutationPattern+0x200>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 80c6 	bne.w	8000fa2 <commutationPattern+0x1aa>
		bemf_dir = !bemf_dir;
 8000e16:	4b79      	ldr	r3, [pc, #484]	; (8000ffc <commutationPattern+0x204>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <commutationPattern+0x204>)
 8000e28:	701a      	strb	r2, [r3, #0]
		if (commutationStepCounter < STEP_5)
 8000e2a:	4b75      	ldr	r3, [pc, #468]	; (8001000 <commutationPattern+0x208>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d807      	bhi.n	8000e44 <commutationPattern+0x4c>
			commutationStepCounter++;
 8000e34:	4b72      	ldr	r3, [pc, #456]	; (8001000 <commutationPattern+0x208>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b70      	ldr	r3, [pc, #448]	; (8001000 <commutationPattern+0x208>)
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e002      	b.n	8000e4a <commutationPattern+0x52>
		else {
			commutationStepCounter = STEP_0;
 8000e44:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <commutationPattern+0x208>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		}
		switch (commutationStepCounter) {
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <commutationPattern+0x208>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	f200 80cd 	bhi.w	8000ff0 <commutationPattern+0x1f8>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <commutationPattern+0x64>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e75 	.word	0x08000e75
 8000e60:	08000ea7 	.word	0x08000ea7
 8000e64:	08000ed9 	.word	0x08000ed9
 8000e68:	08000f0b 	.word	0x08000f0b
 8000e6c:	08000f3d 	.word	0x08000f3d
 8000e70:	08000f6f 	.word	0x08000f6f
		case STEP_0:
			commutateNow_0();
 8000e74:	f7ff fede 	bl	8000c34 <commutateNow_0>
			COMPDELAY
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	e003      	b.n	8000e86 <commutationPattern+0x8e>
 8000e7e:	bf00      	nop
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	2bf9      	cmp	r3, #249	; 0xf9
 8000e8a:	d9f8      	bls.n	8000e7e <commutationPattern+0x86>
			;
			waitForCommutation = 0;
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <commutationPattern+0x200>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_B;
 8000e92:	4b5c      	ldr	r3, [pc, #368]	; (8001004 <commutationPattern+0x20c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <commutationPattern+0x204>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 8000e9e:	485a      	ldr	r0, [pc, #360]	; (8001008 <commutationPattern+0x210>)
 8000ea0:	f003 fed6 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000ea4:	e07c      	b.n	8000fa0 <commutationPattern+0x1a8>
		case STEP_1:
			commutateNow_1();
 8000ea6:	f7ff feeb 	bl	8000c80 <commutateNow_1>
			COMPDELAY
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e003      	b.n	8000eb8 <commutationPattern+0xc0>
 8000eb0:	bf00      	nop
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2bf9      	cmp	r3, #249	; 0xf9
 8000ebc:	d9f8      	bls.n	8000eb0 <commutationPattern+0xb8>
			;
			waitForCommutation = 0;
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <commutationPattern+0x200>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_A;
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <commutationPattern+0x20c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <commutationPattern+0x204>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8000ed0:	484e      	ldr	r0, [pc, #312]	; (800100c <commutationPattern+0x214>)
 8000ed2:	f003 febd 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000ed6:	e063      	b.n	8000fa0 <commutationPattern+0x1a8>
		case STEP_2:
			commutateNow_2();
 8000ed8:	f7ff fef8 	bl	8000ccc <commutateNow_2>
			COMPDELAY
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	e003      	b.n	8000eea <commutationPattern+0xf2>
 8000ee2:	bf00      	nop
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2bf9      	cmp	r3, #249	; 0xf9
 8000eee:	d9f8      	bls.n	8000ee2 <commutationPattern+0xea>
			;
			waitForCommutation = 0;
 8000ef0:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <commutationPattern+0x200>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_C;
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <commutationPattern+0x20c>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <commutationPattern+0x204>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8000f02:	4843      	ldr	r0, [pc, #268]	; (8001010 <commutationPattern+0x218>)
 8000f04:	f003 fea4 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000f08:	e04a      	b.n	8000fa0 <commutationPattern+0x1a8>
		case STEP_3:
			commutateNow_3();
 8000f0a:	f7ff ff05 	bl	8000d18 <commutateNow_3>
			COMPDELAY
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e003      	b.n	8000f1c <commutationPattern+0x124>
 8000f14:	bf00      	nop
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2bf9      	cmp	r3, #249	; 0xf9
 8000f20:	d9f8      	bls.n	8000f14 <commutationPattern+0x11c>
			;
			waitForCommutation = 0;
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <commutationPattern+0x200>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_B;
 8000f28:	4b36      	ldr	r3, [pc, #216]	; (8001004 <commutationPattern+0x20c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <commutationPattern+0x204>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 8000f34:	4834      	ldr	r0, [pc, #208]	; (8001008 <commutationPattern+0x210>)
 8000f36:	f003 fe8b 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000f3a:	e031      	b.n	8000fa0 <commutationPattern+0x1a8>
		case STEP_4:
			commutateNow_4();
 8000f3c:	f7ff ff12 	bl	8000d64 <commutateNow_4>
			COMPDELAY
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e003      	b.n	8000f4e <commutationPattern+0x156>
 8000f46:	bf00      	nop
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2bf9      	cmp	r3, #249	; 0xf9
 8000f52:	d9f8      	bls.n	8000f46 <commutationPattern+0x14e>
			;
			waitForCommutation = 0;
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <commutationPattern+0x200>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_A;
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <commutationPattern+0x20c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_RISING;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <commutationPattern+0x204>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8000f66:	4829      	ldr	r0, [pc, #164]	; (800100c <commutationPattern+0x214>)
 8000f68:	f003 fe72 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000f6c:	e018      	b.n	8000fa0 <commutationPattern+0x1a8>
		case STEP_5:
			commutateNow_5();
 8000f6e:	f7ff ff1f 	bl	8000db0 <commutateNow_5>
			COMPDELAY
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	e003      	b.n	8000f80 <commutationPattern+0x188>
 8000f78:	bf00      	nop
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2bf9      	cmp	r3, #249	; 0xf9
 8000f84:	d9f8      	bls.n	8000f78 <commutationPattern+0x180>
			;
			waitForCommutation = 0;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <commutationPattern+0x200>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
			phase_bemf = PHASE_C;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <commutationPattern+0x20c>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	701a      	strb	r2, [r3, #0]
			bemf_dir = BEMF_FALLING;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <commutationPattern+0x204>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <commutationPattern+0x218>)
 8000f9a:	f003 fe59 	bl	8004c50 <HAL_COMP_Start_IT>
			break;
 8000f9e:	bf00      	nop
		switch (commutationStepCounter) {
 8000fa0:	e026      	b.n	8000ff0 <commutationPattern+0x1f8>
		}
	} else {
		waitForCommutation = 0;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <commutationPattern+0x200>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
		switch (step) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d820      	bhi.n	8000ff0 <commutationPattern+0x1f8>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <commutationPattern+0x1bc>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fd3 	.word	0x08000fd3
 8000fbc:	08000fd9 	.word	0x08000fd9
 8000fc0:	08000fdf 	.word	0x08000fdf
 8000fc4:	08000fe5 	.word	0x08000fe5
 8000fc8:	08000feb 	.word	0x08000feb
		case STEP_0:
			commutateNow_0();
 8000fcc:	f7ff fe32 	bl	8000c34 <commutateNow_0>
			break;
 8000fd0:	e00e      	b.n	8000ff0 <commutationPattern+0x1f8>
		case STEP_1:
			commutateNow_1();
 8000fd2:	f7ff fe55 	bl	8000c80 <commutateNow_1>
			break;
 8000fd6:	e00b      	b.n	8000ff0 <commutationPattern+0x1f8>
		case STEP_2:
			commutateNow_2();
 8000fd8:	f7ff fe78 	bl	8000ccc <commutateNow_2>
			break;
 8000fdc:	e008      	b.n	8000ff0 <commutationPattern+0x1f8>
		case STEP_3:
			commutateNow_3();
 8000fde:	f7ff fe9b 	bl	8000d18 <commutateNow_3>
			break;
 8000fe2:	e005      	b.n	8000ff0 <commutationPattern+0x1f8>
		case STEP_4:
			commutateNow_4();
 8000fe4:	f7ff febe 	bl	8000d64 <commutateNow_4>
			break;
 8000fe8:	e002      	b.n	8000ff0 <commutationPattern+0x1f8>
		case STEP_5:
			commutateNow_5();
 8000fea:	f7ff fee1 	bl	8000db0 <commutateNow_5>
			break;
 8000fee:	bf00      	nop
		}
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	2000020a 	.word	0x2000020a
 8001000:	20001b48 	.word	0x20001b48
 8001004:	2000000a 	.word	0x2000000a
 8001008:	20001f94 	.word	0x20001f94
 800100c:	20001be8 	.word	0x20001be8
 8001010:	20001fc4 	.word	0x20001fc4

08001014 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001018:	f002 f81c 	bl	8003054 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800101c:	f000 f902 	bl	8001224 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001020:	f000 fe62 	bl	8001ce8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001024:	f000 fe26 	bl	8001c74 <MX_DMA_Init>
	MX_ADC1_Init();
 8001028:	f000 f95a 	bl	80012e0 <MX_ADC1_Init>
	MX_COMP1_Init();
 800102c:	f000 fb14 	bl	8001658 <MX_COMP1_Init>
	MX_COMP2_Init();
 8001030:	f000 fb42 	bl	80016b8 <MX_COMP2_Init>
	MX_COMP3_Init();
 8001034:	f000 fb70 	bl	8001718 <MX_COMP3_Init>
	MX_DAC_Init();
 8001038:	f000 fb9e 	bl	8001778 <MX_DAC_Init>
	MX_TIM1_Init();
 800103c:	f000 fbc6 	bl	80017cc <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8001040:	f000 fde8 	bl	8001c14 <MX_USART1_UART_Init>
	MX_ADC2_Init();
 8001044:	f000 f9bc 	bl	80013c0 <MX_ADC2_Init>
	MX_TIM15_Init();
 8001048:	f000 fd3a 	bl	8001ac0 <MX_TIM15_Init>
	MX_TIM2_Init();
 800104c:	f000 fc5c 	bl	8001908 <MX_TIM2_Init>
	MX_TIM6_Init();
 8001050:	f000 fd00 	bl	8001a54 <MX_TIM6_Init>
	MX_TIM16_Init();
 8001054:	f000 fdb8 	bl	8001bc8 <MX_TIM16_Init>
	MX_ADC3_Init();
 8001058:	f000 fa2e 	bl	80014b8 <MX_ADC3_Init>
	MX_ADC4_Init();
 800105c:	f000 fa9e 	bl	800159c <MX_ADC4_Init>
	MX_TIM3_Init();
 8001060:	f000 fca0 	bl	80019a4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	RetargetInit(&huart1);
 8001064:	4852      	ldr	r0, [pc, #328]	; (80011b0 <main+0x19c>)
 8001066:	f001 f9df 	bl	8002428 <RetargetInit>
	DWT_Init();
 800106a:	f7ff fd9d 	bl	8000ba8 <DWT_Init>
	printf("Test\r\n");
 800106e:	4851      	ldr	r0, [pc, #324]	; (80011b4 <main+0x1a0>)
 8001070:	f00c f924 	bl	800d2bc <puts>
	printf("asdf\r\n");
 8001074:	4850      	ldr	r0, [pc, #320]	; (80011b8 <main+0x1a4>)
 8001076:	f00c f921 	bl	800d2bc <puts>

	HAL_ADC_Start(&hadc4);
 800107a:	4850      	ldr	r0, [pc, #320]	; (80011bc <main+0x1a8>)
 800107c:	f002 fa1e 	bl	80034bc <HAL_ADC_Start>
	while (__HAL_ADC_GET_FLAG(&hadc4, ADC_FLAG_EOC) != SET)
 8001080:	bf00      	nop
 8001082:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <main+0x1a8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b04      	cmp	r3, #4
 800108e:	d1f8      	bne.n	8001082 <main+0x6e>
		;

	adcVbus = HAL_ADC_GetValue(&hadc4);
 8001090:	484a      	ldr	r0, [pc, #296]	; (80011bc <main+0x1a8>)
 8001092:	f002 fc45 	bl	8003920 <HAL_ADC_GetValue>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <main+0x1ac>)
 800109c:	801a      	strh	r2, [r3, #0]

	sConfigOC5B.OCMode = TIM_OCMODE_PWM1;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <main+0x1b0>)
 80010a0:	2260      	movs	r2, #96	; 0x60
 80010a2:	601a      	str	r2, [r3, #0]
	sConfigOC5B.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <main+0x1b0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
	sConfigOC5B.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <main+0x1b0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
	sConfigOC5B.OCPolarity = TIM_OCPOLARITY_HIGH; //HIGH for PWM low detection
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <main+0x1b0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]

	sConfigOC5A.OCMode = TIM_OCMODE_PWM1;
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <main+0x1b4>)
 80010b8:	2260      	movs	r2, #96	; 0x60
 80010ba:	601a      	str	r2, [r3, #0]
	sConfigOC5A.OCFastMode = TIM_OCFAST_DISABLE; //DISABLE
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <main+0x1b4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
	sConfigOC5A.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <main+0x1b4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
	sConfigOC5A.OCPolarity = TIM_OCPOLARITY_LOW; //LOW for PWM high detection
 80010c8:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <main+0x1b4>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	609a      	str	r2, [r3, #8]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ce:	2100      	movs	r1, #0
 80010d0:	483e      	ldr	r0, [pc, #248]	; (80011cc <main+0x1b8>)
 80010d2:	f006 fa2d 	bl	8007530 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 80010d6:	2110      	movs	r1, #16
 80010d8:	483c      	ldr	r0, [pc, #240]	; (80011cc <main+0x1b8>)
 80010da:	f006 fa29 	bl	8007530 <HAL_TIM_PWM_Start>
	//HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
	HAL_TIM_Base_Start(&htim2);
 80010de:	483c      	ldr	r0, [pc, #240]	; (80011d0 <main+0x1bc>)
 80010e0:	f006 f8ac 	bl	800723c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 80010e4:	483b      	ldr	r0, [pc, #236]	; (80011d4 <main+0x1c0>)
 80010e6:	f006 f8a9 	bl	800723c <HAL_TIM_Base_Start>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	483a      	ldr	r0, [pc, #232]	; (80011d8 <main+0x1c4>)
 80010ee:	f004 f8ec 	bl	80052ca <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80010f2:	2300      	movs	r3, #0
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4837      	ldr	r0, [pc, #220]	; (80011d8 <main+0x1c4>)
 80010fa:	f004 f8c1 	bl	8005280 <HAL_DAC_SetValue>

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2DMA, 3);
 80010fe:	2203      	movs	r2, #3
 8001100:	4936      	ldr	r1, [pc, #216]	; (80011dc <main+0x1c8>)
 8001102:	4837      	ldr	r0, [pc, #220]	; (80011e0 <main+0x1cc>)
 8001104:	f002 faf0 	bl	80036e8 <HAL_ADC_Start_DMA>

	__HAL_DMA_DISABLE_IT(&hdma_adc2, DMA_IT_TC);
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <main+0x1d0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <main+0x1d0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0202 	bic.w	r2, r2, #2
 8001116:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_adc2, DMA_IT_HT);
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <main+0x1d0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <main+0x1d0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0204 	bic.w	r2, r2, #4
 8001126:	601a      	str	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, ADC_IT_EOS);
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <main+0x1cc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <main+0x1cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0208 	bic.w	r2, r2, #8
 8001136:	605a      	str	r2, [r3, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, ADC_IT_EOC);
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <main+0x1cc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <main+0x1cc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(&htim2);
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <main+0x1bc>)
 800114a:	f006 f877 	bl	800723c <HAL_TIM_Base_Start>

	setPWM = TIM1->CCR1 = TIM1->CCR5 = 0;
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <main+0x1d4>)
 8001150:	2300      	movs	r3, #0
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <main+0x1d4>)
 8001156:	6353      	str	r3, [r2, #52]	; 0x34
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <main+0x1d8>)
 800115c:	801a      	strh	r2, [r3, #0]

	printf("Mulai!\r\n");
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <main+0x1dc>)
 8001160:	f00c f8ac 	bl	800d2bc <puts>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001164:	f008 fb90 	bl	8009888 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of comparatorTask */
	comparatorTaskHandle = osThreadNew(StartComparatorTask, NULL,
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <main+0x1e0>)
 800116a:	2100      	movs	r1, #0
 800116c:	4822      	ldr	r0, [pc, #136]	; (80011f8 <main+0x1e4>)
 800116e:	f008 fbf3 	bl	8009958 <osThreadNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <main+0x1e8>)
 8001176:	6013      	str	r3, [r2, #0]
			&comparatorTask_attributes);

	/* creation of analogInTask */
	analogInTaskHandle = osThreadNew(StartAnalogInTask, NULL,
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <main+0x1ec>)
 800117a:	2100      	movs	r1, #0
 800117c:	4821      	ldr	r0, [pc, #132]	; (8001204 <main+0x1f0>)
 800117e:	f008 fbeb 	bl	8009958 <osThreadNew>
 8001182:	4603      	mov	r3, r0
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <main+0x1f4>)
 8001186:	6013      	str	r3, [r2, #0]
			&analogInTask_attributes);

	/* creation of controllerTask */
	controllerTaskHandle = osThreadNew(StartControllerTask, NULL,
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <main+0x1f8>)
 800118a:	2100      	movs	r1, #0
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <main+0x1fc>)
 800118e:	f008 fbe3 	bl	8009958 <osThreadNew>
 8001192:	4603      	mov	r3, r0
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <main+0x200>)
 8001196:	6013      	str	r3, [r2, #0]
			&controllerTask_attributes);

	/* creation of positioningTask */
	positioningTaskHandle = osThreadNew(StartPositioningTask, NULL,
 8001198:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <main+0x204>)
 800119a:	2100      	movs	r1, #0
 800119c:	481f      	ldr	r0, [pc, #124]	; (800121c <main+0x208>)
 800119e:	f008 fbdb 	bl	8009958 <osThreadNew>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <main+0x20c>)
 80011a6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80011a8:	f008 fba2 	bl	80098f0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80011ac:	e7fe      	b.n	80011ac <main+0x198>
 80011ae:	bf00      	nop
 80011b0:	20001d4c 	.word	0x20001d4c
 80011b4:	0800f588 	.word	0x0800f588
 80011b8:	0800f590 	.word	0x0800f590
 80011bc:	2000213c 	.word	0x2000213c
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000200c 	.word	0x2000200c
 80011c8:	20002224 	.word	0x20002224
 80011cc:	20001f48 	.word	0x20001f48
 80011d0:	200020f0 	.word	0x200020f0
 80011d4:	20001ef8 	.word	0x20001ef8
 80011d8:	20001dd4 	.word	0x20001dd4
 80011dc:	2000020c 	.word	0x2000020c
 80011e0:	20001b4c 	.word	0x20001b4c
 80011e4:	2000218c 	.word	0x2000218c
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	20000004 	.word	0x20000004
 80011f0:	0800f598 	.word	0x0800f598
 80011f4:	0800f5b8 	.word	0x0800f5b8
 80011f8:	08001f29 	.word	0x08001f29
 80011fc:	20001c18 	.word	0x20001c18
 8001200:	0800f5dc 	.word	0x0800f5dc
 8001204:	080020d5 	.word	0x080020d5
 8001208:	20001ef4 	.word	0x20001ef4
 800120c:	0800f600 	.word	0x0800f600
 8001210:	080021c9 	.word	0x080021c9
 8001214:	2000221c 	.word	0x2000221c
 8001218:	0800f624 	.word	0x0800f624
 800121c:	08002351 	.word	0x08002351
 8001220:	20001dd0 	.word	0x20001dd0

08001224 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b09e      	sub	sp, #120	; 0x78
 8001228:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800122e:	2228      	movs	r2, #40	; 0x28
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f00b fb62 	bl	800c8fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001248:	463b      	mov	r3, r7
 800124a:	223c      	movs	r2, #60	; 0x3c
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00b fb54 	bl	800c8fc <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001262:	2301      	movs	r3, #1
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001270:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001274:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001276:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fc66 	bl	8005b4c <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x66>
		Error_Handler();
 8001286:	f001 f8c9 	bl	800241c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a4:	2102      	movs	r1, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fb58 	bl	800695c <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x92>
		Error_Handler();
 80012b2:	f001 f8b3 	bl	800241c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80012b6:	f241 0301 	movw	r3, #4097	; 0x1001
 80012ba:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80012c4:	463b      	mov	r3, r7
 80012c6:	4618      	mov	r0, r3
 80012c8:	f005 fdb0 	bl	8006e2c <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xb2>
		Error_Handler();
 80012d2:	f001 f8a3 	bl	800241c <Error_Handler>
	}
}
 80012d6:	bf00      	nop
 80012d8:	3778      	adds	r7, #120	; 0x78
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001308:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_ADC1_Init+0xdc>)
 800130c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001310:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_ADC1_Init+0xdc>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001320:	2201      	movs	r2, #1
 8001322:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xdc>)
 800132e:	2200      	movs	r2, #0
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001334:	2201      	movs	r2, #1
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xdc>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001340:	2201      	movs	r2, #1
 8001342:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xdc>)
 800134e:	2208      	movs	r2, #8
 8001350:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_ADC1_Init+0xdc>)
 800135a:	2200      	movs	r2, #0
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_ADC1_Init+0xdc>)
 8001360:	f001 fecc 	bl	80030fc <HAL_ADC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0x8e>
		Error_Handler();
 800136a:	f001 f857 	bl	800241c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_ADC1_Init+0xdc>)
 800137a:	f003 f8ff 	bl	800457c <HAL_ADCEx_MultiModeConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8001384:	f001 f84a 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001388:	2301      	movs	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800138c:	2301      	movs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001394:	2304      	movs	r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_ADC1_Init+0xdc>)
 80013a6:	f002 fdfd 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0xd4>
		Error_Handler();
 80013b0:	f001 f834 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20001c68 	.word	0x20001c68

080013c0 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN ADC2_Init 1 */
	/* USER CODE END ADC2_Init 1 */
	/** Common config
	 */
	hadc2.Instance = ADC2;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013d8:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <MX_ADC2_Init+0xf4>)
 80013da:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = ENABLE;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	765a      	strb	r2, [r3, #25]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <MX_ADC2_Init+0xf0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO2;
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001408:	f44f 7220 	mov.w	r2, #640	; 0x280
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 3;
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001416:	2203      	movs	r2, #3
 8001418:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <MX_ADC2_Init+0xf0>)
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001424:	2208      	movs	r2, #8
 8001426:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_ADC2_Init+0xf0>)
 800142a:	2200      	movs	r2, #0
 800142c:	761a      	strb	r2, [r3, #24]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001434:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001436:	f001 fe61 	bl	80030fc <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC2_Init+0x84>
		Error_Handler();
 8001440:	f000 ffec 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001444:	2302      	movs	r3, #2
 8001446:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8001450:	2302      	movs	r3, #2
 8001452:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_ADC2_Init+0xf0>)
 8001462:	f002 fd9f 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC2_Init+0xb0>
		Error_Handler();
 800146c:	f000 ffd6 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001470:	2303      	movs	r3, #3
 8001472:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001474:	2302      	movs	r3, #2
 8001476:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_ADC2_Init+0xf0>)
 800147e:	f002 fd91 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC2_Init+0xcc>
		Error_Handler();
 8001488:	f000 ffc8 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800148c:	2304      	movs	r3, #4
 800148e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001490:	2303      	movs	r3, #3
 8001492:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_ADC2_Init+0xf0>)
 800149a:	f002 fd83 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC2_Init+0xe8>
		Error_Handler();
 80014a4:	f000 ffba 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20001b4c 	.word	0x20001b4c
 80014b4:	50000100 	.word	0x50000100

080014b8 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Common config
	 */
	hadc3.Instance = ADC3;
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014dc:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <MX_ADC3_Init+0xe0>)
 80014de:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014e6:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	765a      	strb	r2, [r3, #25]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <MX_ADC3_Init+0xdc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_ADC3_Init+0xdc>)
 800150a:	2201      	movs	r2, #1
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001516:	2201      	movs	r2, #1
 8001518:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_ADC3_Init+0xdc>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001524:	2204      	movs	r2, #4
 8001526:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_ADC3_Init+0xdc>)
 800152a:	2200      	movs	r2, #0
 800152c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001534:	4817      	ldr	r0, [pc, #92]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001536:	f001 fde1 	bl	80030fc <HAL_ADC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC3_Init+0x8c>
		Error_Handler();
 8001540:	f000 ff6c 	bl	800241c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <MX_ADC3_Init+0xdc>)
 8001550:	f003 f814 	bl	800457c <HAL_ADCEx_MultiModeConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_ADC3_Init+0xa6>
		Error_Handler();
 800155a:	f000 ff5f 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800155e:	2305      	movs	r3, #5
 8001560:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001562:	2301      	movs	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800156a:	2307      	movs	r3, #7
 800156c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_ADC3_Init+0xdc>)
 800157c:	f002 fd12 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC3_Init+0xd2>
		Error_Handler();
 8001586:	f000 ff49 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20001cb8 	.word	0x20001cb8
 8001598:	50000400 	.word	0x50000400

0800159c <MX_ADC4_Init>:
/**
 * @brief ADC4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC4_Init(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC4_Init 0 */

	/* USER CODE END ADC4_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC4_Init 1 */

	/* USER CODE END ADC4_Init 1 */
	/** Common config
	 */
	hadc4.Instance = ADC4;
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <MX_ADC4_Init+0xb8>)
 80015b6:	601a      	str	r2, [r3, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015be:	605a      	str	r2, [r3, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
	hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
	hadc4.Init.ContinuousConvMode = ENABLE;
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	765a      	strb	r2, [r3, #25]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
	hadc4.Init.NbrOfConversion = 1;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	61da      	str	r2, [r3, #28]
	hadc4.Init.DMAContinuousRequests = DISABLE;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_ADC4_Init+0xb4>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	615a      	str	r2, [r3, #20]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_ADC4_Init+0xb4>)
 8001602:	2200      	movs	r2, #0
 8001604:	761a      	strb	r2, [r3, #24]
	hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC4_Init+0xb4>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc4) != HAL_OK) {
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_ADC4_Init+0xb4>)
 800160e:	f001 fd75 	bl	80030fc <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC4_Init+0x80>
		Error_Handler();
 8001618:	f000 ff00 	bl	800241c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800161c:	2303      	movs	r3, #3
 800161e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2301      	movs	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001628:	2305      	movs	r3, #5
 800162a:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_ADC4_Init+0xb4>)
 800163a:	f002 fcb3 	bl	8003fa4 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC4_Init+0xac>
		Error_Handler();
 8001644:	f000 feea 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN ADC4_Init 2 */

	/* USER CODE END ADC4_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000213c 	.word	0x2000213c
 8001654:	50000500 	.word	0x50000500

08001658 <MX_COMP1_Init>:
/**
 * @brief COMP1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP1_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE END COMP1_Init 0 */

	/* USER CODE BEGIN COMP1_Init 1 */

	/* USER CODE END COMP1_Init 1 */
	hcomp1.Instance = COMP1;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_COMP1_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_COMP1_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
	hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	605a      	str	r2, [r3, #4]
	hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_COMP1_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
	hcomp1.Init.Output = COMP_OUTPUT_NONE;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001670:	227f      	movs	r2, #127	; 0x7f
 8001672:	60da      	str	r2, [r3, #12]
	hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
	hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <MX_COMP1_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
	hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001682:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001686:	619a      	str	r2, [r3, #24]
	hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_COMP1_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
	hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
	hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_COMP1_Init+0x58>)
 8001696:	2203      	movs	r2, #3
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_COMP_Init(&hcomp1) != HAL_OK) {
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_COMP1_Init+0x58>)
 800169c:	f003 f990 	bl	80049c0 <HAL_COMP_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_COMP1_Init+0x52>
		Error_Handler();
 80016a6:	f000 feb9 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN COMP1_Init 2 */

	/* USER CODE END COMP1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20001be8 	.word	0x20001be8
 80016b4:	4001001c 	.word	0x4001001c

080016b8 <MX_COMP2_Init>:
/**
 * @brief COMP2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP2_Init(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	/* USER CODE END COMP2_Init 0 */

	/* USER CODE BEGIN COMP2_Init 1 */

	/* USER CODE END COMP2_Init 1 */
	hcomp2.Instance = COMP2;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_COMP2_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <MX_COMP2_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
	hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_COMP2_Init+0x58>)
 80016c4:	2240      	movs	r2, #64	; 0x40
 80016c6:	605a      	str	r2, [r3, #4]
	hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_COMP2_Init+0x58>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	609a      	str	r2, [r3, #8]
	hcomp2.Init.Output = COMP_OUTPUT_NONE;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_COMP2_Init+0x58>)
 80016d0:	227f      	movs	r2, #127	; 0x7f
 80016d2:	60da      	str	r2, [r3, #12]
	hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_COMP2_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
	hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_COMP2_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
	hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_COMP2_Init+0x58>)
 80016e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016e6:	619a      	str	r2, [r3, #24]
	hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_COMP2_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
	hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_COMP2_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
	hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_COMP2_Init+0x58>)
 80016f6:	2203      	movs	r2, #3
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_COMP_Init(&hcomp2) != HAL_OK) {
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_COMP2_Init+0x58>)
 80016fc:	f003 f960 	bl	80049c0 <HAL_COMP_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_COMP2_Init+0x52>
		Error_Handler();
 8001706:	f000 fe89 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN COMP2_Init 2 */

	/* USER CODE END COMP2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001f94 	.word	0x20001f94
 8001714:	40010020 	.word	0x40010020

08001718 <MX_COMP3_Init>:
/**
 * @brief COMP3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_COMP3_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	/* USER CODE END COMP3_Init 0 */

	/* USER CODE BEGIN COMP3_Init 1 */

	/* USER CODE END COMP3_Init 1 */
	hcomp3.Instance = COMP3;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_COMP3_Init+0x58>)
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <MX_COMP3_Init+0x5c>)
 8001720:	601a      	str	r2, [r3, #0]
	hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_COMP3_Init+0x58>)
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	605a      	str	r2, [r3, #4]
	hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_COMP3_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
	hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_COMP3_Init+0x58>)
 8001730:	227f      	movs	r2, #127	; 0x7f
 8001732:	60da      	str	r2, [r3, #12]
	hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_COMP3_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
	hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_COMP3_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
	hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_COMP3_Init+0x58>)
 8001742:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001746:	619a      	str	r2, [r3, #24]
	hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_COMP3_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
	hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_COMP3_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
	hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_COMP3_Init+0x58>)
 8001756:	2203      	movs	r2, #3
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_COMP_Init(&hcomp3) != HAL_OK) {
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_COMP3_Init+0x58>)
 800175c:	f003 f930 	bl	80049c0 <HAL_COMP_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_COMP3_Init+0x52>
		Error_Handler();
 8001766:	f000 fe59 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN COMP3_Init 2 */

	/* USER CODE END COMP3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20001fc4 	.word	0x20001fc4
 8001774:	40010024 	.word	0x40010024

08001778 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_DAC_Init+0x4c>)
 800178a:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <MX_DAC_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_DAC_Init+0x4c>)
 8001790:	f003 fd4a 	bl	8005228 <HAL_DAC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_DAC_Init+0x26>
		Error_Handler();
 800179a:	f000 fe3f 	bl	800241c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_DAC_Init+0x4c>)
 80017ae:	f003 fe31 	bl	8005414 <HAL_DAC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_DAC_Init+0x44>
		Error_Handler();
 80017b8:	f000 fe30 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20001dd4 	.word	0x20001dd4
 80017c8:	40007400 	.word	0x40007400

080017cc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b096      	sub	sp, #88	; 0x58
 80017d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	222c      	movs	r2, #44	; 0x2c
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00b f87f 	bl	800c8fc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <MX_TIM1_Init+0x134>)
 8001800:	4a40      	ldr	r2, [pc, #256]	; (8001904 <MX_TIM1_Init+0x138>)
 8001802:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <MX_TIM1_Init+0x134>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <MX_TIM1_Init+0x134>)
 800180c:	2260      	movs	r2, #96	; 0x60
 800180e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1800;
 8001810:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <MX_TIM1_Init+0x134>)
 8001812:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001816:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <MX_TIM1_Init+0x134>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <MX_TIM1_Init+0x134>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <MX_TIM1_Init+0x134>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800182a:	4835      	ldr	r0, [pc, #212]	; (8001900 <MX_TIM1_Init+0x134>)
 800182c:	f005 fe29 	bl	8007482 <HAL_TIM_PWM_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x6e>
		Error_Handler();
 8001836:	f000 fdf1 	bl	800241c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800183a:	2320      	movs	r3, #32
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 800183e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001842:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184c:	4619      	mov	r1, r3
 800184e:	482c      	ldr	r0, [pc, #176]	; (8001900 <MX_TIM1_Init+0x134>)
 8001850:	f007 f9da 	bl	8008c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800185a:	f000 fddf 	bl	800241c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800186e:	2304      	movs	r3, #4
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800187c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	481e      	ldr	r0, [pc, #120]	; (8001900 <MX_TIM1_Init+0x134>)
 8001886:	f006 fa7f 	bl	8007d88 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8001890:	f000 fdc4 	bl	800241c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5)
 8001894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001898:	2210      	movs	r2, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4818      	ldr	r0, [pc, #96]	; (8001900 <MX_TIM1_Init+0x134>)
 800189e:	f006 fa73 	bl	8007d88 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 80018a8:	f000 fdb8 	bl	800241c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_TIM1_Init+0x134>)
 80018e2:	f007 fa11 	bl	8008d08 <HAL_TIMEx_ConfigBreakDeadTime>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x124>
			!= HAL_OK) {
		Error_Handler();
 80018ec:	f000 fd96 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <MX_TIM1_Init+0x134>)
 80018f2:	f001 f9a1 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001f48 	.word	0x20001f48
 8001904:	40012c00 	.word	0x40012c00

08001908 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <MX_TIM2_Init+0x98>)
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_TIM2_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001950:	f005 fc1c 	bl	800718c <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x56>
		Error_Handler();
 800195a:	f000 fd5f 	bl	800241c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <MX_TIM2_Init+0x98>)
 800196c:	f006 fb20 	bl	8007fb0 <HAL_TIM_ConfigClockSource>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0x72>
		Error_Handler();
 8001976:	f000 fd51 	bl	800241c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <MX_TIM2_Init+0x98>)
 8001988:	f007 f93e 	bl	8008c08 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001992:	f000 fd43 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200020f0 	.word	0x200020f0

080019a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <MX_TIM3_Init+0xac>)
 80019cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019dc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019e0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <MX_TIM3_Init+0xa8>)
 80019f0:	f005 fcf0 	bl	80073d4 <HAL_TIM_OC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x5a>
		Error_Handler();
 80019fa:	f000 fd0f 	bl	800241c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480f      	ldr	r0, [pc, #60]	; (8001a4c <MX_TIM3_Init+0xa8>)
 8001a0e:	f007 f8fb 	bl	8008c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001a18:	f000 fd00 	bl	800241c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8001a20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a24:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM3_Init+0xa8>)
 8001a36:	f006 f891 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0xa0>
		Error_Handler();
 8001a40:	f000 fcec 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20001c1c 	.word	0x20001c1c
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <MX_TIM6_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a6c:	2247      	movs	r2, #71	; 0x47
 8001a6e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 10;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a78:	220a      	movs	r2, #10
 8001a7a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001a84:	f005 fb82 	bl	800718c <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001a8e:	f000 fcc5 	bl	800241c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM6_Init+0x64>)
 8001aa0:	f007 f8b2 	bl	8008c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001aaa:	f000 fcb7 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001ef8 	.word	0x20001ef8
 8001abc:	40001000 	.word	0x40001000

08001ac0 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001aee:	4a35      	ldr	r2, [pc, #212]	; (8001bc4 <MX_TIM15_Init+0x104>)
 8001af0:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 72 - 1;
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001af4:	2247      	movs	r2, #71	; 0x47
 8001af6:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b04:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8001b18:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b1a:	f005 fb37 	bl	800718c <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM15_Init+0x68>
		Error_Handler();
 8001b24:	f000 fc7a 	bl	800241c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	4619      	mov	r1, r3
 8001b34:	4822      	ldr	r0, [pc, #136]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b36:	f006 fa3b 	bl	8007fb0 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM15_Init+0x84>
		Error_Handler();
 8001b40:	f000 fc6c 	bl	800241c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim15) != HAL_OK) {
 8001b44:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b46:	f005 fe89 	bl	800785c <HAL_TIM_IC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM15_Init+0x94>
		Error_Handler();
 8001b50:	f000 fc64 	bl	800241c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b64:	f007 f850 	bl	8008c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM15_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001b6e:	f000 fc55 	bl	800241c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001b8a:	f006 f861 	bl	8007c50 <HAL_TIM_IC_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM15_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001b94:	f000 fc42 	bl	800241c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_TIM15_Init+0x100>)
 8001ba8:	f006 f852 	bl	8007c50 <HAL_TIM_IC_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8001bb2:	f000 fc33 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20001b9c 	.word	0x20001b9c
 8001bc4:	40014000 	.word	0x40014000

08001bc8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <MX_TIM16_Init+0x48>)
 8001bd0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 72 - 1;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bd4:	2247      	movs	r2, #71	; 0x47
 8001bd6:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be4:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_TIM16_Init+0x44>)
 8001bfa:	f005 fac7 	bl	800718c <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM16_Init+0x40>
		Error_Handler();
 8001c04:	f000 fc0a 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200021d0 	.word	0x200021d0
 8001c10:	40014400 	.word	0x40014400

08001c14 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_USART1_UART_Init+0x5c>)
 8001c1c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART1_UART_Init+0x58>)
 8001c58:	f007 f8f2 	bl	8008e40 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001c62:	f000 fbdb 	bl	800241c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20001d4c 	.word	0x20001d4c
 8001c70:	40013800 	.word	0x40013800

08001c74 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6153      	str	r3, [r2, #20]
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_DMA_Init+0x70>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2105      	movs	r1, #5
 8001cae:	200b      	movs	r0, #11
 8001cb0:	f003 fa90 	bl	80051d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cb4:	200b      	movs	r0, #11
 8001cb6:	f003 faa9 	bl	800520c <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f003 fa88 	bl	80051d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cc4:	200f      	movs	r0, #15
 8001cc6:	f003 faa1 	bl	800520c <HAL_NVIC_EnableIRQ>
	/* DMA2_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	2038      	movs	r0, #56	; 0x38
 8001cd0:	f003 fa80 	bl	80051d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001cd4:	2038      	movs	r0, #56	; 0x38
 8001cd6:	f003 fa99 	bl	800520c <HAL_NVIC_EnableIRQ>

}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d08:	6153      	str	r3, [r2, #20]
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6153      	str	r3, [r2, #20]
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <MX_GPIO_Init+0xb0>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001d46:	2200      	movs	r2, #0
 8001d48:	f240 71fb 	movw	r1, #2043	; 0x7fb
 8001d4c:	4813      	ldr	r0, [pc, #76]	; (8001d9c <MX_GPIO_Init+0xb4>)
 8001d4e:	f003 fee5 	bl	8005b1c <HAL_GPIO_WritePin>
					| INH_B_Pin | IN_C_Pin | INH_C_Pin | LED1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : OUT_A_Pin OUT_B_Pin OUT_C_Pin IN_A_Pin
	 IN_B_Pin IN_C_Pin */
	GPIO_InitStruct.Pin = OUT_A_Pin | OUT_B_Pin | OUT_C_Pin | IN_A_Pin
 8001d52:	f240 43ab 	movw	r3, #1195	; 0x4ab
 8001d56:	60fb      	str	r3, [r7, #12]
			| IN_B_Pin | IN_C_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d58:	2311      	movs	r3, #17
 8001d5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <MX_GPIO_Init+0xb4>)
 8001d6c:	f003 fd5c 	bl	8005828 <HAL_GPIO_Init>

	/*Configure GPIO pins : INH_A_Pin INH_B_Pin INH_C_Pin LED1_Pin */
	GPIO_InitStruct.Pin = INH_A_Pin | INH_B_Pin | INH_C_Pin | LED1_Pin;
 8001d70:	f44f 7354 	mov.w	r3, #848	; 0x350
 8001d74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4619      	mov	r1, r3
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_GPIO_Init+0xb4>)
 8001d8a:	f003 fd4d 	bl	8005828 <HAL_GPIO_Init>

}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400

08001da0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP1 && waitForCommutation == 0) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_COMP_TriggerCallback+0x80>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10b      	bne.n	8001dde <HAL_COMP_TriggerCallback+0x2a>
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_COMP_TriggerCallback+0x84>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_COMP_TriggerCallback+0x2a>
		HAL_COMP_Stop_IT(&hcomp1);
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <HAL_COMP_TriggerCallback+0x88>)
 8001dd2:	f003 f831 	bl	8004e38 <HAL_COMP_Stop_IT>
		compTrig = COMP1_CALLBACK;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_COMP_TriggerCallback+0x8c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e020      	b.n	8001e20 <HAL_COMP_TriggerCallback+0x6c>
	} else if (hcomp->Instance == COMP2 && waitForCommutation == 0) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_COMP_TriggerCallback+0x90>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d10b      	bne.n	8001e00 <HAL_COMP_TriggerCallback+0x4c>
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_COMP_TriggerCallback+0x84>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_COMP_TriggerCallback+0x4c>
		HAL_COMP_Stop_IT(&hcomp2);
 8001df2:	4815      	ldr	r0, [pc, #84]	; (8001e48 <HAL_COMP_TriggerCallback+0x94>)
 8001df4:	f003 f820 	bl	8004e38 <HAL_COMP_Stop_IT>
		compTrig = COMP2_CALLBACK;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_COMP_TriggerCallback+0x8c>)
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e00f      	b.n	8001e20 <HAL_COMP_TriggerCallback+0x6c>
	} else if (hcomp->Instance == COMP3 && waitForCommutation == 0) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_COMP_TriggerCallback+0x98>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10a      	bne.n	8001e20 <HAL_COMP_TriggerCallback+0x6c>
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_COMP_TriggerCallback+0x84>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_COMP_TriggerCallback+0x6c>
		HAL_COMP_Stop_IT(&hcomp3);
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <HAL_COMP_TriggerCallback+0x9c>)
 8001e16:	f003 f80f 	bl	8004e38 <HAL_COMP_Stop_IT>
		compTrig = COMP3_CALLBACK;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_COMP_TriggerCallback+0x8c>)
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]
	}
	osThreadFlagsSet(comparatorTaskHandle, 0x1);
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_COMP_TriggerCallback+0xa0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f007 fe40 	bl	8009aac <osThreadFlagsSet>

}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	4001001c 	.word	0x4001001c
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20001be8 	.word	0x20001be8
 8001e40:	20000208 	.word	0x20000208
 8001e44:	40010020 	.word	0x40010020
 8001e48:	20001f94 	.word	0x20001f94
 8001e4c:	40010024 	.word	0x40010024
 8001e50:	20001fc4 	.word	0x20001fc4
 8001e54:	20001c18 	.word	0x20001c18

08001e58 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	static uint32_t total;
	//Motor Besar 415KV
	//float IntegralOffset = 0.020;
	//float IntegralOffset = 0.225;
	//float IntegralOffset = 0.235;
	float IntegralOffset = 0.185;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8001e62:	60fb      	str	r3, [r7, #12]

	//Motor Kecil 930KV
	//float IntegralOffset = 0.0750;

	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d149      	bne.n	8001f02 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f1b      	ldrb	r3, [r3, #28]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d145      	bne.n	8001f02 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
		switch (phase_bemf) {
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d018      	beq.n	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	dc1f      	bgt.n	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_TIM_PWM_PulseFinishedCallback+0x34>
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d009      	beq.n	8001e9e <HAL_TIM_PWM_PulseFinishedCallback+0x46>
 8001e8a:	e01a      	b.n	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
		case PHASE_A:
			total += adc2DMA[0];
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001e9a:	6013      	str	r3, [r2, #0]
			break;
 8001e9c:	e011      	b.n	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
		case PHASE_B:
			total += adc2DMA[1];
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8001ea0:	885b      	ldrh	r3, [r3, #2]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001eac:	6013      	str	r3, [r2, #0]
			break;
 8001eae:	e008      	b.n	8001ec2 <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
		case PHASE_C:
			total += adc2DMA[2];
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>)
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001ebe:	6013      	str	r3, [r2, #0]
			break;
 8001ec0:	bf00      	nop
		}

		if ((float) total * 0.000025f >= IntegralOffset) {
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001f20 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>
 8001ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d900      	bls.n	8001ee6 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
			total = 0;
			commutationPattern(NEXT);
		}
	}
}
 8001ee4:	e00d      	b.n	8001f02 <HAL_TIM_PWM_PulseFinishedCallback+0xaa>
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0202 	bic.w	r2, r2, #2
 8001ef4:	60da      	str	r2, [r3, #12]
			total = 0;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
			commutationPattern(NEXT);
 8001efc:	2009      	movs	r0, #9
 8001efe:	f7fe ff7b 	bl	8000df8 <commutationPattern>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	3e3d70a4 	.word	0x3e3d70a4
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	2000000a 	.word	0x2000000a
 8001f18:	2000020c 	.word	0x2000020c
 8001f1c:	20000228 	.word	0x20000228
 8001f20:	37d1b717 	.word	0x37d1b717
 8001f24:	20001f48 	.word	0x20001f48

08001f28 <StartComparatorTask>:
 * @brief  Function implementing the comparatorTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartComparatorTask */
void StartComparatorTask(void *argument) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	2100      	movs	r1, #0
 8001f36:	2001      	movs	r0, #1
 8001f38:	f007 fe18 	bl	8009b6c <osThreadFlagsWait>
		//TIM1->CCR5 = TIM1->CCR5 = setPWM + compWindowOffset;

		if (compTrig == COMP1_CALLBACK && waitForCommutation == 0) {
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <StartComparatorTask+0x180>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d110      	bne.n	8001f66 <StartComparatorTask+0x3e>
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <StartComparatorTask+0x184>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <StartComparatorTask+0x3e>
			//printf("COMP1 TRIG\r\n");

			//__HAL_TIM_SET_COUNTER(&htim2, 0);
			//__HAL_DMA_ENABLE_IT(&hdma_adc2, DMA_IT_TC);
			//__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
			__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001f4e:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <StartComparatorTask+0x188>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <StartComparatorTask+0x188>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0202 	orr.w	r2, r2, #2
 8001f5c:	60da      	str	r2, [r3, #12]

			waitForCommutation = 1;
 8001f5e:	4b53      	ldr	r3, [pc, #332]	; (80020ac <StartComparatorTask+0x184>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e028      	b.n	8001fb8 <StartComparatorTask+0x90>
		} else if (compTrig == COMP2_CALLBACK && waitForCommutation == 0) {
 8001f66:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <StartComparatorTask+0x180>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d110      	bne.n	8001f90 <StartComparatorTask+0x68>
 8001f6e:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <StartComparatorTask+0x184>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <StartComparatorTask+0x68>
			//printf("COMP2 TRIG\r\n");

			//__HAL_TIM_SET_COUNTER(&htim2, 0);
			//__HAL_DMA_ENABLE_IT(&hdma_adc2, DMA_IT_TC);
			//__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
			__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001f78:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <StartComparatorTask+0x188>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <StartComparatorTask+0x188>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0202 	orr.w	r2, r2, #2
 8001f86:	60da      	str	r2, [r3, #12]

			waitForCommutation = 1;
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <StartComparatorTask+0x184>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e013      	b.n	8001fb8 <StartComparatorTask+0x90>
		} else if (compTrig == COMP3_CALLBACK && waitForCommutation == 0) {
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <StartComparatorTask+0x180>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d10f      	bne.n	8001fb8 <StartComparatorTask+0x90>
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <StartComparatorTask+0x184>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <StartComparatorTask+0x90>
			//printf("COMP3 TRIG\r\n");

			//__HAL_TIM_SET_COUNTER(&htim2, 0);
			//__HAL_DMA_ENABLE_IT(&hdma_adc2, DMA_IT_TC);
			//__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
			__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <StartComparatorTask+0x188>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <StartComparatorTask+0x188>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0202 	orr.w	r2, r2, #2
 8001fb0:	60da      	str	r2, [r3, #12]

			waitForCommutation = 1;
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <StartComparatorTask+0x184>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
		}

		if (setPWM > 360 && !pwmState) {
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <StartComparatorTask+0x18c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001fc2:	dd34      	ble.n	800202e <StartComparatorTask+0x106>
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <StartComparatorTask+0x190>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12f      	bne.n	800202e <StartComparatorTask+0x106>
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin,
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f240 4103 	movw	r1, #1027	; 0x403
 8001fd4:	4839      	ldr	r0, [pc, #228]	; (80020bc <StartComparatorTask+0x194>)
 8001fd6:	f003 fda1 	bl	8005b1c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);

			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	4836      	ldr	r0, [pc, #216]	; (80020bc <StartComparatorTask+0x194>)
 8001fe2:	f003 fd9b 	bl	8005b1c <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4831      	ldr	r0, [pc, #196]	; (80020b0 <StartComparatorTask+0x188>)
 8001fea:	f005 fba1 	bl	8007730 <HAL_TIM_PWM_Stop>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4832      	ldr	r0, [pc, #200]	; (80020c0 <StartComparatorTask+0x198>)
 8001ff6:	f003 f943 	bl	8005280 <HAL_DAC_SetValue>
			compWindowOffset = -80;
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <StartComparatorTask+0x19c>)
 8001ffc:	f64f 72b0 	movw	r2, #65456	; 0xffb0
 8002000:	801a      	strh	r2, [r3, #0]

			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5A, TIM_CHANNEL_5);
 8002002:	2210      	movs	r2, #16
 8002004:	4930      	ldr	r1, [pc, #192]	; (80020c8 <StartComparatorTask+0x1a0>)
 8002006:	482a      	ldr	r0, [pc, #168]	; (80020b0 <StartComparatorTask+0x188>)
 8002008:	f005 febe 	bl	8007d88 <HAL_TIM_PWM_ConfigChannel>
			TIM1->CCR5 = setPWM + compWindowOffset;
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <StartComparatorTask+0x18c>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b21b      	sxth	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <StartComparatorTask+0x19c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b21b      	sxth	r3, r3
 800201a:	441a      	add	r2, r3
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <StartComparatorTask+0x1a4>)
 800201e:	659a      	str	r2, [r3, #88]	; 0x58
			pwmState = 1;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <StartComparatorTask+0x190>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8002026:	2110      	movs	r1, #16
 8002028:	4821      	ldr	r0, [pc, #132]	; (80020b0 <StartComparatorTask+0x188>)
 800202a:	f005 fa81 	bl	8007530 <HAL_TIM_PWM_Start>
		}

		if (setPWM < 300 && pwmState) {
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <StartComparatorTask+0x18c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b21b      	sxth	r3, r3
 8002034:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002038:	f6bf af7a 	bge.w	8001f30 <StartComparatorTask+0x8>
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <StartComparatorTask+0x190>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	f43f af74 	beq.w	8001f30 <StartComparatorTask+0x8>
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin,
 8002048:	2201      	movs	r2, #1
 800204a:	f240 4103 	movw	r1, #1027	; 0x403
 800204e:	481b      	ldr	r0, [pc, #108]	; (80020bc <StartComparatorTask+0x194>)
 8002050:	f003 fd64 	bl	8005b1c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);

			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205a:	4818      	ldr	r0, [pc, #96]	; (80020bc <StartComparatorTask+0x194>)
 800205c:	f003 fd5e 	bl	8005b1c <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 8002060:	2110      	movs	r1, #16
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <StartComparatorTask+0x188>)
 8002064:	f005 fb64 	bl	8007730 <HAL_TIM_PWM_Stop>
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002068:	2300      	movs	r3, #0
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	4814      	ldr	r0, [pc, #80]	; (80020c0 <StartComparatorTask+0x198>)
 8002070:	f003 f906 	bl	8005280 <HAL_DAC_SetValue>
			compWindowOffset = 250;
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <StartComparatorTask+0x19c>)
 8002076:	22fa      	movs	r2, #250	; 0xfa
 8002078:	801a      	strh	r2, [r3, #0]

			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5B, TIM_CHANNEL_5);
 800207a:	2210      	movs	r2, #16
 800207c:	4914      	ldr	r1, [pc, #80]	; (80020d0 <StartComparatorTask+0x1a8>)
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <StartComparatorTask+0x188>)
 8002080:	f005 fe82 	bl	8007d88 <HAL_TIM_PWM_ConfigChannel>
			TIM1->CCR5 = setPWM + compWindowOffset;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <StartComparatorTask+0x18c>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b21b      	sxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <StartComparatorTask+0x19c>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b21b      	sxth	r3, r3
 8002092:	441a      	add	r2, r3
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <StartComparatorTask+0x1a4>)
 8002096:	659a      	str	r2, [r3, #88]	; 0x58
			pwmState = 0;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <StartComparatorTask+0x190>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 800209e:	2110      	movs	r1, #16
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <StartComparatorTask+0x188>)
 80020a2:	f005 fa45 	bl	8007530 <HAL_TIM_PWM_Start>
		osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 80020a6:	e743      	b.n	8001f30 <StartComparatorTask+0x8>
 80020a8:	20000208 	.word	0x20000208
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20001f48 	.word	0x20001f48
 80020b4:	20000004 	.word	0x20000004
 80020b8:	20000209 	.word	0x20000209
 80020bc:	48000400 	.word	0x48000400
 80020c0:	20001dd4 	.word	0x20001dd4
 80020c4:	20000006 	.word	0x20000006
 80020c8:	20002224 	.word	0x20002224
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	2000200c 	.word	0x2000200c

080020d4 <StartAnalogInTask>:
 * @brief Function implementing the analogInTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAnalogInTask */
void StartAnalogInTask(void *argument) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAnalogInTask */
	uint16_t analogIn = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	81fb      	strh	r3, [r7, #14]
	uint16_t analogVbus = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	81bb      	strh	r3, [r7, #12]
	//uint16_t newThreshold = 0;
	HAL_ADC_Start(&hadc3);
 80020e4:	4831      	ldr	r0, [pc, #196]	; (80021ac <StartAnalogInTask+0xd8>)
 80020e6:	f001 f9e9 	bl	80034bc <HAL_ADC_Start>
	/* Infinite loop */
	for (;;) {
		analogIn = (uint16_t) HAL_ADC_GetValue(&hadc3);
 80020ea:	4830      	ldr	r0, [pc, #192]	; (80021ac <StartAnalogInTask+0xd8>)
 80020ec:	f001 fc18 	bl	8003920 <HAL_ADC_GetValue>
 80020f0:	4603      	mov	r3, r0
 80020f2:	81fb      	strh	r3, [r7, #14]
		analogVbus = (uint16_t) HAL_ADC_GetValue(&hadc4);
 80020f4:	482e      	ldr	r0, [pc, #184]	; (80021b0 <StartAnalogInTask+0xdc>)
 80020f6:	f001 fc13 	bl	8003920 <HAL_ADC_GetValue>
 80020fa:	4603      	mov	r3, r0
 80020fc:	81bb      	strh	r3, [r7, #12]

		//printf("%d\t%d\t%d\t%d\t%f\r\n", analogIn, adc2DMA[0], adc2DMA[1], adc2DMA[2], (float)analogVbus * (analogIn / 4096.0));
		switch (mode_motor) {
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <StartAnalogInTask+0xe0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d847      	bhi.n	8002196 <StartAnalogInTask+0xc2>
 8002106:	a201      	add	r2, pc, #4	; (adr r2, 800210c <StartAnalogInTask+0x38>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	08002121 	.word	0x08002121
 8002110:	08002197 	.word	0x08002197
 8002114:	0800213f 	.word	0x0800213f
 8002118:	08002197 	.word	0x08002197
 800211c:	0800215d 	.word	0x0800215d
		case MODE_MOTOR_STOP:
			if ((float) analogIn >= 4095.0 * 0.2) {
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	f240 3232 	movw	r2, #818	; 0x332
 8002126:	4293      	cmp	r3, r2
 8002128:	d937      	bls.n	800219a <StartAnalogInTask+0xc6>
				//printf("Motor Started!\r\n");
				mode_motor = MODE_MOTOR_START;
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <StartAnalogInTask+0xe0>)
 800212c:	2203      	movs	r2, #3
 800212e:	701a      	strb	r2, [r3, #0]
				osThreadFlagsSet(positioningTaskHandle, 0x1);
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <StartAnalogInTask+0xe4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	4618      	mov	r0, r3
 8002138:	f007 fcb8 	bl	8009aac <osThreadFlagsSet>
			}
			break;
 800213c:	e02d      	b.n	800219a <StartAnalogInTask+0xc6>
		case MODE_MOTOR_CALIBRATION:
			break;
		case MODE_MOTOR_READY:
			if ((float) analogIn >= 4095.0 * 0.2){
 800213e:	89fb      	ldrh	r3, [r7, #14]
 8002140:	f240 3232 	movw	r2, #818	; 0x332
 8002144:	4293      	cmp	r3, r2
 8002146:	d92a      	bls.n	800219e <StartAnalogInTask+0xca>
				mode_motor = MODE_MOTOR_START;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <StartAnalogInTask+0xe0>)
 800214a:	2203      	movs	r2, #3
 800214c:	701a      	strb	r2, [r3, #0]
				osThreadFlagsSet(positioningTaskHandle, 0x1);
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <StartAnalogInTask+0xe4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2101      	movs	r1, #1
 8002154:	4618      	mov	r0, r3
 8002156:	f007 fca9 	bl	8009aac <osThreadFlagsSet>
			}
			break;
 800215a:	e020      	b.n	800219e <StartAnalogInTask+0xca>
		case MODE_MOTOR_START:
			//startMotor();
			break;
		case MODE_MOTOR_RUN:
			newPWM = map(analogIn, 0, 4095, PWM_MIN, PWM_MAX);
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <StartAnalogInTask+0xe8>)
 8002168:	fb82 1203 	smull	r1, r2, r2, r3
 800216c:	441a      	add	r2, r3
 800216e:	12d2      	asrs	r2, r2, #11
 8002170:	17db      	asrs	r3, r3, #31
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <StartAnalogInTask+0xec>)
 8002178:	801a      	strh	r2, [r3, #0]

			if ((float) analogIn < 4095.0 * 0.2 && setPWM == 0) {
 800217a:	89fb      	ldrh	r3, [r7, #14]
 800217c:	f240 3232 	movw	r2, #818	; 0x332
 8002180:	4293      	cmp	r3, r2
 8002182:	d80e      	bhi.n	80021a2 <StartAnalogInTask+0xce>
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <StartAnalogInTask+0xf0>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b21b      	sxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <StartAnalogInTask+0xce>
				mode_motor = MODE_MOTOR_READY;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <StartAnalogInTask+0xe0>)
 8002190:	2202      	movs	r2, #2
 8002192:	701a      	strb	r2, [r3, #0]
				//integralErrorPWM = 0.0;
			} else {
				//TIM1->CCR1 = setPWM;
				//TIM1->CCR5 = setPWM + compWindowOffset;
			}
			break;
 8002194:	e005      	b.n	80021a2 <StartAnalogInTask+0xce>
		default:
			break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <StartAnalogInTask+0xd0>
			break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <StartAnalogInTask+0xd0>
			break;
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <StartAnalogInTask+0xd0>
			break;
 80021a2:	bf00      	nop
		}
		osDelay(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f007 fd75 	bl	8009c94 <osDelay>
		analogIn = (uint16_t) HAL_ADC_GetValue(&hadc3);
 80021aa:	e79e      	b.n	80020ea <StartAnalogInTask+0x16>
 80021ac:	20001cb8 	.word	0x20001cb8
 80021b0:	2000213c 	.word	0x2000213c
 80021b4:	2000020b 	.word	0x2000020b
 80021b8:	20001dd0 	.word	0x20001dd0
 80021bc:	80080081 	.word	0x80080081
 80021c0:	20000002 	.word	0x20000002
 80021c4:	20000004 	.word	0x20000004

080021c8 <StartControllerTask>:
 * @brief Function implementing the controllerTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartControllerTask */
	float kp = 0.05;
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <StartControllerTask+0x154>)
 80021d2:	617b      	str	r3, [r7, #20]
	float ki = 0.01;
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <StartControllerTask+0x158>)
 80021d6:	613b      	str	r3, [r7, #16]
	float outputPWM = 0.0;
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
	float outputIntegralPWM = 0.0;
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		switch (mode_motor) {
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <StartControllerTask+0x15c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d002      	beq.n	80021f2 <StartControllerTask+0x2a>
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00f      	beq.n	8002210 <StartControllerTask+0x48>
			//setPWM = constrain(setPWM, 0, 3000);
			TIM1->CCR1 = setPWM;
			TIM1->CCR5 = TIM1->CCR1 + compWindowOffset;
			break;
		default:
			break;
 80021f0:	e090      	b.n	8002314 <StartControllerTask+0x14c>
			TIM1->CCR1 = 0;
 80021f2:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <StartControllerTask+0x160>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = 0;
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <StartControllerTask+0x160>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58
			errorPWM = 0.0;
 80021fe:	4b4b      	ldr	r3, [pc, #300]	; (800232c <StartControllerTask+0x164>)
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
			integralErrorPWM = 0.0;
 8002206:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <StartControllerTask+0x168>)
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
			break;
 800220e:	e081      	b.n	8002314 <StartControllerTask+0x14c>
			errorPWM = (float) (setPWM - newPWM);
 8002210:	4b48      	ldr	r3, [pc, #288]	; (8002334 <StartControllerTask+0x16c>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b21b      	sxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <StartControllerTask+0x170>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <StartControllerTask+0x164>)
 800222a:	edc3 7a00 	vstr	s15, [r3]
			integralErrorPWM += errorPWM;
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <StartControllerTask+0x168>)
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <StartControllerTask+0x164>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <StartControllerTask+0x168>)
 8002240:	edc3 7a00 	vstr	s15, [r3]
			outputIntegralPWM = (integralErrorPWM * ki);
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <StartControllerTask+0x168>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ed97 7a04 	vldr	s14, [r7, #16]
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a02 	vstr	s15, [r7, #8]
			outputIntegralPWM = constrain(outputIntegralPWM, -500.0, 500.0);
 8002256:	edd7 7a02 	vldr	s15, [r7, #8]
 800225a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800233c <StartControllerTask+0x174>
 800225e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	d501      	bpl.n	800226c <StartControllerTask+0xa4>
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <StartControllerTask+0x178>)
 800226a:	e00b      	b.n	8002284 <StartControllerTask+0xbc>
 800226c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002270:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002344 <StartControllerTask+0x17c>
 8002274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	dd01      	ble.n	8002282 <StartControllerTask+0xba>
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <StartControllerTask+0x180>)
 8002280:	e000      	b.n	8002284 <StartControllerTask+0xbc>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	60bb      	str	r3, [r7, #8]
			outputPWM = -(errorPWM * kp) + (-outputIntegralPWM);
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <StartControllerTask+0x164>)
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	eeb1 7a67 	vneg.f32	s14, s15
 8002298:	edd7 7a02 	vldr	s15, [r7, #8]
 800229c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a0:	edc7 7a03 	vstr	s15, [r7, #12]
			outputPWM = constrain(outputPWM, -500.0, 500.0);
 80022a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800233c <StartControllerTask+0x174>
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d501      	bpl.n	80022ba <StartControllerTask+0xf2>
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <StartControllerTask+0x178>)
 80022b8:	e00b      	b.n	80022d2 <StartControllerTask+0x10a>
 80022ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80022be:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002344 <StartControllerTask+0x17c>
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	dd01      	ble.n	80022d0 <StartControllerTask+0x108>
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <StartControllerTask+0x180>)
 80022ce:	e000      	b.n	80022d2 <StartControllerTask+0x10a>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	60fb      	str	r3, [r7, #12]
			setPWM += (int16_t) outputPWM;
 80022d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022dc:	ee17 3a90 	vmov	r3, s15
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <StartControllerTask+0x16c>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <StartControllerTask+0x16c>)
 80022f4:	801a      	strh	r2, [r3, #0]
			TIM1->CCR1 = setPWM;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <StartControllerTask+0x16c>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <StartControllerTask+0x160>)
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = TIM1->CCR1 + compWindowOffset;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <StartControllerTask+0x160>)
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <StartControllerTask+0x184>)
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	b212      	sxth	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <StartControllerTask+0x160>)
 800230e:	440b      	add	r3, r1
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8002312:	bf00      	nop
		}

		osDelay(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f007 fcbd 	bl	8009c94 <osDelay>
		switch (mode_motor) {
 800231a:	e763      	b.n	80021e4 <StartControllerTask+0x1c>
 800231c:	3d4ccccd 	.word	0x3d4ccccd
 8002320:	3c23d70a 	.word	0x3c23d70a
 8002324:	2000020b 	.word	0x2000020b
 8002328:	40012c00 	.word	0x40012c00
 800232c:	20000220 	.word	0x20000220
 8002330:	20000224 	.word	0x20000224
 8002334:	20000004 	.word	0x20000004
 8002338:	20000002 	.word	0x20000002
 800233c:	c3fa0000 	.word	0xc3fa0000
 8002340:	c3fa0000 	.word	0xc3fa0000
 8002344:	43fa0000 	.word	0x43fa0000
 8002348:	43fa0000 	.word	0x43fa0000
 800234c:	20000006 	.word	0x20000006

08002350 <StartPositioningTask>:
 * @brief Function implementing the positioningTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPositioningTask */
void StartPositioningTask(void *argument) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPositioningTask */
	uint16_t count = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	81fb      	strh	r3, [r7, #14]

	/* Infinite loop */
	for (;;) {
		if (mode_motor != MODE_MOTOR_START) {
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <StartPositioningTask+0x94>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d00c      	beq.n	800237e <StartPositioningTask+0x2e>
			osThreadFlagsWait(0x1, osFlagsWaitAny, osWaitForever);
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	2100      	movs	r1, #0
 800236a:	2001      	movs	r0, #1
 800236c:	f007 fbfe 	bl	8009b6c <osThreadFlagsWait>
			commutationStepCounter = STEP_0;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <StartPositioningTask+0x98>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
			TIM1->CCR1 = PWM_MAX / 4;
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <StartPositioningTask+0x9c>)
 8002378:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
			//startMotor();
		}
		//waitForCommutation = 1;
		commutationPattern(commutationStepCounter);
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <StartPositioningTask+0x98>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fd37 	bl	8000df8 <commutationPattern>
		commutationStepCounter =
				commutationStepCounter < STEP_5 ? commutationStepCounter++ : 0;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <StartPositioningTask+0x98>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
		commutationStepCounter =
 8002390:	2b04      	cmp	r3, #4
 8002392:	d807      	bhi.n	80023a4 <StartPositioningTask+0x54>
				commutationStepCounter < STEP_5 ? commutationStepCounter++ : 0;
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <StartPositioningTask+0x98>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	b2d1      	uxtb	r1, r2
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <StartPositioningTask+0x98>)
 80023a0:	7011      	strb	r1, [r2, #0]
 80023a2:	e000      	b.n	80023a6 <StartPositioningTask+0x56>
		commutationStepCounter =
 80023a4:	2300      	movs	r3, #0
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <StartPositioningTask+0x98>)
 80023a8:	7013      	strb	r3, [r2, #0]

		count++;
 80023aa:	89fb      	ldrh	r3, [r7, #14]
 80023ac:	3301      	adds	r3, #1
 80023ae:	81fb      	strh	r3, [r7, #14]
		if(count >= 100){
 80023b0:	89fb      	ldrh	r3, [r7, #14]
 80023b2:	2b63      	cmp	r3, #99	; 0x63
 80023b4:	d911      	bls.n	80023da <StartPositioningTask+0x8a>
			mode_motor = MODE_MOTOR_RUN;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <StartPositioningTask+0x94>)
 80023b8:	2204      	movs	r2, #4
 80023ba:	701a      	strb	r2, [r3, #0]
			waitForCommutation = 1;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <StartPositioningTask+0xa0>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
			setPWM = PWM_MAX / 4;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <StartPositioningTask+0xa4>)
 80023c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80023c8:	801a      	strh	r2, [r3, #0]
			TIM1->CCR1 = setPWM;
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <StartPositioningTask+0xa4>)
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <StartPositioningTask+0x9c>)
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
			commutationPattern(NEXT);
 80023d4:	2009      	movs	r0, #9
 80023d6:	f7fe fd0f 	bl	8000df8 <commutationPattern>
		}
		DWT_Delay(100);
 80023da:	2064      	movs	r0, #100	; 0x64
 80023dc:	f7fe fc04 	bl	8000be8 <DWT_Delay>
		if (mode_motor != MODE_MOTOR_START) {
 80023e0:	e7bc      	b.n	800235c <StartPositioningTask+0xc>
 80023e2:	bf00      	nop
 80023e4:	2000020b 	.word	0x2000020b
 80023e8:	20001b48 	.word	0x20001b48
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800240a:	f000 fe39 	bl	8003080 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	/* USER CODE END Callback 1 */
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40001400 	.word	0x40001400

0800241c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x8>
	...

08002428 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <RetargetInit+0x28>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <RetargetInit+0x2c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6898      	ldr	r0, [r3, #8]
 800243c:	2300      	movs	r3, #0
 800243e:	2202      	movs	r2, #2
 8002440:	2100      	movs	r1, #0
 8002442:	f00a ff43 	bl	800d2cc <setvbuf>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20002240 	.word	0x20002240
 8002454:	2000001c 	.word	0x2000001c

08002458 <_isatty>:

int _isatty(int fd) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db04      	blt.n	8002470 <_isatty+0x18>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b02      	cmp	r3, #2
 800246a:	dc01      	bgt.n	8002470 <_isatty+0x18>
    return 1;
 800246c:	2301      	movs	r3, #1
 800246e:	e005      	b.n	800247c <_isatty+0x24>

  errno = EBADF;
 8002470:	f00a fa0c 	bl	800c88c <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	2209      	movs	r2, #9
 8002478:	601a      	str	r2, [r3, #0]
  return 0;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_write>:

int _write(int fd, char* ptr, int len) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <_write+0x18>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d111      	bne.n	80024c0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <_write+0x54>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	f006 fd17 	bl	8008edc <HAL_UART_Transmit>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <_write+0x38>
      return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	e008      	b.n	80024ce <_write+0x4a>
    else
      return EIO;
 80024bc:	2305      	movs	r3, #5
 80024be:	e006      	b.n	80024ce <_write+0x4a>
  }
  errno = EBADF;
 80024c0:	f00a f9e4 	bl	800c88c <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2209      	movs	r2, #9
 80024c8:	601a      	str	r2, [r3, #0]
  return -1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20002240 	.word	0x20002240

080024dc <_close>:

int _close(int fd) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db04      	blt.n	80024f4 <_close+0x18>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	dc01      	bgt.n	80024f4 <_close+0x18>
    return 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e006      	b.n	8002502 <_close+0x26>

  errno = EBADF;
 80024f4:	f00a f9ca 	bl	800c88c <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2209      	movs	r2, #9
 80024fc:	601a      	str	r2, [r3, #0]
  return -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002516:	f00a f9b9 	bl	800c88c <__errno>
 800251a:	4603      	mov	r3, r0
 800251c:	2209      	movs	r2, #9
 800251e:	601a      	str	r2, [r3, #0]
  return -1;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_read>:

int _read(int fd, char* ptr, int len) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d110      	bne.n	8002560 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <_read+0x4c>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	2201      	movs	r2, #1
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	f006 fd5b 	bl	8009004 <HAL_UART_Receive>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <_read+0x30>
      return 1;
 8002558:	2301      	movs	r3, #1
 800255a:	e008      	b.n	800256e <_read+0x42>
    else
      return EIO;
 800255c:	2305      	movs	r3, #5
 800255e:	e006      	b.n	800256e <_read+0x42>
  }
  errno = EBADF;
 8002560:	f00a f994 	bl	800c88c <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	2209      	movs	r2, #9
 8002568:	601a      	str	r2, [r3, #0]
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20002240 	.word	0x20002240

0800257c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db08      	blt.n	800259e <_fstat+0x22>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	dc05      	bgt.n	800259e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002598:	605a      	str	r2, [r3, #4]
    return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e005      	b.n	80025aa <_fstat+0x2e>
  }

  errno = EBADF;
 800259e:	f00a f975 	bl	800c88c <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2209      	movs	r2, #9
 80025a6:	601a      	str	r2, [r3, #0]
  return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_MspInit+0x4c>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_MspInit+0x4c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_MspInit+0x4c>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_MspInit+0x4c>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_MspInit+0x4c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_MspInit+0x4c>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	210f      	movs	r1, #15
 80025ee:	f06f 0001 	mvn.w	r0, #1
 80025f2:	f002 fdef 	bl	80051d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b090      	sub	sp, #64	; 0x40
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d15e      	bne.n	80026e4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002626:	4b97      	ldr	r3, [pc, #604]	; (8002884 <HAL_ADC_MspInit+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a95      	ldr	r2, [pc, #596]	; (8002884 <HAL_ADC_MspInit+0x280>)
 800262e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002630:	4b94      	ldr	r3, [pc, #592]	; (8002884 <HAL_ADC_MspInit+0x280>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10b      	bne.n	8002650 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002638:	4b93      	ldr	r3, [pc, #588]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	4a92      	ldr	r2, [pc, #584]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6153      	str	r3, [r2, #20]
 8002644:	4b90      	ldr	r3, [pc, #576]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	4b8d      	ldr	r3, [pc, #564]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4a8c      	ldr	r2, [pc, #560]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265a:	6153      	str	r3, [r2, #20]
 800265c:	4b8a      	ldr	r3, [pc, #552]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CS_Pin;
 8002668:	2301      	movs	r3, #1
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266c:	2303      	movs	r3, #3
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f003 f8d3 	bl	8005828 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002682:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_ADC_MspInit+0x288>)
 8002684:	4a82      	ldr	r2, [pc, #520]	; (8002890 <HAL_ADC_MspInit+0x28c>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002688:	4b80      	ldr	r3, [pc, #512]	; (800288c <HAL_ADC_MspInit+0x288>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_ADC_MspInit+0x288>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002694:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_ADC_MspInit+0x288>)
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800269a:	4b7c      	ldr	r3, [pc, #496]	; (800288c <HAL_ADC_MspInit+0x288>)
 800269c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026ac:	2220      	movs	r2, #32
 80026ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026b0:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026b6:	4875      	ldr	r0, [pc, #468]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026b8:	f002 ff03 	bl	80054c2 <HAL_DMA_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80026c2:	f7ff feab 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
 80026cc:	4a6f      	ldr	r2, [pc, #444]	; (800288c <HAL_ADC_MspInit+0x288>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2105      	movs	r1, #5
 80026d6:	2012      	movs	r0, #18
 80026d8:	f002 fd7c 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026dc:	2012      	movs	r0, #18
 80026de:	f002 fd95 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80026e2:	e0ca      	b.n	800287a <HAL_ADC_MspInit+0x276>
  else if(hadc->Instance==ADC2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_ADC_MspInit+0x290>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d15e      	bne.n	80027ac <HAL_ADC_MspInit+0x1a8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_ADC_MspInit+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_ADC_MspInit+0x280>)
 80026f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_ADC_MspInit+0x280>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4a60      	ldr	r2, [pc, #384]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270a:	6153      	str	r3, [r2, #20]
 800270c:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	6153      	str	r3, [r2, #20]
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC_PHASEA_Pin|ADC_PHASEB_Pin|ADC_PHASEC_Pin;
 8002730:	23e0      	movs	r3, #224	; 0xe0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002734:	2303      	movs	r3, #3
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002740:	4619      	mov	r1, r3
 8002742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002746:	f003 f86f 	bl	8005828 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_ADC_MspInit+0x294>)
 800274c:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_ADC_MspInit+0x298>)
 800274e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002750:	4b51      	ldr	r3, [pc, #324]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800275c:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_ADC_MspInit+0x294>)
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002768:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_ADC_MspInit+0x294>)
 800276c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002770:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002774:	2220      	movs	r2, #32
 8002776:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_ADC_MspInit+0x294>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800277e:	4846      	ldr	r0, [pc, #280]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002780:	f002 fe9f 	bl	80054c2 <HAL_DMA_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 800278a:	f7ff fe47 	bl	800241c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a41      	ldr	r2, [pc, #260]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
 8002794:	4a40      	ldr	r2, [pc, #256]	; (8002898 <HAL_ADC_MspInit+0x294>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2105      	movs	r1, #5
 800279e:	2012      	movs	r0, #18
 80027a0:	f002 fd18 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027a4:	2012      	movs	r0, #18
 80027a6:	f002 fd31 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 80027aa:	e066      	b.n	800287a <HAL_ADC_MspInit+0x276>
  else if(hadc->Instance==ADC3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <HAL_ADC_MspInit+0x29c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12e      	bne.n	8002814 <HAL_ADC_MspInit+0x210>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a39      	ldr	r2, [pc, #228]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 80027be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10b      	bne.n	80027e0 <HAL_ADC_MspInit+0x1dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027d2:	6153      	str	r3, [r2, #20]
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ea:	6153      	str	r3, [r2, #20]
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_ADC_MspInit+0x284>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ANALOGIN_Pin;
 80027f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fe:	2303      	movs	r3, #3
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ANALOGIN_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800280a:	4619      	mov	r1, r3
 800280c:	4826      	ldr	r0, [pc, #152]	; (80028a8 <HAL_ADC_MspInit+0x2a4>)
 800280e:	f003 f80b 	bl	8005828 <HAL_GPIO_Init>
}
 8002812:	e032      	b.n	800287a <HAL_ADC_MspInit+0x276>
  else if(hadc->Instance==ADC4)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_ADC_MspInit+0x2a8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12d      	bne.n	800287a <HAL_ADC_MspInit+0x276>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 8002826:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_ADC_MspInit+0x2a0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10b      	bne.n	8002848 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800283a:	6153      	str	r3, [r2, #20]
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_ADC_MspInit+0x284>)
 800284e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002852:	6153      	str	r3, [r2, #20]
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_ADC_MspInit+0x284>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 800286e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <HAL_ADC_MspInit+0x2a4>)
 8002876:	f002 ffd7 	bl	8005828 <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	3740      	adds	r7, #64	; 0x40
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000022c 	.word	0x2000022c
 8002888:	40021000 	.word	0x40021000
 800288c:	20001eb0 	.word	0x20001eb0
 8002890:	40020008 	.word	0x40020008
 8002894:	50000100 	.word	0x50000100
 8002898:	2000218c 	.word	0x2000218c
 800289c:	40020408 	.word	0x40020408
 80028a0:	50000400 	.word	0x50000400
 80028a4:	20000230 	.word	0x20000230
 80028a8:	48000400 	.word	0x48000400
 80028ac:	50000500 	.word	0x50000500

080028b0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <HAL_COMP_MspInit+0x108>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d121      	bne.n	8002916 <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a39      	ldr	r2, [pc, #228]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	6153      	str	r3, [r2, #20]
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_PHASEA_Pin;
 80028ea:	2302      	movs	r3, #2
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ee:	2303      	movs	r3, #3
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEA_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002900:	f002 ff92 	bl	8005828 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2105      	movs	r1, #5
 8002908:	2040      	movs	r0, #64	; 0x40
 800290a:	f002 fc63 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800290e:	2040      	movs	r0, #64	; 0x40
 8002910:	f002 fc7c 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP3_MspInit 1 */

  /* USER CODE END COMP3_MspInit 1 */
  }

}
 8002914:	e04c      	b.n	80029b0 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <HAL_COMP_MspInit+0x110>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d121      	bne.n	8002964 <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 8002926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292a:	6153      	str	r3, [r2, #20]
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_PHASEB_Pin;
 8002938:	2308      	movs	r3, #8
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800293c:	2303      	movs	r3, #3
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEB_GPIO_Port, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294e:	f002 ff6b 	bl	8005828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	2040      	movs	r0, #64	; 0x40
 8002958:	f002 fc3c 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800295c:	2040      	movs	r0, #64	; 0x40
 800295e:	f002 fc55 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 8002962:	e025      	b.n	80029b0 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_COMP_MspInit+0x114>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d120      	bne.n	80029b0 <HAL_COMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6153      	str	r3, [r2, #20]
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_COMP_MspInit+0x10c>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COMP_PHASEC_Pin;
 8002986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298c:	2303      	movs	r3, #3
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEC_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	480b      	ldr	r0, [pc, #44]	; (80029c8 <HAL_COMP_MspInit+0x118>)
 800299c:	f002 ff44 	bl	8005828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2105      	movs	r1, #5
 80029a4:	2040      	movs	r0, #64	; 0x40
 80029a6:	f002 fc15 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80029aa:	2040      	movs	r0, #64	; 0x40
 80029ac:	f002 fc2e 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	4001001c 	.word	0x4001001c
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010020 	.word	0x40010020
 80029c4:	40010024 	.word	0x40010024
 80029c8:	48000400 	.word	0x48000400

080029cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_DAC_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12c      	bne.n	8002a48 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 80029f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	6153      	str	r3, [r2, #20]
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_DAC_MspInit+0x88>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a22:	2303      	movs	r3, #3
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a34:	f002 fef8 	bl	8005828 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2105      	movs	r1, #5
 8002a3c:	2036      	movs	r0, #54	; 0x36
 8002a3e:	f002 fbc9 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a42:	2036      	movs	r0, #54	; 0x36
 8002a44:	f002 fbe2 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40007400 	.word	0x40007400
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_TIM_PWM_MspInit+0x64>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d123      	bne.n	8002ab2 <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_TIM_PWM_MspInit+0x68>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_TIM_PWM_MspInit+0x68>)
 8002a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a74:	6193      	str	r3, [r2, #24]
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_TIM_PWM_MspInit+0x68>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2105      	movs	r1, #5
 8002a86:	2018      	movs	r0, #24
 8002a88:	f002 fba4 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a8c:	2018      	movs	r0, #24
 8002a8e:	f002 fbbd 	bl	800520c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2105      	movs	r1, #5
 8002a96:	2019      	movs	r0, #25
 8002a98:	f002 fb9c 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a9c:	2019      	movs	r0, #25
 8002a9e:	f002 fbb5 	bl	800520c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	201b      	movs	r0, #27
 8002aa8:	f002 fb94 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002aac:	201b      	movs	r0, #27
 8002aae:	f002 fbad 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	61d3      	str	r3, [r2, #28]
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002afe:	e069      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM6)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_TIM_Base_MspInit+0x11c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d114      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a33      	ldr	r2, [pc, #204]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b10:	f043 0310 	orr.w	r3, r3, #16
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	2036      	movs	r0, #54	; 0x36
 8002b28:	f002 fb54 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f002 fb6d 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 8002b32:	e04f      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM15)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_TIM_Base_MspInit+0x120>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d131      	bne.n	8002ba2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6193      	str	r3, [r2, #24]
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6153      	str	r3, [r2, #20]
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMIN_Pin;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b76:	2302      	movs	r3, #2
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002b7e:	2309      	movs	r3, #9
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWMIN_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f002 fe4c 	bl	8005828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2105      	movs	r1, #5
 8002b94:	2018      	movs	r0, #24
 8002b96:	f002 fb1d 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b9a:	2018      	movs	r0, #24
 8002b9c:	f002 fb36 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 8002ba0:	e018      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM16)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIM_Base_MspInit+0x124>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d113      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_TIM_Base_MspInit+0x118>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2105      	movs	r1, #5
 8002bc8:	2019      	movs	r0, #25
 8002bca:	f002 fb03 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bce:	2019      	movs	r0, #25
 8002bd0:	f002 fb1c 	bl	800520c <HAL_NVIC_EnableIRQ>
}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40001000 	.word	0x40001000
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400

08002bec <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_TIM_OC_MspInit+0x44>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_TIM_OC_MspInit+0x48>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_TIM_OC_MspInit+0x48>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_TIM_OC_MspInit+0x48>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2105      	movs	r1, #5
 8002c1a:	201d      	movs	r0, #29
 8002c1c:	f002 fada 	bl	80051d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c20:	201d      	movs	r0, #29
 8002c22:	f002 faf3 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIM_MspPostInit+0x68>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d11d      	bne.n	8002c96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c64:	6153      	str	r3, [r2, #20]
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 8002c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002c84:	2306      	movs	r3, #6
 8002c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c92:	f002 fdc9 	bl	8005828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <HAL_UART_MspInit+0xcc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d14f      	bne.n	8002d6a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd4:	6193      	str	r3, [r2, #24]
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	6153      	str	r3, [r2, #20]
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0xd0>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f002 fd85 	bl	8005828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_UART_MspInit+0xd8>)
 8002d22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d44:	2220      	movs	r2, #32
 8002d46:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d4e:	480b      	ldr	r0, [pc, #44]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d50:	f002 fbb7 	bl	80054c2 <HAL_DMA_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002d5a:	f7ff fb5f 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d62:	671a      	str	r2, [r3, #112]	; 0x70
 8002d64:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_UART_MspInit+0xd4>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	20001d08 	.word	0x20001d08
 8002d80:	40020058 	.word	0x40020058

08002d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	2037      	movs	r0, #55	; 0x37
 8002d9a:	f002 fa1b 	bl	80051d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d9e:	2037      	movs	r0, #55	; 0x37
 8002da0:	f002 fa34 	bl	800520c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_InitTick+0xa0>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_InitTick+0xa0>)
 8002daa:	f043 0320 	orr.w	r3, r3, #32
 8002dae:	61d3      	str	r3, [r2, #28]
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <HAL_InitTick+0xa0>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dbc:	f107 0210 	add.w	r2, r7, #16
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fffe 	bl	8006dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dcc:	f003 ffb8 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_InitTick+0xa4>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0c9b      	lsrs	r3, r3, #18
 8002de0:	3b01      	subs	r3, #1
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_InitTick+0xa8>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_InitTick+0xac>)
 8002de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_InitTick+0xa8>)
 8002dec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_InitTick+0xa8>)
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_InitTick+0xa8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_InitTick+0xa8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002e04:	4809      	ldr	r0, [pc, #36]	; (8002e2c <HAL_InitTick+0xa8>)
 8002e06:	f004 f9c1 	bl	800718c <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002e10:	4806      	ldr	r0, [pc, #24]	; (8002e2c <HAL_InitTick+0xa8>)
 8002e12:	f004 fa75 	bl	8007300 <HAL_TIM_Base_Start_IT>
 8002e16:	4603      	mov	r3, r0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3730      	adds	r7, #48	; 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	20002244 	.word	0x20002244
 8002e30:	40001400 	.word	0x40001400

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler+0x4>

08002e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <HardFault_Handler+0x4>

08002e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler+0x4>

08002e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler+0x4>

08002e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <UsageFault_Handler+0x4>

08002e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <DMA1_Channel1_IRQHandler+0x10>)
 8002e66:	f002 fbd2 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20001eb0 	.word	0x20001eb0

08002e74 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <DMA1_Channel5_IRQHandler+0x10>)
 8002e7a:	f002 fbc8 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20001d08 	.word	0x20001d08

08002e88 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e8c:	4803      	ldr	r0, [pc, #12]	; (8002e9c <ADC1_2_IRQHandler+0x14>)
 8002e8e:	f000 fd55 	bl	800393c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <ADC1_2_IRQHandler+0x18>)
 8002e94:	f000 fd52 	bl	800393c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20001c68 	.word	0x20001c68
 8002ea0:	20001b4c 	.word	0x20001b4c

08002ea4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002eaa:	f004 fd38 	bl	800791e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002eae:	4803      	ldr	r0, [pc, #12]	; (8002ebc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002eb0:	f004 fd35 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20001f48 	.word	0x20001f48
 8002ebc:	20001b9c 	.word	0x20001b9c

08002ec0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002ec6:	f004 fd2a 	bl	800791e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002ecc:	f004 fd27 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20001f48 	.word	0x20001f48
 8002ed8:	200021d0 	.word	0x200021d0

08002edc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM1_CC_IRQHandler+0x10>)
 8002ee2:	f004 fd1c 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20001f48 	.word	0x20001f48

08002ef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <TIM3_IRQHandler+0x10>)
 8002ef6:	f004 fd12 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20001c1c 	.word	0x20001c1c

08002f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <TIM6_DAC_IRQHandler+0x14>)
 8002f0a:	f004 fd08 	bl	800791e <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8002f0e:	4803      	ldr	r0, [pc, #12]	; (8002f1c <TIM6_DAC_IRQHandler+0x18>)
 8002f10:	f002 fa26 	bl	8005360 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20001ef8 	.word	0x20001ef8
 8002f1c:	20001dd4 	.word	0x20001dd4

08002f20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <TIM7_IRQHandler+0x10>)
 8002f26:	f004 fcfa 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20002244 	.word	0x20002244

08002f34 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA2_Channel1_IRQHandler+0x10>)
 8002f3a:	f002 fb68 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000218c 	.word	0x2000218c

08002f48 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <COMP1_2_3_IRQHandler+0x1c>)
 8002f4e:	f002 f819 	bl	8004f84 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <COMP1_2_3_IRQHandler+0x20>)
 8002f54:	f002 f816 	bl	8004f84 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <COMP1_2_3_IRQHandler+0x24>)
 8002f5a:	f002 f813 	bl	8004f84 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20001be8 	.word	0x20001be8
 8002f68:	20001f94 	.word	0x20001f94
 8002f6c:	20001fc4 	.word	0x20001fc4

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f009 fc74 	bl	800c88c <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	2000a000 	.word	0x2000a000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	20000234 	.word	0x20000234
 8002fd8:	200022e8 	.word	0x200022e8

08002fdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <SystemInit+0x20>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SystemInit+0x20>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003038 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <LoopForever+0x6>)
  ldr r1, =_edata
 8003006:	490e      	ldr	r1, [pc, #56]	; (8003040 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003008:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <LoopForever+0xe>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <LoopForever+0x12>)
  ldr r4, =_ebss
 800301c:	4c0b      	ldr	r4, [pc, #44]	; (800304c <LoopForever+0x16>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800302a:	f7ff ffd7 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302e:	f009 fc33 	bl	800c898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003032:	f7fd ffef 	bl	8001014 <main>

08003036 <LoopForever>:

LoopForever:
    b LoopForever
 8003036:	e7fe      	b.n	8003036 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003038:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800303c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003040:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003044:	0800fa6c 	.word	0x0800fa6c
  ldr r2, =_sbss
 8003048:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800304c:	200022e4 	.word	0x200022e4

08003050 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003050:	e7fe      	b.n	8003050 <ADC3_IRQHandler>
	...

08003054 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_Init+0x28>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a07      	ldr	r2, [pc, #28]	; (800307c <HAL_Init+0x28>)
 800305e:	f043 0310 	orr.w	r3, r3, #16
 8003062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003064:	2003      	movs	r0, #3
 8003066:	f002 f8aa 	bl	80051be <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306a:	200f      	movs	r0, #15
 800306c:	f7ff fe8a 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003070:	f7ff faa0 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40022000 	.word	0x40022000

08003080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000014 	.word	0x20000014
 80030a4:	20002290 	.word	0x20002290

080030a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20002290 	.word	0x20002290

080030c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b09a      	sub	sp, #104	; 0x68
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e1c9      	b.n	80034b0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d176      	bne.n	800321c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d152      	bne.n	80031dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fa57 	bl	8002604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d13b      	bne.n	80031dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f001 fbc5 	bl	80048f4 <ADC_Disable>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12f      	bne.n	80031dc <HAL_ADC_Init+0xe0>
 800317c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003180:	2b00      	cmp	r3, #0
 8003182:	d12b      	bne.n	80031dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031b8:	4b86      	ldr	r3, [pc, #536]	; (80033d4 <HAL_ADC_Init+0x2d8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a86      	ldr	r2, [pc, #536]	; (80033d8 <HAL_ADC_Init+0x2dc>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9a      	lsrs	r2, r3, #18
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ce:	e002      	b.n	80031d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f9      	bne.n	80031d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f8:	d110      	bne.n	800321c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f023 0312 	bic.w	r3, r3, #18
 8003202:	f043 0210 	orr.w	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8136 	bne.w	8003496 <HAL_ADC_Init+0x39a>
 800322a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 8131 	bne.w	8003496 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8129 	bne.w	8003496 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800324c:	f043 0202 	orr.w	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d004      	beq.n	8003268 <HAL_ADC_Init+0x16c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_ADC_Init+0x2e0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_ADC_Init+0x170>
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_ADC_Init+0x2e4>)
 800326a:	e000      	b.n	800326e <HAL_ADC_Init+0x172>
 800326c:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_ADC_Init+0x2e8>)
 800326e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003278:	d102      	bne.n	8003280 <HAL_ADC_Init+0x184>
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_ADC_Init+0x2e0>)
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e01a      	b.n	80032b6 <HAL_ADC_Init+0x1ba>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a55      	ldr	r2, [pc, #340]	; (80033dc <HAL_ADC_Init+0x2e0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d103      	bne.n	8003292 <HAL_ADC_Init+0x196>
 800328a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e011      	b.n	80032b6 <HAL_ADC_Init+0x1ba>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a54      	ldr	r2, [pc, #336]	; (80033e8 <HAL_ADC_Init+0x2ec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d102      	bne.n	80032a2 <HAL_ADC_Init+0x1a6>
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_ADC_Init+0x2f0>)
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e009      	b.n	80032b6 <HAL_ADC_Init+0x1ba>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_ADC_Init+0x2f0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <HAL_ADC_Init+0x1b6>
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_ADC_Init+0x2ec>)
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e001      	b.n	80032b6 <HAL_ADC_Init+0x1ba>
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d108      	bne.n	80032d6 <HAL_ADC_Init+0x1da>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Init+0x1da>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_Init+0x1dc>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11c      	bne.n	8003316 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_ADC_Init+0x202>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Init+0x202>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_ADC_Init+0x204>
 80032fe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003300:	2b00      	cmp	r3, #0
 8003302:	d108      	bne.n	8003316 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	431a      	orrs	r2, r3
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7e5b      	ldrb	r3, [r3, #25]
 800331a:	035b      	lsls	r3, r3, #13
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003320:	2a01      	cmp	r2, #1
 8003322:	d002      	beq.n	800332a <HAL_ADC_Init+0x22e>
 8003324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003328:	e000      	b.n	800332c <HAL_ADC_Init+0x230>
 800332a:	2200      	movs	r2, #0
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800333c:	4313      	orrs	r3, r2
 800333e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d11b      	bne.n	8003382 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7e5b      	ldrb	r3, [r3, #25]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	3b01      	subs	r3, #1
 8003358:	045a      	lsls	r2, r3, #17
 800335a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335c:	4313      	orrs	r3, r2
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	663b      	str	r3, [r7, #96]	; 0x60
 8003364:	e00d      	b.n	8003382 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	2b01      	cmp	r3, #1
 8003388:	d03a      	beq.n	8003400 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <HAL_ADC_Init+0x2ec>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_ADC_Init+0x2a2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_ADC_Init+0x2f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d128      	bne.n	80033f0 <HAL_ADC_Init+0x2f4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80033a6:	d012      	beq.n	80033ce <HAL_ADC_Init+0x2d2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d00a      	beq.n	80033c8 <HAL_ADC_Init+0x2cc>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80033ba:	d002      	beq.n	80033c2 <HAL_ADC_Init+0x2c6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	e018      	b.n	80033f4 <HAL_ADC_Init+0x2f8>
 80033c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c6:	e015      	b.n	80033f4 <HAL_ADC_Init+0x2f8>
 80033c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80033cc:	e012      	b.n	80033f4 <HAL_ADC_Init+0x2f8>
 80033ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80033d2:	e00f      	b.n	80033f4 <HAL_ADC_Init+0x2f8>
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	431bde83 	.word	0x431bde83
 80033dc:	50000100 	.word	0x50000100
 80033e0:	50000300 	.word	0x50000300
 80033e4:	50000700 	.word	0x50000700
 80033e8:	50000400 	.word	0x50000400
 80033ec:	50000500 	.word	0x50000500
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033f8:	4313      	orrs	r3, r2
 80033fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033fc:	4313      	orrs	r3, r2
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d114      	bne.n	8003438 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341c:	f023 0302 	bic.w	r3, r3, #2
 8003420:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7e1b      	ldrb	r3, [r3, #24]
 8003426:	039a      	lsls	r2, r3, #14
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4313      	orrs	r3, r2
 8003432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003434:	4313      	orrs	r3, r2
 8003436:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_ADC_Init+0x3bc>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003448:	430b      	orrs	r3, r1
 800344a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10c      	bne.n	800346e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f023 010f 	bic.w	r1, r3, #15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
 800346c:	e007      	b.n	800347e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 020f 	bic.w	r2, r2, #15
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f023 0303 	bic.w	r3, r3, #3
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
 8003494:	e00a      	b.n	80034ac <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f023 0312 	bic.w	r3, r3, #18
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80034ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3768      	adds	r7, #104	; 0x68
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fff0c007 	.word	0xfff0c007

080034bc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 80f9 	bne.w	80036ca <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_ADC_Start+0x2a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0f4      	b.n	80036d0 <HAL_ADC_Start+0x214>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f001 f99c 	bl	800482c <ADC_Enable>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80e0 	bne.w	80036c0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351c:	d004      	beq.n	8003528 <HAL_ADC_Start+0x6c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6d      	ldr	r2, [pc, #436]	; (80036d8 <HAL_ADC_Start+0x21c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d106      	bne.n	8003536 <HAL_ADC_Start+0x7a>
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_ADC_Start+0x220>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_ADC_Start+0x9a>
 8003534:	e005      	b.n	8003542 <HAL_ADC_Start+0x86>
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_ADC_Start+0x224>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_ADC_Start+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354a:	d004      	beq.n	8003556 <HAL_ADC_Start+0x9a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a64      	ldr	r2, [pc, #400]	; (80036e4 <HAL_ADC_Start+0x228>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d115      	bne.n	8003582 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d036      	beq.n	80035de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003580:	e02d      	b.n	80035de <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_Start+0xe6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4e      	ldr	r2, [pc, #312]	; (80036d8 <HAL_ADC_Start+0x21c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10a      	bne.n	80035b8 <HAL_ADC_Start+0xfc>
 80035a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e008      	b.n	80035ca <HAL_ADC_Start+0x10e>
 80035b8:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_ADC_Start+0x228>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d106      	bne.n	80035fa <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f023 0206 	bic.w	r2, r3, #6
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
 80035f8:	e002      	b.n	8003600 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	221c      	movs	r2, #28
 800360e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003618:	d004      	beq.n	8003624 <HAL_ADC_Start+0x168>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_ADC_Start+0x21c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d106      	bne.n	8003632 <HAL_ADC_Start+0x176>
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_ADC_Start+0x220>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03e      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 8003630:	e005      	b.n	800363e <HAL_ADC_Start+0x182>
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_ADC_Start+0x224>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2b00      	cmp	r3, #0
 800363c:	d037      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003646:	d004      	beq.n	8003652 <HAL_ADC_Start+0x196>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <HAL_ADC_Start+0x21c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d106      	bne.n	8003660 <HAL_ADC_Start+0x1a4>
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_ADC_Start+0x220>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b05      	cmp	r3, #5
 800365c:	d027      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 800365e:	e005      	b.n	800366c <HAL_ADC_Start+0x1b0>
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_ADC_Start+0x224>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2b05      	cmp	r3, #5
 800366a:	d020      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003674:	d004      	beq.n	8003680 <HAL_ADC_Start+0x1c4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_ADC_Start+0x21c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d106      	bne.n	800368e <HAL_ADC_Start+0x1d2>
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <HAL_ADC_Start+0x220>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b09      	cmp	r3, #9
 800368a:	d010      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 800368c:	e005      	b.n	800369a <HAL_ADC_Start+0x1de>
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_ADC_Start+0x224>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2b09      	cmp	r3, #9
 8003698:	d009      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_Start+0x1f2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0e      	ldr	r2, [pc, #56]	; (80036e4 <HAL_ADC_Start+0x228>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10f      	bne.n	80036ce <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	e006      	b.n	80036ce <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036c8:	e001      	b.n	80036ce <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	50000100 	.word	0x50000100
 80036dc:	50000300 	.word	0x50000300
 80036e0:	50000700 	.word	0x50000700
 80036e4:	50000400 	.word	0x50000400

080036e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 80f7 	bne.w	80038f6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_ADC_Start_DMA+0x2e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0f2      	b.n	80038fc <HAL_ADC_Start_DMA+0x214>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003726:	d004      	beq.n	8003732 <HAL_ADC_Start_DMA+0x4a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_ADC_Start_DMA+0x21c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d109      	bne.n	8003746 <HAL_ADC_Start_DMA+0x5e>
 8003732:	4b75      	ldr	r3, [pc, #468]	; (8003908 <HAL_ADC_Start_DMA+0x220>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e008      	b.n	8003758 <HAL_ADC_Start_DMA+0x70>
 8003746:	4b71      	ldr	r3, [pc, #452]	; (800390c <HAL_ADC_Start_DMA+0x224>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80c5 	beq.w	80038e8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f001 f864 	bl	800482c <ADC_Enable>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 80b7 	bne.w	80038de <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378c:	d004      	beq.n	8003798 <HAL_ADC_Start_DMA+0xb0>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5c      	ldr	r2, [pc, #368]	; (8003904 <HAL_ADC_Start_DMA+0x21c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d106      	bne.n	80037a6 <HAL_ADC_Start_DMA+0xbe>
 8003798:	4b5b      	ldr	r3, [pc, #364]	; (8003908 <HAL_ADC_Start_DMA+0x220>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_ADC_Start_DMA+0xde>
 80037a4:	e005      	b.n	80037b2 <HAL_ADC_Start_DMA+0xca>
 80037a6:	4b59      	ldr	r3, [pc, #356]	; (800390c <HAL_ADC_Start_DMA+0x224>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_ADC_Start_DMA+0xde>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_Start_DMA+0xde>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a53      	ldr	r2, [pc, #332]	; (8003910 <HAL_ADC_Start_DMA+0x228>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d115      	bne.n	80037f2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d036      	beq.n	800384e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037f0:	e02d      	b.n	800384e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003806:	d004      	beq.n	8003812 <HAL_ADC_Start_DMA+0x12a>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <HAL_ADC_Start_DMA+0x21c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10a      	bne.n	8003828 <HAL_ADC_Start_DMA+0x140>
 8003812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e008      	b.n	800383a <HAL_ADC_Start_DMA+0x152>
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <HAL_ADC_Start_DMA+0x228>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d106      	bne.n	800386a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f023 0206 	bic.w	r2, r3, #6
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	645a      	str	r2, [r3, #68]	; 0x44
 8003868:	e002      	b.n	8003870 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_ADC_Start_DMA+0x22c>)
 800387e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_ADC_Start_DMA+0x230>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_ADC_Start_DMA+0x234>)
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	221c      	movs	r2, #28
 8003896:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0210 	orr.w	r2, r2, #16
 80038a6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3340      	adds	r3, #64	; 0x40
 80038c2:	4619      	mov	r1, r3
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f001 fe42 	bl	8005550 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0204 	orr.w	r2, r2, #4
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	e00d      	b.n	80038fa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038e6:	e008      	b.n	80038fa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038f4:	e001      	b.n	80038fa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
 80038f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	50000100 	.word	0x50000100
 8003908:	50000300 	.word	0x50000300
 800390c:	50000700 	.word	0x50000700
 8003910:	50000400 	.word	0x50000400
 8003914:	08004761 	.word	0x08004761
 8003918:	080047db 	.word	0x080047db
 800391c:	080047f7 	.word	0x080047f7

08003920 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d106      	bne.n	800396c <HAL_ADC_IRQHandler+0x30>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00f      	beq.n	800398c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003976:	2b08      	cmp	r3, #8
 8003978:	f040 80c0 	bne.w	8003afc <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	f040 80b8 	bne.w	8003afc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_IRQHandler+0x7c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a95      	ldr	r2, [pc, #596]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d106      	bne.n	80039c6 <HAL_ADC_IRQHandler+0x8a>
 80039b8:	4b94      	ldr	r3, [pc, #592]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03e      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 80039c4:	e005      	b.n	80039d2 <HAL_ADC_IRQHandler+0x96>
 80039c6:	4b92      	ldr	r3, [pc, #584]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d037      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_IRQHandler+0xaa>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a89      	ldr	r2, [pc, #548]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_IRQHandler+0xb8>
 80039e6:	4b89      	ldr	r3, [pc, #548]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d027      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 80039f2:	e005      	b.n	8003a00 <HAL_ADC_IRQHandler+0xc4>
 80039f4:	4b86      	ldr	r3, [pc, #536]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d020      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a08:	d004      	beq.n	8003a14 <HAL_ADC_IRQHandler+0xd8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d106      	bne.n	8003a22 <HAL_ADC_IRQHandler+0xe6>
 8003a14:	4b7d      	ldr	r3, [pc, #500]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d010      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 8003a20:	e005      	b.n	8003a2e <HAL_ADC_IRQHandler+0xf2>
 8003a22:	4b7b      	ldr	r3, [pc, #492]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2b09      	cmp	r3, #9
 8003a2c:	d009      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a36:	d004      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x106>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_ADC_IRQHandler+0x2d8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d104      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e00f      	b.n	8003a6c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a54:	d004      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x124>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6b      	ldr	r2, [pc, #428]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d102      	bne.n	8003a66 <HAL_ADC_IRQHandler+0x12a>
 8003a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a64:	e000      	b.n	8003a68 <HAL_ADC_IRQHandler+0x12c>
 8003a66:	4b6b      	ldr	r3, [pc, #428]	; (8003c14 <HAL_ADC_IRQHandler+0x2d8>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d139      	bne.n	8003aee <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d134      	bne.n	8003aee <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d12d      	bne.n	8003aee <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11a      	bne.n	8003ad6 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020c 	bic.w	r2, r2, #12
 8003aae:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d112      	bne.n	8003aee <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad4:	e00b      	b.n	8003aee <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f956 	bl	8001da0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	220c      	movs	r2, #12
 8003afa:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d106      	bne.n	8003b18 <HAL_ADC_IRQHandler+0x1dc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d00f      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	f040 813c 	bne.w	8003da0 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	f040 8134 	bne.w	8003da0 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4c:	d004      	beq.n	8003b58 <HAL_ADC_IRQHandler+0x21c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d106      	bne.n	8003b66 <HAL_ADC_IRQHandler+0x22a>
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03e      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003b64:	e005      	b.n	8003b72 <HAL_ADC_IRQHandler+0x236>
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d037      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b7a:	d004      	beq.n	8003b86 <HAL_ADC_IRQHandler+0x24a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a21      	ldr	r2, [pc, #132]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d106      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x258>
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d027      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003b92:	e005      	b.n	8003ba0 <HAL_ADC_IRQHandler+0x264>
 8003b94:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d020      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba8:	d004      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x278>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d106      	bne.n	8003bc2 <HAL_ADC_IRQHandler+0x286>
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_ADC_IRQHandler+0x2d0>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d010      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003bc0:	e005      	b.n	8003bce <HAL_ADC_IRQHandler+0x292>
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_ADC_IRQHandler+0x2d4>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d009      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd6:	d004      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x2a6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <HAL_ADC_IRQHandler+0x2d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d104      	bne.n	8003bec <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e018      	b.n	8003c1e <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x2c4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <HAL_ADC_IRQHandler+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10b      	bne.n	8003c18 <HAL_ADC_IRQHandler+0x2dc>
 8003c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c04:	e009      	b.n	8003c1a <HAL_ADC_IRQHandler+0x2de>
 8003c06:	bf00      	nop
 8003c08:	50000100 	.word	0x50000100
 8003c0c:	50000300 	.word	0x50000300
 8003c10:	50000700 	.word	0x50000700
 8003c14:	50000400 	.word	0x50000400
 8003c18:	4b9d      	ldr	r3, [pc, #628]	; (8003e90 <HAL_ADC_IRQHandler+0x554>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80b2 	bne.w	8003d92 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 80a5 	bne.w	8003d92 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 809f 	bne.w	8003d92 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	f040 8097 	bne.w	8003d92 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6c:	d004      	beq.n	8003c78 <HAL_ADC_IRQHandler+0x33c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a88      	ldr	r2, [pc, #544]	; (8003e94 <HAL_ADC_IRQHandler+0x558>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d106      	bne.n	8003c86 <HAL_ADC_IRQHandler+0x34a>
 8003c78:	4b87      	ldr	r3, [pc, #540]	; (8003e98 <HAL_ADC_IRQHandler+0x55c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d03e      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003c84:	e005      	b.n	8003c92 <HAL_ADC_IRQHandler+0x356>
 8003c86:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <HAL_ADC_IRQHandler+0x560>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d037      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d004      	beq.n	8003ca6 <HAL_ADC_IRQHandler+0x36a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	; (8003e94 <HAL_ADC_IRQHandler+0x558>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d106      	bne.n	8003cb4 <HAL_ADC_IRQHandler+0x378>
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_ADC_IRQHandler+0x55c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d027      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003cb2:	e005      	b.n	8003cc0 <HAL_ADC_IRQHandler+0x384>
 8003cb4:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <HAL_ADC_IRQHandler+0x560>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d020      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc8:	d004      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x398>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a71      	ldr	r2, [pc, #452]	; (8003e94 <HAL_ADC_IRQHandler+0x558>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0x3a6>
 8003cd4:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <HAL_ADC_IRQHandler+0x55c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d010      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003ce0:	e005      	b.n	8003cee <HAL_ADC_IRQHandler+0x3b2>
 8003ce2:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <HAL_ADC_IRQHandler+0x560>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	d009      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf6:	d004      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x3c6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <HAL_ADC_IRQHandler+0x554>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d104      	bne.n	8003d0c <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e00f      	b.n	8003d2c <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d14:	d004      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x3e4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5e      	ldr	r2, [pc, #376]	; (8003e94 <HAL_ADC_IRQHandler+0x558>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADC_IRQHandler+0x3ea>
 8003d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d24:	e000      	b.n	8003d28 <HAL_ADC_IRQHandler+0x3ec>
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_ADC_IRQHandler+0x554>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d12d      	bne.n	8003d92 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d11a      	bne.n	8003d7a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d52:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d112      	bne.n	8003d92 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
 8003d78:	e00b      	b.n	8003d92 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f8de 	bl	8003f54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2260      	movs	r2, #96	; 0x60
 8003d9e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d113      	bne.n	8003dd6 <HAL_ADC_IRQHandler+0x49a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d10c      	bne.n	8003dd6 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff f983 	bl	80030d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d115      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x4d6>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df4:	d10d      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8ba 	bl	8003f7c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e10:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d115      	bne.n	8003e4e <HAL_ADC_IRQHandler+0x512>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d10d      	bne.n	8003e4e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8a6 	bl	8003f90 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d151      	bne.n	8003f00 <HAL_ADC_IRQHandler+0x5c4>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d14a      	bne.n	8003f00 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003e72:	2301      	movs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e02d      	b.n	8003ed4 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e80:	d004      	beq.n	8003e8c <HAL_ADC_IRQHandler+0x550>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a03      	ldr	r2, [pc, #12]	; (8003e94 <HAL_ADC_IRQHandler+0x558>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d109      	bne.n	8003ea0 <HAL_ADC_IRQHandler+0x564>
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <HAL_ADC_IRQHandler+0x55c>)
 8003e8e:	e008      	b.n	8003ea2 <HAL_ADC_IRQHandler+0x566>
 8003e90:	50000400 	.word	0x50000400
 8003e94:	50000100 	.word	0x50000100
 8003e98:	50000300 	.word	0x50000300
 8003e9c:	50000700 	.word	0x50000700
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_ADC_IRQHandler+0x614>)
 8003ea2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e007      	b.n	8003ed4 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff f8f8 	bl	80030e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2210      	movs	r2, #16
 8003efe:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d11b      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x60c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d113      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f043 0208 	orr.w	r2, r3, #8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f810 	bl	8003f68 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	50000700 	.word	0x50000700

08003f54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b09b      	sub	sp, #108	; 0x6c
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x22>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e2cb      	b.n	800455e <HAL_ADC_ConfigChannel+0x5ba>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 82af 	bne.w	800453c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d81c      	bhi.n	8004020 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	231f      	movs	r3, #31
 8003ffc:	4093      	lsls	r3, r2
 8003ffe:	43db      	mvns	r3, r3
 8004000:	4019      	ands	r1, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fa00 f203 	lsl.w	r2, r0, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
 800401e:	e063      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b09      	cmp	r3, #9
 8004026:	d81e      	bhi.n	8004066 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	3b1e      	subs	r3, #30
 800403c:	221f      	movs	r2, #31
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	4019      	ands	r1, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	3b1e      	subs	r3, #30
 8004058:	fa00 f203 	lsl.w	r2, r0, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	635a      	str	r2, [r3, #52]	; 0x34
 8004064:	e040      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b0e      	cmp	r3, #14
 800406c:	d81e      	bhi.n	80040ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	3b3c      	subs	r3, #60	; 0x3c
 8004082:	221f      	movs	r2, #31
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	4019      	ands	r1, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	3b3c      	subs	r3, #60	; 0x3c
 800409e:	fa00 f203 	lsl.w	r2, r0, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
 80040aa:	e01d      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	3b5a      	subs	r3, #90	; 0x5a
 80040c0:	221f      	movs	r2, #31
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	4019      	ands	r1, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	3b5a      	subs	r3, #90	; 0x5a
 80040dc:	fa00 f203 	lsl.w	r2, r0, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 80e5 	bne.w	80042c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b09      	cmp	r3, #9
 80040fe:	d91c      	bls.n	800413a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	3b1e      	subs	r3, #30
 8004112:	2207      	movs	r2, #7
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	4019      	ands	r1, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6898      	ldr	r0, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	3b1e      	subs	r3, #30
 800412c:	fa00 f203 	lsl.w	r2, r0, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	619a      	str	r2, [r3, #24]
 8004138:	e019      	b.n	800416e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6959      	ldr	r1, [r3, #20]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	2207      	movs	r2, #7
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	4019      	ands	r1, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6898      	ldr	r0, [r3, #8]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	fa00 f203 	lsl.w	r2, r0, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	08db      	lsrs	r3, r3, #3
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	3b01      	subs	r3, #1
 800418c:	2b03      	cmp	r3, #3
 800418e:	d84f      	bhi.n	8004230 <HAL_ADC_ConfigChannel+0x28c>
 8004190:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <HAL_ADC_ConfigChannel+0x1f4>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041cb 	.word	0x080041cb
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	0800420f 	.word	0x0800420f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ae:	4b9f      	ldr	r3, [pc, #636]	; (800442c <HAL_ADC_ConfigChannel+0x488>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	0691      	lsls	r1, r2, #26
 80041b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ba:	430a      	orrs	r2, r1
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041c8:	e07e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041d0:	4b96      	ldr	r3, [pc, #600]	; (800442c <HAL_ADC_ConfigChannel+0x488>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	0691      	lsls	r1, r2, #26
 80041da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041dc:	430a      	orrs	r2, r1
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041ea:	e06d      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041f2:	4b8e      	ldr	r3, [pc, #568]	; (800442c <HAL_ADC_ConfigChannel+0x488>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	0691      	lsls	r1, r2, #26
 80041fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fe:	430a      	orrs	r2, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800420a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800420c:	e05c      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004214:	4b85      	ldr	r3, [pc, #532]	; (800442c <HAL_ADC_ConfigChannel+0x488>)
 8004216:	4013      	ands	r3, r2
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	0691      	lsls	r1, r2, #26
 800421e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004220:	430a      	orrs	r2, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800422c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800422e:	e04b      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	069b      	lsls	r3, r3, #26
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004252:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004276:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800427e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800429a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	069b      	lsls	r3, r3, #26
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10a      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80042c0:	e001      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80042c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x344>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x344>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_ADC_ConfigChannel+0x346>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8131 	bne.w	8004552 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d00f      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	400a      	ands	r2, r1
 8004312:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004316:	e049      	b.n	80043ac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	409a      	lsls	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b09      	cmp	r3, #9
 8004338:	d91c      	bls.n	8004374 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6999      	ldr	r1, [r3, #24]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	3b1b      	subs	r3, #27
 800434c:	2207      	movs	r2, #7
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	4019      	ands	r1, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6898      	ldr	r0, [r3, #8]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	3b1b      	subs	r3, #27
 8004366:	fa00 f203 	lsl.w	r2, r0, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	619a      	str	r2, [r3, #24]
 8004372:	e01b      	b.n	80043ac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	2207      	movs	r2, #7
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	4019      	ands	r1, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6898      	ldr	r0, [r3, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	fa00 f203 	lsl.w	r2, r0, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b4:	d004      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x41c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_ADC_ConfigChannel+0x48c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x420>
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_ADC_ConfigChannel+0x490>)
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x422>
 80043c4:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_ADC_ConfigChannel+0x494>)
 80043c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043e0:	2b11      	cmp	r3, #17
 80043e2:	d105      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043f4:	2b12      	cmp	r3, #18
 80043f6:	f040 80ac 	bne.w	8004552 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80043fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 80a5 	bne.w	8004552 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004410:	d102      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x474>
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_ADC_ConfigChannel+0x48c>)
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e023      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4bc>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <HAL_ADC_ConfigChannel+0x48c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10c      	bne.n	800443c <HAL_ADC_ConfigChannel+0x498>
 8004422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e01a      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4bc>
 800442a:	bf00      	nop
 800442c:	83fff000 	.word	0x83fff000
 8004430:	50000100 	.word	0x50000100
 8004434:	50000300 	.word	0x50000300
 8004438:	50000700 	.word	0x50000700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a4a      	ldr	r2, [pc, #296]	; (800456c <HAL_ADC_ConfigChannel+0x5c8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d102      	bne.n	800444c <HAL_ADC_ConfigChannel+0x4a8>
 8004446:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_ADC_ConfigChannel+0x5cc>)
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e009      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4bc>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a47      	ldr	r2, [pc, #284]	; (8004570 <HAL_ADC_ConfigChannel+0x5cc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d102      	bne.n	800445c <HAL_ADC_ConfigChannel+0x4b8>
 8004456:	4b45      	ldr	r3, [pc, #276]	; (800456c <HAL_ADC_ConfigChannel+0x5c8>)
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e001      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4bc>
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x4dc>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x4dc>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_ADC_ConfigChannel+0x4de>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d150      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004486:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x504>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x504>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_ADC_ConfigChannel+0x506>
 80044a8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d13c      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d11d      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x54e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044be:	d118      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80044c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044cc:	4b29      	ldr	r3, [pc, #164]	; (8004574 <HAL_ADC_ConfigChannel+0x5d0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a29      	ldr	r2, [pc, #164]	; (8004578 <HAL_ADC_ConfigChannel+0x5d4>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	0c9a      	lsrs	r2, r3, #18
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044e2:	e002      	b.n	80044ea <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f9      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044f0:	e02e      	b.n	8004550 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b11      	cmp	r3, #17
 80044f8:	d10b      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x56e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004502:	d106      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004510:	e01e      	b.n	8004550 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b12      	cmp	r3, #18
 8004518:	d11a      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800451a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004524:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004526:	e013      	b.n	8004550 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800453a:	e00a      	b.n	8004552 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004550:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800455a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800455e:	4618      	mov	r0, r3
 8004560:	376c      	adds	r7, #108	; 0x6c
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	50000400 	.word	0x50000400
 8004570:	50000500 	.word	0x50000500
 8004574:	2000000c 	.word	0x2000000c
 8004578:	431bde83 	.word	0x431bde83

0800457c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800457c:	b480      	push	{r7}
 800457e:	b099      	sub	sp, #100	; 0x64
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004594:	d102      	bne.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004596:	4b6d      	ldr	r3, [pc, #436]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	e01a      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d103      	bne.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80045a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	e011      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a67      	ldr	r2, [pc, #412]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	e009      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a64      	ldr	r2, [pc, #400]	; (8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d102      	bne.n	80045ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045c8:	4b61      	ldr	r3, [pc, #388]	; (8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	e001      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b0      	b.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0a9      	b.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 808d 	bne.w	800471c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 8086 	bne.w	800471c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004618:	d004      	beq.n	8004624 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004626:	e000      	b.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800462a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d040      	beq.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004646:	035b      	lsls	r3, r3, #13
 8004648:	430b      	orrs	r3, r1
 800464a:	431a      	orrs	r2, r3
 800464c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800464e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d108      	bne.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d15c      	bne.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004692:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004694:	2b00      	cmp	r3, #0
 8004696:	d14b      	bne.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046a0:	f023 030f 	bic.w	r3, r3, #15
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	6811      	ldr	r1, [r2, #0]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b4:	e03c      	b.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d123      	bne.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004704:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004706:	2b00      	cmp	r3, #0
 8004708:	d112      	bne.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800470a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004712:	f023 030f 	bic.w	r3, r3, #15
 8004716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004718:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800471a:	e009      	b.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800472e:	e000      	b.n	8004732 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004730:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800473a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800473e:	4618      	mov	r0, r3
 8004740:	3764      	adds	r7, #100	; 0x64
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	50000100 	.word	0x50000100
 8004750:	50000400 	.word	0x50000400
 8004754:	50000500 	.word	0x50000500
 8004758:	50000300 	.word	0x50000300
 800475c:	50000700 	.word	0x50000700

08004760 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d126      	bne.n	80047c8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f043 0201 	orr.w	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fd faed 	bl	8001da0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80047c6:	e004      	b.n	80047d2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7fe fc69 	bl	80030c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7fe fc63 	bl	80030e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d108      	bne.n	8004858 <ADC_Enable+0x2c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <ADC_Enable+0x2c>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <ADC_Enable+0x2e>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d143      	bne.n	80048e6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <ADC_Enable+0xc4>)
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0210 	orr.w	r2, r3, #16
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e02f      	b.n	80048e8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004898:	f7fe fc06 	bl	80030a8 <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800489e:	e01b      	b.n	80048d8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048a0:	f7fe fc02 	bl	80030a8 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d914      	bls.n	80048d8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d00d      	beq.n	80048d8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0210 	orr.w	r2, r3, #16
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e007      	b.n	80048e8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d1dc      	bne.n	80048a0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	8000003f 	.word	0x8000003f

080048f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d108      	bne.n	8004920 <ADC_Disable+0x2c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <ADC_Disable+0x2c>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <ADC_Disable+0x2e>
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d047      	beq.n	80049b6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030d 	and.w	r3, r3, #13
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10f      	bne.n	8004954 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0202 	orr.w	r2, r2, #2
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2203      	movs	r2, #3
 800494a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800494c:	f7fe fbac 	bl	80030a8 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004952:	e029      	b.n	80049a8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e023      	b.n	80049b8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004970:	f7fe fb9a 	bl	80030a8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d914      	bls.n	80049a8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10d      	bne.n	80049a8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e007      	b.n	80049b8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d0dc      	beq.n	8004970 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_COMP_Init+0x22>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
 80049e6:	e064      	b.n	8004ab2 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e8:	4b34      	ldr	r3, [pc, #208]	; (8004abc <HAL_COMP_Init+0xfc>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	4a33      	ldr	r2, [pc, #204]	; (8004abc <HAL_COMP_Init+0xfc>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6193      	str	r3, [r2, #24]
 80049f4:	4b31      	ldr	r3, [pc, #196]	; (8004abc <HAL_COMP_Init+0xfc>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fd ff55 	bl	80028b0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 020c 	bic.w	r2, r3, #12
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_COMP_Stop+0x22>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	e09d      	b.n	8004c24 <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f040 8095 	bne.w	8004c20 <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4e      	ldr	r2, [pc, #312]	; (8004c34 <HAL_COMP_Stop+0x174>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d04b      	beq.n	8004b98 <HAL_COMP_Stop+0xd8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a4c      	ldr	r2, [pc, #304]	; (8004c38 <HAL_COMP_Stop+0x178>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d046      	beq.n	8004b98 <HAL_COMP_Stop+0xd8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a4b      	ldr	r2, [pc, #300]	; (8004c3c <HAL_COMP_Stop+0x17c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d041      	beq.n	8004b98 <HAL_COMP_Stop+0xd8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a49      	ldr	r2, [pc, #292]	; (8004c40 <HAL_COMP_Stop+0x180>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d03c      	beq.n	8004b98 <HAL_COMP_Stop+0xd8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a48      	ldr	r2, [pc, #288]	; (8004c44 <HAL_COMP_Stop+0x184>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d037      	beq.n	8004b98 <HAL_COMP_Stop+0xd8>
 8004b28:	4b47      	ldr	r3, [pc, #284]	; (8004c48 <HAL_COMP_Stop+0x188>)
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4940      	ldr	r1, [pc, #256]	; (8004c34 <HAL_COMP_Stop+0x174>)
 8004b32:	428b      	cmp	r3, r1
 8004b34:	d02a      	beq.n	8004b8c <HAL_COMP_Stop+0xcc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	493f      	ldr	r1, [pc, #252]	; (8004c38 <HAL_COMP_Stop+0x178>)
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	d022      	beq.n	8004b86 <HAL_COMP_Stop+0xc6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	493d      	ldr	r1, [pc, #244]	; (8004c3c <HAL_COMP_Stop+0x17c>)
 8004b46:	428b      	cmp	r3, r1
 8004b48:	d01a      	beq.n	8004b80 <HAL_COMP_Stop+0xc0>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	493c      	ldr	r1, [pc, #240]	; (8004c40 <HAL_COMP_Stop+0x180>)
 8004b50:	428b      	cmp	r3, r1
 8004b52:	d012      	beq.n	8004b7a <HAL_COMP_Stop+0xba>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	493a      	ldr	r1, [pc, #232]	; (8004c44 <HAL_COMP_Stop+0x184>)
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d00a      	beq.n	8004b74 <HAL_COMP_Stop+0xb4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	493a      	ldr	r1, [pc, #232]	; (8004c4c <HAL_COMP_Stop+0x18c>)
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d102      	bne.n	8004b6e <HAL_COMP_Stop+0xae>
 8004b68:	f06f 0301 	mvn.w	r3, #1
 8004b6c:	e010      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b6e:	f06f 0302 	mvn.w	r3, #2
 8004b72:	e00d      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004b78:	e00a      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b7a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004b7e:	e007      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b80:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004b84:	e004      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b86:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004b8a:	e001      	b.n	8004b90 <HAL_COMP_Stop+0xd0>
 8004b8c:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004b90:	492d      	ldr	r1, [pc, #180]	; (8004c48 <HAL_COMP_Stop+0x188>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	624b      	str	r3, [r1, #36]	; 0x24
 8004b96:	e036      	b.n	8004c06 <HAL_COMP_Stop+0x146>
 8004b98:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_COMP_Stop+0x188>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4924      	ldr	r1, [pc, #144]	; (8004c34 <HAL_COMP_Stop+0x174>)
 8004ba2:	428b      	cmp	r3, r1
 8004ba4:	d02a      	beq.n	8004bfc <HAL_COMP_Stop+0x13c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4923      	ldr	r1, [pc, #140]	; (8004c38 <HAL_COMP_Stop+0x178>)
 8004bac:	428b      	cmp	r3, r1
 8004bae:	d022      	beq.n	8004bf6 <HAL_COMP_Stop+0x136>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4921      	ldr	r1, [pc, #132]	; (8004c3c <HAL_COMP_Stop+0x17c>)
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_COMP_Stop+0x130>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4920      	ldr	r1, [pc, #128]	; (8004c40 <HAL_COMP_Stop+0x180>)
 8004bc0:	428b      	cmp	r3, r1
 8004bc2:	d012      	beq.n	8004bea <HAL_COMP_Stop+0x12a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	491e      	ldr	r1, [pc, #120]	; (8004c44 <HAL_COMP_Stop+0x184>)
 8004bca:	428b      	cmp	r3, r1
 8004bcc:	d00a      	beq.n	8004be4 <HAL_COMP_Stop+0x124>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	491e      	ldr	r1, [pc, #120]	; (8004c4c <HAL_COMP_Stop+0x18c>)
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	d102      	bne.n	8004bde <HAL_COMP_Stop+0x11e>
 8004bd8:	f06f 0301 	mvn.w	r3, #1
 8004bdc:	e010      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004bde:	f06f 0302 	mvn.w	r3, #2
 8004be2:	e00d      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004be4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004be8:	e00a      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004bea:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004bee:	e007      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004bf0:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004bf4:	e004      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004bf6:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004bfa:	e001      	b.n	8004c00 <HAL_COMP_Stop+0x140>
 8004bfc:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004c00:	4911      	ldr	r1, [pc, #68]	; (8004c48 <HAL_COMP_Stop+0x188>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004c1e:	e001      	b.n	8004c24 <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	4001001c 	.word	0x4001001c
 8004c38:	40010020 	.word	0x40010020
 8004c3c:	40010024 	.word	0x40010024
 8004c40:	40010028 	.word	0x40010028
 8004c44:	4001002c 	.word	0x4001002c
 8004c48:	40010400 	.word	0x40010400
 8004c4c:	40010030 	.word	0x40010030

08004c50 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_COMP_Start_IT+0x26>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	e0c8      	b.n	8004e0e <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 80c0 	bne.w	8004e0a <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80b6 	beq.w	8004e04 <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5f      	ldr	r2, [pc, #380]	; (8004e1c <HAL_COMP_Start_IT+0x1cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d028      	beq.n	8004cf4 <HAL_COMP_Start_IT+0xa4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5e      	ldr	r2, [pc, #376]	; (8004e20 <HAL_COMP_Start_IT+0x1d0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d020      	beq.n	8004cee <HAL_COMP_Start_IT+0x9e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5c      	ldr	r2, [pc, #368]	; (8004e24 <HAL_COMP_Start_IT+0x1d4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_COMP_Start_IT+0x98>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a5b      	ldr	r2, [pc, #364]	; (8004e28 <HAL_COMP_Start_IT+0x1d8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d010      	beq.n	8004ce2 <HAL_COMP_Start_IT+0x92>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a59      	ldr	r2, [pc, #356]	; (8004e2c <HAL_COMP_Start_IT+0x1dc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d008      	beq.n	8004cdc <HAL_COMP_Start_IT+0x8c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a58      	ldr	r2, [pc, #352]	; (8004e30 <HAL_COMP_Start_IT+0x1e0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d101      	bne.n	8004cd8 <HAL_COMP_Start_IT+0x88>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e00f      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e00d      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ce0:	e00a      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ce6:	e007      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004ce8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004cec:	e004      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cf2:	e001      	b.n	8004cf8 <HAL_COMP_Start_IT+0xa8>
 8004cf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cf8:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <HAL_COMP_Start_IT+0xce>
 8004d10:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d14:	4947      	ldr	r1, [pc, #284]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d1c:	e01a      	b.n	8004d54 <HAL_COMP_Start_IT+0x104>
 8004d1e:	4b45      	ldr	r3, [pc, #276]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	4944      	ldr	r1, [pc, #272]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
 8004d2a:	e013      	b.n	8004d54 <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_COMP_Start_IT+0xf6>
 8004d36:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	493d      	ldr	r1, [pc, #244]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	628b      	str	r3, [r1, #40]	; 0x28
 8004d44:	e006      	b.n	8004d54 <HAL_COMP_Start_IT+0x104>
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	4939      	ldr	r1, [pc, #228]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d006      	beq.n	8004d78 <HAL_COMP_Start_IT+0x128>
 8004d6a:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	4931      	ldr	r1, [pc, #196]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004d76:	e01a      	b.n	8004dae <HAL_COMP_Start_IT+0x15e>
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	492d      	ldr	r1, [pc, #180]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60cb      	str	r3, [r1, #12]
 8004d84:	e013      	b.n	8004dae <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_COMP_Start_IT+0x150>
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	4926      	ldr	r1, [pc, #152]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004d9e:	e006      	b.n	8004dae <HAL_COMP_Start_IT+0x15e>
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	4922      	ldr	r1, [pc, #136]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_COMP_Start_IT+0x170>
 8004db8:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8004dbe:	e002      	b.n	8004dc6 <HAL_COMP_Start_IT+0x176>
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <HAL_COMP_Start_IT+0x18e>
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	4917      	ldr	r1, [pc, #92]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	620b      	str	r3, [r1, #32]
 8004ddc:	e005      	b.n	8004dea <HAL_COMP_Start_IT+0x19a>
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4914      	ldr	r1, [pc, #80]	; (8004e34 <HAL_COMP_Start_IT+0x1e4>)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004e02:	e004      	b.n	8004e0e <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e001      	b.n	8004e0e <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	4001001c 	.word	0x4001001c
 8004e20:	40010020 	.word	0x40010020
 8004e24:	40010024 	.word	0x40010024
 8004e28:	40010028 	.word	0x40010028
 8004e2c:	4001002c 	.word	0x4001002c
 8004e30:	40010030 	.word	0x40010030
 8004e34:	40010400 	.word	0x40010400

08004e38 <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a47      	ldr	r2, [pc, #284]	; (8004f68 <HAL_COMP_Stop_IT+0x130>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d04b      	beq.n	8004ee6 <HAL_COMP_Stop_IT+0xae>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a46      	ldr	r2, [pc, #280]	; (8004f6c <HAL_COMP_Stop_IT+0x134>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d046      	beq.n	8004ee6 <HAL_COMP_Stop_IT+0xae>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a44      	ldr	r2, [pc, #272]	; (8004f70 <HAL_COMP_Stop_IT+0x138>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d041      	beq.n	8004ee6 <HAL_COMP_Stop_IT+0xae>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a43      	ldr	r2, [pc, #268]	; (8004f74 <HAL_COMP_Stop_IT+0x13c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d03c      	beq.n	8004ee6 <HAL_COMP_Stop_IT+0xae>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a41      	ldr	r2, [pc, #260]	; (8004f78 <HAL_COMP_Stop_IT+0x140>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d037      	beq.n	8004ee6 <HAL_COMP_Stop_IT+0xae>
 8004e76:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <HAL_COMP_Stop_IT+0x144>)
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	493a      	ldr	r1, [pc, #232]	; (8004f68 <HAL_COMP_Stop_IT+0x130>)
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d02a      	beq.n	8004eda <HAL_COMP_Stop_IT+0xa2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4938      	ldr	r1, [pc, #224]	; (8004f6c <HAL_COMP_Stop_IT+0x134>)
 8004e8a:	428b      	cmp	r3, r1
 8004e8c:	d022      	beq.n	8004ed4 <HAL_COMP_Stop_IT+0x9c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4937      	ldr	r1, [pc, #220]	; (8004f70 <HAL_COMP_Stop_IT+0x138>)
 8004e94:	428b      	cmp	r3, r1
 8004e96:	d01a      	beq.n	8004ece <HAL_COMP_Stop_IT+0x96>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4935      	ldr	r1, [pc, #212]	; (8004f74 <HAL_COMP_Stop_IT+0x13c>)
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	d012      	beq.n	8004ec8 <HAL_COMP_Stop_IT+0x90>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4934      	ldr	r1, [pc, #208]	; (8004f78 <HAL_COMP_Stop_IT+0x140>)
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_COMP_Stop_IT+0x8a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4933      	ldr	r1, [pc, #204]	; (8004f80 <HAL_COMP_Stop_IT+0x148>)
 8004eb2:	428b      	cmp	r3, r1
 8004eb4:	d102      	bne.n	8004ebc <HAL_COMP_Stop_IT+0x84>
 8004eb6:	f06f 0301 	mvn.w	r3, #1
 8004eba:	e010      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004ebc:	f06f 0302 	mvn.w	r3, #2
 8004ec0:	e00d      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004ec2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004ec6:	e00a      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004ec8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004ecc:	e007      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004ece:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004ed2:	e004      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004ed4:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004ed8:	e001      	b.n	8004ede <HAL_COMP_Stop_IT+0xa6>
 8004eda:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004ede:	4927      	ldr	r1, [pc, #156]	; (8004f7c <HAL_COMP_Stop_IT+0x144>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	620b      	str	r3, [r1, #32]
 8004ee4:	e036      	b.n	8004f54 <HAL_COMP_Stop_IT+0x11c>
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <HAL_COMP_Stop_IT+0x144>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	491e      	ldr	r1, [pc, #120]	; (8004f68 <HAL_COMP_Stop_IT+0x130>)
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	d02a      	beq.n	8004f4a <HAL_COMP_Stop_IT+0x112>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	491c      	ldr	r1, [pc, #112]	; (8004f6c <HAL_COMP_Stop_IT+0x134>)
 8004efa:	428b      	cmp	r3, r1
 8004efc:	d022      	beq.n	8004f44 <HAL_COMP_Stop_IT+0x10c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	491b      	ldr	r1, [pc, #108]	; (8004f70 <HAL_COMP_Stop_IT+0x138>)
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d01a      	beq.n	8004f3e <HAL_COMP_Stop_IT+0x106>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4919      	ldr	r1, [pc, #100]	; (8004f74 <HAL_COMP_Stop_IT+0x13c>)
 8004f0e:	428b      	cmp	r3, r1
 8004f10:	d012      	beq.n	8004f38 <HAL_COMP_Stop_IT+0x100>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4918      	ldr	r1, [pc, #96]	; (8004f78 <HAL_COMP_Stop_IT+0x140>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d00a      	beq.n	8004f32 <HAL_COMP_Stop_IT+0xfa>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4917      	ldr	r1, [pc, #92]	; (8004f80 <HAL_COMP_Stop_IT+0x148>)
 8004f22:	428b      	cmp	r3, r1
 8004f24:	d102      	bne.n	8004f2c <HAL_COMP_Stop_IT+0xf4>
 8004f26:	f06f 0301 	mvn.w	r3, #1
 8004f2a:	e010      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f2c:	f06f 0302 	mvn.w	r3, #2
 8004f30:	e00d      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004f36:	e00a      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f38:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004f3c:	e007      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f3e:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004f42:	e004      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f44:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004f48:	e001      	b.n	8004f4e <HAL_COMP_Stop_IT+0x116>
 8004f4a:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004f4e:	490b      	ldr	r1, [pc, #44]	; (8004f7c <HAL_COMP_Stop_IT+0x144>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fdb3 	bl	8004ac0 <HAL_COMP_Stop>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	4001001c 	.word	0x4001001c
 8004f6c:	40010020 	.word	0x40010020
 8004f70:	40010024 	.word	0x40010024
 8004f74:	40010028 	.word	0x40010028
 8004f78:	4001002c 	.word	0x4001002c
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40010030 	.word	0x40010030

08004f84 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <HAL_COMP_IRQHandler+0xc4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d028      	beq.n	8004fe8 <HAL_COMP_IRQHandler+0x64>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <HAL_COMP_IRQHandler+0xc8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d020      	beq.n	8004fe2 <HAL_COMP_IRQHandler+0x5e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <HAL_COMP_IRQHandler+0xcc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_COMP_IRQHandler+0x58>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <HAL_COMP_IRQHandler+0xd0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d010      	beq.n	8004fd6 <HAL_COMP_IRQHandler+0x52>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a27      	ldr	r2, [pc, #156]	; (8005058 <HAL_COMP_IRQHandler+0xd4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d008      	beq.n	8004fd0 <HAL_COMP_IRQHandler+0x4c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <HAL_COMP_IRQHandler+0xd8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_COMP_IRQHandler+0x48>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e00f      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e00d      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fd4:	e00a      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fda:	e007      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004fe0:	e004      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fe6:	e001      	b.n	8004fec <HAL_COMP_IRQHandler+0x68>
 8004fe8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <HAL_COMP_IRQHandler+0x88>
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_COMP_IRQHandler+0xdc>)
 8004ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e008      	b.n	800501e <HAL_COMP_IRQHandler+0x9a>
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <HAL_COMP_IRQHandler+0xdc>)
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4013      	ands	r3, r2
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_COMP_IRQHandler+0xb0>
 800502c:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <HAL_COMP_IRQHandler+0xdc>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6353      	str	r3, [r2, #52]	; 0x34
 8005032:	e002      	b.n	800503a <HAL_COMP_IRQHandler+0xb6>
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <HAL_COMP_IRQHandler+0xdc>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fc feba 	bl	8001db4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	4001001c 	.word	0x4001001c
 800504c:	40010020 	.word	0x40010020
 8005050:	40010024 	.word	0x40010024
 8005054:	40010028 	.word	0x40010028
 8005058:	4001002c 	.word	0x4001002c
 800505c:	40010030 	.word	0x40010030
 8005060:	40010400 	.word	0x40010400

08005064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800508c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	60d3      	str	r3, [r2, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <__NVIC_GetPriorityGrouping+0x18>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0307 	and.w	r3, r3, #7
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db0b      	blt.n	80050f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f003 021f 	and.w	r2, r3, #31
 80050e0:	4907      	ldr	r1, [pc, #28]	; (8005100 <__NVIC_EnableIRQ+0x38>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2001      	movs	r0, #1
 80050ea:	fa00 f202 	lsl.w	r2, r0, r2
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e100 	.word	0xe000e100

08005104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db0a      	blt.n	800512e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	490c      	ldr	r1, [pc, #48]	; (8005150 <__NVIC_SetPriority+0x4c>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	440b      	add	r3, r1
 8005128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800512c:	e00a      	b.n	8005144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4908      	ldr	r1, [pc, #32]	; (8005154 <__NVIC_SetPriority+0x50>)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	3b04      	subs	r3, #4
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	440b      	add	r3, r1
 8005142:	761a      	strb	r2, [r3, #24]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000e100 	.word	0xe000e100
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf28      	it	cs
 8005176:	2304      	movcs	r3, #4
 8005178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3304      	adds	r3, #4
 800517e:	2b06      	cmp	r3, #6
 8005180:	d902      	bls.n	8005188 <NVIC_EncodePriority+0x30>
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3b03      	subs	r3, #3
 8005186:	e000      	b.n	800518a <NVIC_EncodePriority+0x32>
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	401a      	ands	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	43d9      	mvns	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b0:	4313      	orrs	r3, r2
         );
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ff4c 	bl	8005064 <__NVIC_SetPriorityGrouping>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051e6:	f7ff ff61 	bl	80050ac <__NVIC_GetPriorityGrouping>
 80051ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f7ff ffb1 	bl	8005158 <NVIC_EncodePriority>
 80051f6:	4602      	mov	r2, r0
 80051f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff80 	bl	8005104 <__NVIC_SetPriority>
}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff54 	bl	80050c8 <__NVIC_EnableIRQ>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e014      	b.n	8005264 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd fbbe 	bl	80029cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e004      	b.n	80052b4 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4413      	add	r3, r2
 80052b0:	3314      	adds	r3, #20
 80052b2:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	461a      	mov	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	795b      	ldrb	r3, [r3, #5]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_DAC_Start+0x16>
 80052dc:	2302      	movs	r3, #2
 80052de:	e039      	b.n	8005354 <HAL_DAC_Start+0x8a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	409a      	lsls	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005310:	2b3c      	cmp	r3, #60	; 0x3c
 8005312:	d118      	bne.n	8005346 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	e00f      	b.n	8005346 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005330:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8005334:	d107      	bne.n	8005346 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0202 	orr.w	r2, r2, #2
 8005344:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005376:	d120      	bne.n	80053ba <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d118      	bne.n	80053ba <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f043 0201 	orr.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053b2:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff59 	bl	800526c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c8:	d120      	bne.n	800540c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d8:	d118      	bne.n	800540c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f043 0202 	orr.w	r2, r3, #2
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053f4:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f851 	bl	80054ae <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	795b      	ldrb	r3, [r3, #5]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_DAC_ConfigChannel+0x20>
 8005430:	2302      	movs	r3, #2
 8005432:	e036      	b.n	80054a2 <HAL_DAC_ConfigChannel+0x8e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2202      	movs	r2, #2
 800543e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005448:	f640 72fe 	movw	r2, #4094	; 0xffe
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4013      	ands	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	22c0      	movs	r2, #192	; 0xc0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43da      	mvns	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	400a      	ands	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e037      	b.n	8005548 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80054ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80054f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80054fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f940 	bl	80057b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}  
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_DMA_Start_IT+0x20>
 800556c:	2302      	movs	r3, #2
 800556e:	e04a      	b.n	8005606 <HAL_DMA_Start_IT+0xb6>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800557e:	2b01      	cmp	r3, #1
 8005580:	d13a      	bne.n	80055f8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f8d4 	bl	8005754 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 020e 	orr.w	r2, r2, #14
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e00f      	b.n	80055e6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 020a 	orr.w	r2, r2, #10
 80055d4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0204 	bic.w	r2, r2, #4
 80055e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e005      	b.n	8005604 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005600:	2302      	movs	r3, #2
 8005602:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005604:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2204      	movs	r2, #4
 800562c:	409a      	lsls	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d024      	beq.n	8005680 <HAL_DMA_IRQHandler+0x72>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01f      	beq.n	8005680 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	2104      	movs	r1, #4
 8005668:	fa01 f202 	lsl.w	r2, r1, r2
 800566c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d06a      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800567e:	e065      	b.n	800574c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	2202      	movs	r2, #2
 8005686:	409a      	lsls	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02c      	beq.n	80056ea <HAL_DMA_IRQHandler+0xdc>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d027      	beq.n	80056ea <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020a 	bic.w	r2, r2, #10
 80056b6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	2102      	movs	r1, #2
 80056ca:	fa01 f202 	lsl.w	r2, r1, r2
 80056ce:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d035      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80056e8:	e030      	b.n	800574c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2208      	movs	r2, #8
 80056f0:	409a      	lsls	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d028      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d023      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 020e 	bic.w	r2, r2, #14
 8005712:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2101      	movs	r1, #1
 800571e:	fa01 f202 	lsl.w	r2, r1, r2
 8005722:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
    }
  }
}  
 800574a:	e7ff      	b.n	800574c <HAL_DMA_IRQHandler+0x13e>
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f202 	lsl.w	r2, r1, r2
 8005770:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b10      	cmp	r3, #16
 8005780:	d108      	bne.n	8005794 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005792:	e007      	b.n	80057a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <DMA_CalcBaseAndBitshift+0x60>)
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d80f      	bhi.n	80057e4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <DMA_CalcBaseAndBitshift+0x64>)
 80057cc:	4413      	add	r3, r2
 80057ce:	4a12      	ldr	r2, [pc, #72]	; (8005818 <DMA_CalcBaseAndBitshift+0x68>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a0f      	ldr	r2, [pc, #60]	; (800581c <DMA_CalcBaseAndBitshift+0x6c>)
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80057e2:	e00e      	b.n	8005802 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <DMA_CalcBaseAndBitshift+0x70>)
 80057ec:	4413      	add	r3, r2
 80057ee:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <DMA_CalcBaseAndBitshift+0x68>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <DMA_CalcBaseAndBitshift+0x74>)
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40020407 	.word	0x40020407
 8005814:	bffdfff8 	.word	0xbffdfff8
 8005818:	cccccccd 	.word	0xcccccccd
 800581c:	40020000 	.word	0x40020000
 8005820:	bffdfbf8 	.word	0xbffdfbf8
 8005824:	40020400 	.word	0x40020400

08005828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005836:	e154      	b.n	8005ae2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2101      	movs	r1, #1
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	fa01 f303 	lsl.w	r3, r1, r3
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8146 	beq.w	8005adc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d005      	beq.n	8005868 <HAL_GPIO_Init+0x40>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d130      	bne.n	80058ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	2203      	movs	r2, #3
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4013      	ands	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800589e:	2201      	movs	r2, #1
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4013      	ands	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	f003 0201 	and.w	r2, r3, #1
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d017      	beq.n	8005906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	2203      	movs	r2, #3
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d123      	bne.n	800595a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	08da      	lsrs	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3208      	adds	r2, #8
 800591a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	220f      	movs	r2, #15
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4013      	ands	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	08da      	lsrs	r2, r3, #3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3208      	adds	r2, #8
 8005954:	6939      	ldr	r1, [r7, #16]
 8005956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	2203      	movs	r2, #3
 8005966:	fa02 f303 	lsl.w	r3, r2, r3
 800596a:	43db      	mvns	r3, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4013      	ands	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0203 	and.w	r2, r3, #3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a0 	beq.w	8005adc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800599c:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_GPIO_Init+0x2d8>)
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	4a57      	ldr	r2, [pc, #348]	; (8005b00 <HAL_GPIO_Init+0x2d8>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6193      	str	r3, [r2, #24]
 80059a8:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <HAL_GPIO_Init+0x2d8>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059b4:	4a53      	ldr	r2, [pc, #332]	; (8005b04 <HAL_GPIO_Init+0x2dc>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	089b      	lsrs	r3, r3, #2
 80059ba:	3302      	adds	r3, #2
 80059bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	220f      	movs	r2, #15
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4013      	ands	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059de:	d019      	beq.n	8005a14 <HAL_GPIO_Init+0x1ec>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a49      	ldr	r2, [pc, #292]	; (8005b08 <HAL_GPIO_Init+0x2e0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_GPIO_Init+0x1e8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a48      	ldr	r2, [pc, #288]	; (8005b0c <HAL_GPIO_Init+0x2e4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00d      	beq.n	8005a0c <HAL_GPIO_Init+0x1e4>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a47      	ldr	r2, [pc, #284]	; (8005b10 <HAL_GPIO_Init+0x2e8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <HAL_GPIO_Init+0x1e0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a46      	ldr	r2, [pc, #280]	; (8005b14 <HAL_GPIO_Init+0x2ec>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d101      	bne.n	8005a04 <HAL_GPIO_Init+0x1dc>
 8005a00:	2304      	movs	r3, #4
 8005a02:	e008      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a04:	2305      	movs	r3, #5
 8005a06:	e006      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e004      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e002      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_GPIO_Init+0x1ee>
 8005a14:	2300      	movs	r3, #0
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	f002 0203 	and.w	r2, r2, #3
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	4093      	lsls	r3, r2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a26:	4937      	ldr	r1, [pc, #220]	; (8005b04 <HAL_GPIO_Init+0x2dc>)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a34:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a58:	4a2f      	ldr	r2, [pc, #188]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a88:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005aac:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ab2:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005ad6:	4a10      	ldr	r2, [pc, #64]	; (8005b18 <HAL_GPIO_Init+0x2f0>)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f aea3 	bne.w	8005838 <HAL_GPIO_Init+0x10>
  }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40010000 	.word	0x40010000
 8005b08:	48000400 	.word	0x48000400
 8005b0c:	48000800 	.word	0x48000800
 8005b10:	48000c00 	.word	0x48000c00
 8005b14:	48001000 	.word	0x48001000
 8005b18:	40010400 	.word	0x40010400

08005b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	807b      	strh	r3, [r7, #2]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b2c:	787b      	ldrb	r3, [r7, #1]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b32:	887a      	ldrh	r2, [r7, #2]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b38:	e002      	b.n	8005b40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f000 bef4 	b.w	800694e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 816a 	beq.w	8005e4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005b76:	4bb3      	ldr	r3, [pc, #716]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d00c      	beq.n	8005b9c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b82:	4bb0      	ldr	r3, [pc, #704]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d159      	bne.n	8005c42 <HAL_RCC_OscConfig+0xf6>
 8005b8e:	4bad      	ldr	r3, [pc, #692]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9a:	d152      	bne.n	8005c42 <HAL_RCC_OscConfig+0xf6>
 8005b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005ba8:	fa93 f3a3 	rbit	r3, r3
 8005bac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <HAL_RCC_OscConfig+0x82>
 8005bc8:	4b9e      	ldr	r3, [pc, #632]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_OscConfig+0xae>
 8005bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005be6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005bea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005bee:	fa93 f3a3 	rbit	r3, r3
 8005bf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005bf6:	4b93      	ldr	r3, [pc, #588]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bfe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005c02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005c06:	fa92 f2a2 	rbit	r2, r2
 8005c0a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005c0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005c12:	fab2 f282 	clz	r2, r2
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	f042 0220 	orr.w	r2, r2, #32
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	f002 021f 	and.w	r2, r2, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f202 	lsl.w	r2, r1, r2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 810c 	beq.w	8005e48 <HAL_RCC_OscConfig+0x2fc>
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 8106 	bne.w	8005e48 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f000 be86 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	d106      	bne.n	8005c5c <HAL_RCC_OscConfig+0x110>
 8005c4e:	4b7d      	ldr	r3, [pc, #500]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a7c      	ldr	r2, [pc, #496]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e030      	b.n	8005cbe <HAL_RCC_OscConfig+0x172>
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x134>
 8005c66:	4b77      	ldr	r3, [pc, #476]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a76      	ldr	r2, [pc, #472]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b74      	ldr	r3, [pc, #464]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a73      	ldr	r2, [pc, #460]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01e      	b.n	8005cbe <HAL_RCC_OscConfig+0x172>
 8005c80:	1d3b      	adds	r3, r7, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x15a>
 8005c8c:	4b6d      	ldr	r3, [pc, #436]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a6c      	ldr	r2, [pc, #432]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a69      	ldr	r2, [pc, #420]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e00b      	b.n	8005cbe <HAL_RCC_OscConfig+0x172>
 8005ca6:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a66      	ldr	r2, [pc, #408]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a63      	ldr	r2, [pc, #396]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cbe:	4b61      	ldr	r3, [pc, #388]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f023 020f 	bic.w	r2, r3, #15
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	495d      	ldr	r1, [pc, #372]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d059      	beq.n	8005d90 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7fd f9e4 	bl	80030a8 <HAL_GetTick>
 8005ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce6:	f7fd f9df 	bl	80030a8 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b64      	cmp	r3, #100	; 0x64
 8005cf4:	d902      	bls.n	8005cfc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	f000 be29 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
 8005cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005d10:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d14:	fab3 f383 	clz	r3, r3
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d102      	bne.n	8005d2e <HAL_RCC_OscConfig+0x1e2>
 8005d28:	4b46      	ldr	r3, [pc, #280]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	e015      	b.n	8005d5a <HAL_RCC_OscConfig+0x20e>
 8005d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005d3a:	fa93 f3a3 	rbit	r3, r3
 8005d3e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005d4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005d4e:	fa93 f3a3 	rbit	r3, r3
 8005d52:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005d56:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005d62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005d66:	fa92 f2a2 	rbit	r2, r2
 8005d6a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005d6e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005d72:	fab2 f282 	clz	r2, r2
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	f042 0220 	orr.w	r2, r2, #32
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	f002 021f 	and.w	r2, r2, #31
 8005d82:	2101      	movs	r1, #1
 8005d84:	fa01 f202 	lsl.w	r2, r1, r2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ab      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x19a>
 8005d8e:	e05c      	b.n	8005e4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fd f98a 	bl	80030a8 <HAL_GetTick>
 8005d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d9a:	f7fd f985 	bl	80030a8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d902      	bls.n	8005db0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	f000 bdcf 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
 8005db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005db4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005dbc:	fa93 f3a3 	rbit	r3, r3
 8005dc0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005dc4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc8:	fab3 f383 	clz	r3, r3
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_OscConfig+0x296>
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x2c2>
 8005de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005de6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dfa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005dfe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005e02:	fa93 f3a3 	rbit	r3, r3
 8005e06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <HAL_RCC_OscConfig+0x2f8>)
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005e16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005e1a:	fa92 f2a2 	rbit	r2, r2
 8005e1e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005e22:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005e26:	fab2 f282 	clz	r2, r2
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	f042 0220 	orr.w	r2, r2, #32
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	f002 021f 	and.w	r2, r2, #31
 8005e36:	2101      	movs	r1, #1
 8005e38:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ab      	bne.n	8005d9a <HAL_RCC_OscConfig+0x24e>
 8005e42:	e002      	b.n	8005e4a <HAL_RCC_OscConfig+0x2fe>
 8005e44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 816f 	beq.w	8006138 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e5a:	4bd0      	ldr	r3, [pc, #832]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e66:	4bcd      	ldr	r3, [pc, #820]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d16c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x400>
 8005e72:	4bca      	ldr	r3, [pc, #808]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d166      	bne.n	8005f4c <HAL_RCC_OscConfig+0x400>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005e88:	fa93 f3a3 	rbit	r3, r3
 8005e8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005e90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <HAL_RCC_OscConfig+0x362>
 8005ea8:	4bbc      	ldr	r3, [pc, #752]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	e013      	b.n	8005ed6 <HAL_RCC_OscConfig+0x38a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005eca:	fa93 f3a3 	rbit	r3, r3
 8005ece:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005ed2:	4bb2      	ldr	r3, [pc, #712]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005edc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005ee0:	fa92 f2a2 	rbit	r2, r2
 8005ee4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005ee8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005eec:	fab2 f282 	clz	r2, r2
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	f042 0220 	orr.w	r2, r2, #32
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	f002 021f 	and.w	r2, r2, #31
 8005efc:	2101      	movs	r1, #1
 8005efe:	fa01 f202 	lsl.w	r2, r1, r2
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_RCC_OscConfig+0x3cc>
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d002      	beq.n	8005f18 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f000 bd1b 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f18:	4ba0      	ldr	r3, [pc, #640]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	21f8      	movs	r1, #248	; 0xf8
 8005f28:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005f30:	fa91 f1a1 	rbit	r1, r1
 8005f34:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005f38:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005f3c:	fab1 f181 	clz	r1, r1
 8005f40:	b2c9      	uxtb	r1, r1
 8005f42:	408b      	lsls	r3, r1
 8005f44:	4995      	ldr	r1, [pc, #596]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4a:	e0f5      	b.n	8006138 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f4c:	1d3b      	adds	r3, r7, #4
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8085 	beq.w	8006062 <HAL_RCC_OscConfig+0x516>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005f6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f6e:	fab3 f383 	clz	r3, r3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2301      	movs	r3, #1
 8005f82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fd f890 	bl	80030a8 <HAL_GetTick>
 8005f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8c:	e00a      	b.n	8005fa4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8e:	f7fd f88b 	bl	80030a8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d902      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	f000 bcd5 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005faa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005fb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fba:	fab3 f383 	clz	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x488>
 8005fce:	4b73      	ldr	r3, [pc, #460]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	e013      	b.n	8005ffc <HAL_RCC_OscConfig+0x4b0>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005fde:	fa93 f3a3 	rbit	r3, r3
 8005fe2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005fec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005ff0:	fa93 f3a3 	rbit	r3, r3
 8005ff4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005ff8:	4b68      	ldr	r3, [pc, #416]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006002:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006006:	fa92 f2a2 	rbit	r2, r2
 800600a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800600e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006012:	fab2 f282 	clz	r2, r2
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	f042 0220 	orr.w	r2, r2, #32
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	f002 021f 	and.w	r2, r2, #31
 8006022:	2101      	movs	r1, #1
 8006024:	fa01 f202 	lsl.w	r2, r1, r2
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0af      	beq.n	8005f8e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602e:	4b5b      	ldr	r3, [pc, #364]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	21f8      	movs	r1, #248	; 0xf8
 800603e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006042:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006046:	fa91 f1a1 	rbit	r1, r1
 800604a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800604e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006052:	fab1 f181 	clz	r1, r1
 8006056:	b2c9      	uxtb	r1, r1
 8006058:	408b      	lsls	r3, r1
 800605a:	4950      	ldr	r1, [pc, #320]	; (800619c <HAL_RCC_OscConfig+0x650>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	e06a      	b.n	8006138 <HAL_RCC_OscConfig+0x5ec>
 8006062:	2301      	movs	r3, #1
 8006064:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800606c:	fa93 f3a3 	rbit	r3, r3
 8006070:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006078:	fab3 f383 	clz	r3, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006082:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	461a      	mov	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fd f80b 	bl	80030a8 <HAL_GetTick>
 8006092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006098:	f7fd f806 	bl	80030a8 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d902      	bls.n	80060ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	f000 bc50 	b.w	800694e <HAL_RCC_OscConfig+0xe02>
 80060ae:	2302      	movs	r3, #2
 80060b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060b8:	fa93 f3a3 	rbit	r3, r3
 80060bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80060c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d102      	bne.n	80060de <HAL_RCC_OscConfig+0x592>
 80060d8:	4b30      	ldr	r3, [pc, #192]	; (800619c <HAL_RCC_OscConfig+0x650>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	e013      	b.n	8006106 <HAL_RCC_OscConfig+0x5ba>
 80060de:	2302      	movs	r3, #2
 80060e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060e8:	fa93 f3a3 	rbit	r3, r3
 80060ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80060f0:	2302      	movs	r3, #2
 80060f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80060f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <HAL_RCC_OscConfig+0x650>)
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2202      	movs	r2, #2
 8006108:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800610c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006110:	fa92 f2a2 	rbit	r2, r2
 8006114:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006118:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800611c:	fab2 f282 	clz	r2, r2
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	f042 0220 	orr.w	r2, r2, #32
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	f002 021f 	and.w	r2, r2, #31
 800612c:	2101      	movs	r1, #1
 800612e:	fa01 f202 	lsl.w	r2, r1, r2
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1af      	bne.n	8006098 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80da 	beq.w	80062fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006148:	1d3b      	adds	r3, r7, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d069      	beq.n	8006226 <HAL_RCC_OscConfig+0x6da>
 8006152:	2301      	movs	r3, #1
 8006154:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006158:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800615c:	fa93 f3a3 	rbit	r3, r3
 8006160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006168:	fab3 f383 	clz	r3, r3
 800616c:	b2db      	uxtb	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_RCC_OscConfig+0x654>)
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	461a      	mov	r2, r3
 8006178:	2301      	movs	r3, #1
 800617a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800617c:	f7fc ff94 	bl	80030a8 <HAL_GetTick>
 8006180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006184:	e00e      	b.n	80061a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006186:	f7fc ff8f 	bl	80030a8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d906      	bls.n	80061a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e3d9      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000
 80061a0:	10908120 	.word	0x10908120
 80061a4:	2302      	movs	r3, #2
 80061a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ae:	fa93 f3a3 	rbit	r3, r3
 80061b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80061ba:	2202      	movs	r2, #2
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	fa93 f2a3 	rbit	r2, r3
 80061c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80061d2:	2202      	movs	r2, #2
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	fa93 f2a3 	rbit	r2, r3
 80061e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80061e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	4ba5      	ldr	r3, [pc, #660]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80061e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80061ee:	2102      	movs	r1, #2
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	fa93 f1a3 	rbit	r1, r3
 80061fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006200:	6019      	str	r1, [r3, #0]
  return result;
 8006202:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	fab3 f383 	clz	r3, r3
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2101      	movs	r1, #1
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0b0      	beq.n	8006186 <HAL_RCC_OscConfig+0x63a>
 8006224:	e06a      	b.n	80062fc <HAL_RCC_OscConfig+0x7b0>
 8006226:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	fa93 f2a3 	rbit	r2, r3
 8006238:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800623c:	601a      	str	r2, [r3, #0]
  return result;
 800623e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006242:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006244:	fab3 f383 	clz	r3, r3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	4b8c      	ldr	r3, [pc, #560]	; (8006480 <HAL_RCC_OscConfig+0x934>)
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	461a      	mov	r2, r3
 8006254:	2300      	movs	r3, #0
 8006256:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006258:	f7fc ff26 	bl	80030a8 <HAL_GetTick>
 800625c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006260:	e009      	b.n	8006276 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006262:	f7fc ff21 	bl	80030a8 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e36b      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 8006276:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800627a:	2202      	movs	r2, #2
 800627c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	fa93 f2a3 	rbit	r2, r3
 8006288:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006292:	2202      	movs	r2, #2
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	fa93 f2a3 	rbit	r2, r3
 80062a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062aa:	2202      	movs	r2, #2
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	fa93 f2a3 	rbit	r2, r3
 80062b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80062bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062be:	4b6f      	ldr	r3, [pc, #444]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80062c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80062c6:	2102      	movs	r1, #2
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	fa93 f1a3 	rbit	r1, r3
 80062d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80062d8:	6019      	str	r1, [r3, #0]
  return result;
 80062da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	fab3 f383 	clz	r3, r3
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1b2      	bne.n	8006262 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8158 	beq.w	80065bc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006312:	4b5a      	ldr	r3, [pc, #360]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d112      	bne.n	8006344 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631e:	4b57      	ldr	r3, [pc, #348]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4a56      	ldr	r2, [pc, #344]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006328:	61d3      	str	r3, [r2, #28]
 800632a:	4b54      	ldr	r3, [pc, #336]	; (800647c <HAL_RCC_OscConfig+0x930>)
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f107 0308 	add.w	r3, r7, #8
 800633c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800633e:	2301      	movs	r3, #1
 8006340:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006344:	4b4f      	ldr	r3, [pc, #316]	; (8006484 <HAL_RCC_OscConfig+0x938>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11a      	bne.n	8006386 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006350:	4b4c      	ldr	r3, [pc, #304]	; (8006484 <HAL_RCC_OscConfig+0x938>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a4b      	ldr	r2, [pc, #300]	; (8006484 <HAL_RCC_OscConfig+0x938>)
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635c:	f7fc fea4 	bl	80030a8 <HAL_GetTick>
 8006360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006364:	e009      	b.n	800637a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006366:	f7fc fe9f 	bl	80030a8 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e2e9      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800637a:	4b42      	ldr	r3, [pc, #264]	; (8006484 <HAL_RCC_OscConfig+0x938>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0ef      	beq.n	8006366 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x852>
 8006390:	4b3a      	ldr	r3, [pc, #232]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4a39      	ldr	r2, [pc, #228]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6213      	str	r3, [r2, #32]
 800639c:	e02f      	b.n	80063fe <HAL_RCC_OscConfig+0x8b2>
 800639e:	1d3b      	adds	r3, r7, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10c      	bne.n	80063c2 <HAL_RCC_OscConfig+0x876>
 80063a8:	4b34      	ldr	r3, [pc, #208]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	4a33      	ldr	r2, [pc, #204]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	6213      	str	r3, [r2, #32]
 80063b4:	4b31      	ldr	r3, [pc, #196]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4a30      	ldr	r2, [pc, #192]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063ba:	f023 0304 	bic.w	r3, r3, #4
 80063be:	6213      	str	r3, [r2, #32]
 80063c0:	e01d      	b.n	80063fe <HAL_RCC_OscConfig+0x8b2>
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCC_OscConfig+0x89a>
 80063cc:	4b2b      	ldr	r3, [pc, #172]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	4a2a      	ldr	r2, [pc, #168]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	6213      	str	r3, [r2, #32]
 80063d8:	4b28      	ldr	r3, [pc, #160]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	6213      	str	r3, [r2, #32]
 80063e4:	e00b      	b.n	80063fe <HAL_RCC_OscConfig+0x8b2>
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	4a24      	ldr	r2, [pc, #144]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	6213      	str	r3, [r2, #32]
 80063f2:	4b22      	ldr	r3, [pc, #136]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	4a21      	ldr	r2, [pc, #132]	; (800647c <HAL_RCC_OscConfig+0x930>)
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d06b      	beq.n	80064e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006408:	f7fc fe4e 	bl	80030a8 <HAL_GetTick>
 800640c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006410:	e00b      	b.n	800642a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fc fe49 	bl	80030a8 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006422:	4293      	cmp	r3, r2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e291      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 800642a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800642e:	2202      	movs	r2, #2
 8006430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006432:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	fa93 f2a3 	rbit	r2, r3
 800643c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006446:	2202      	movs	r2, #2
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	fa93 f2a3 	rbit	r2, r3
 8006454:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006458:	601a      	str	r2, [r3, #0]
  return result;
 800645a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800645e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f043 0302 	orr.w	r3, r3, #2
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d109      	bne.n	8006488 <HAL_RCC_OscConfig+0x93c>
 8006474:	4b01      	ldr	r3, [pc, #4]	; (800647c <HAL_RCC_OscConfig+0x930>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	e014      	b.n	80064a4 <HAL_RCC_OscConfig+0x958>
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000
 8006480:	10908120 	.word	0x10908120
 8006484:	40007000 	.word	0x40007000
 8006488:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800648c:	2202      	movs	r2, #2
 800648e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	fa93 f2a3 	rbit	r2, r3
 800649a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	4bbb      	ldr	r3, [pc, #748]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80064a8:	2102      	movs	r1, #2
 80064aa:	6011      	str	r1, [r2, #0]
 80064ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	fa92 f1a2 	rbit	r1, r2
 80064b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80064ba:	6011      	str	r1, [r2, #0]
  return result;
 80064bc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	fab2 f282 	clz	r2, r2
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	f002 021f 	and.w	r2, r2, #31
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f202 	lsl.w	r2, r1, r2
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d099      	beq.n	8006412 <HAL_RCC_OscConfig+0x8c6>
 80064de:	e063      	b.n	80065a8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e0:	f7fc fde2 	bl	80030a8 <HAL_GetTick>
 80064e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e8:	e00b      	b.n	8006502 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fc fddd 	bl	80030a8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e225      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 8006502:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006506:	2202      	movs	r2, #2
 8006508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	fa93 f2a3 	rbit	r2, r3
 8006514:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800651e:	2202      	movs	r2, #2
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	fa93 f2a3 	rbit	r2, r3
 800652c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006530:	601a      	str	r2, [r3, #0]
  return result;
 8006532:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006538:	fab3 f383 	clz	r3, r3
 800653c:	b2db      	uxtb	r3, r3
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d102      	bne.n	8006552 <HAL_RCC_OscConfig+0xa06>
 800654c:	4b90      	ldr	r3, [pc, #576]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	e00d      	b.n	800656e <HAL_RCC_OscConfig+0xa22>
 8006552:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006556:	2202      	movs	r2, #2
 8006558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	fa93 f2a3 	rbit	r2, r3
 8006564:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	4b89      	ldr	r3, [pc, #548]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006572:	2102      	movs	r1, #2
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	fa92 f1a2 	rbit	r1, r2
 8006580:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006584:	6011      	str	r1, [r2, #0]
  return result;
 8006586:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	fab2 f282 	clz	r2, r2
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	f002 021f 	and.w	r2, r2, #31
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f202 	lsl.w	r2, r1, r2
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1a0      	bne.n	80064ea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d105      	bne.n	80065bc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b0:	4b77      	ldr	r3, [pc, #476]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	4a76      	ldr	r2, [pc, #472]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80065b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 81c2 	beq.w	800694c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c8:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 030c 	and.w	r3, r3, #12
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	f000 819c 	beq.w	800690e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	f040 8114 	bne.w	800680a <HAL_RCC_OscConfig+0xcbe>
 80065e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80065e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	fa93 f2a3 	rbit	r2, r3
 80065f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80065fa:	601a      	str	r2, [r3, #0]
  return result;
 80065fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006602:	fab3 f383 	clz	r3, r3
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800660c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	461a      	mov	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006618:	f7fc fd46 	bl	80030a8 <HAL_GetTick>
 800661c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006620:	e009      	b.n	8006636 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006622:	f7fc fd41 	bl	80030a8 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e18b      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 8006636:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800663a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800663e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	fa93 f2a3 	rbit	r2, r3
 800664a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800664e:	601a      	str	r2, [r3, #0]
  return result;
 8006650:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006656:	fab3 f383 	clz	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	d102      	bne.n	8006670 <HAL_RCC_OscConfig+0xb24>
 800666a:	4b49      	ldr	r3, [pc, #292]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	e01b      	b.n	80066a8 <HAL_RCC_OscConfig+0xb5c>
 8006670:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	fa93 f2a3 	rbit	r2, r3
 8006684:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800668e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	fa93 f2a3 	rbit	r2, r3
 800669e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80066ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	fa92 f1a2 	rbit	r1, r2
 80066bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80066c0:	6011      	str	r1, [r2, #0]
  return result;
 80066c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	fab2 f282 	clz	r2, r2
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	f042 0220 	orr.w	r2, r2, #32
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	f002 021f 	and.w	r2, r2, #31
 80066d8:	2101      	movs	r1, #1
 80066da:	fa01 f202 	lsl.w	r2, r1, r2
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d19e      	bne.n	8006622 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066e4:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	430b      	orrs	r3, r1
 80066fa:	4925      	ldr	r1, [pc, #148]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
 8006700:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	fa93 f2a3 	rbit	r2, r3
 8006714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006718:	601a      	str	r2, [r3, #0]
  return result;
 800671a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800671e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006720:	fab3 f383 	clz	r3, r3
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800672a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	461a      	mov	r2, r3
 8006732:	2301      	movs	r3, #1
 8006734:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006736:	f7fc fcb7 	bl	80030a8 <HAL_GetTick>
 800673a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800673e:	e009      	b.n	8006754 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006740:	f7fc fcb2 	bl	80030a8 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0fc      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 8006754:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800675c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	fa93 f2a3 	rbit	r2, r3
 8006768:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800676c:	601a      	str	r2, [r3, #0]
  return result;
 800676e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006772:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006774:	fab3 f383 	clz	r3, r3
 8006778:	b2db      	uxtb	r3, r3
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	b2db      	uxtb	r3, r3
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <HAL_RCC_OscConfig+0xc48>
 8006788:	4b01      	ldr	r3, [pc, #4]	; (8006790 <HAL_RCC_OscConfig+0xc44>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	e01e      	b.n	80067cc <HAL_RCC_OscConfig+0xc80>
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000
 8006794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800679c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	fa93 f2a3 	rbit	r2, r3
 80067a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	fa93 f2a3 	rbit	r2, r3
 80067c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	4b63      	ldr	r3, [pc, #396]	; (8006958 <HAL_RCC_OscConfig+0xe0c>)
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80067d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	fa92 f1a2 	rbit	r1, r2
 80067e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80067e4:	6011      	str	r1, [r2, #0]
  return result;
 80067e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	fab2 f282 	clz	r2, r2
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	f042 0220 	orr.w	r2, r2, #32
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	f002 021f 	and.w	r2, r2, #31
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006802:	4013      	ands	r3, r2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d09b      	beq.n	8006740 <HAL_RCC_OscConfig+0xbf4>
 8006808:	e0a0      	b.n	800694c <HAL_RCC_OscConfig+0xe00>
 800680a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800680e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	fa93 f2a3 	rbit	r2, r3
 800681e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006822:	601a      	str	r2, [r3, #0]
  return result;
 8006824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006828:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	461a      	mov	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006840:	f7fc fc32 	bl	80030a8 <HAL_GetTick>
 8006844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006848:	e009      	b.n	800685e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684a:	f7fc fc2d 	bl	80030a8 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e077      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
 800685e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	fa93 f2a3 	rbit	r2, r3
 8006872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006876:	601a      	str	r2, [r3, #0]
  return result;
 8006878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800687e:	fab3 f383 	clz	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d102      	bne.n	8006898 <HAL_RCC_OscConfig+0xd4c>
 8006892:	4b31      	ldr	r3, [pc, #196]	; (8006958 <HAL_RCC_OscConfig+0xe0c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	e01b      	b.n	80068d0 <HAL_RCC_OscConfig+0xd84>
 8006898:	f107 0320 	add.w	r3, r7, #32
 800689c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a2:	f107 0320 	add.w	r3, r7, #32
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	fa93 f2a3 	rbit	r2, r3
 80068ac:	f107 031c 	add.w	r3, r7, #28
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	f107 0318 	add.w	r3, r7, #24
 80068b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f107 0318 	add.w	r3, r7, #24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	fa93 f2a3 	rbit	r2, r3
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	4b22      	ldr	r3, [pc, #136]	; (8006958 <HAL_RCC_OscConfig+0xe0c>)
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	f107 0210 	add.w	r2, r7, #16
 80068d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	f107 0210 	add.w	r2, r7, #16
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	fa92 f1a2 	rbit	r1, r2
 80068e4:	f107 020c 	add.w	r2, r7, #12
 80068e8:	6011      	str	r1, [r2, #0]
  return result;
 80068ea:	f107 020c 	add.w	r2, r7, #12
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	fab2 f282 	clz	r2, r2
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	f042 0220 	orr.w	r2, r2, #32
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	f002 021f 	and.w	r2, r2, #31
 8006900:	2101      	movs	r1, #1
 8006902:	fa01 f202 	lsl.w	r2, r1, r2
 8006906:	4013      	ands	r3, r2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d19e      	bne.n	800684a <HAL_RCC_OscConfig+0xcfe>
 800690c:	e01e      	b.n	800694c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e018      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800691c:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <HAL_RCC_OscConfig+0xe0c>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006924:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	429a      	cmp	r2, r3
 8006934:	d108      	bne.n	8006948 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006936:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800693a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40021000 	.word	0x40021000

0800695c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b09e      	sub	sp, #120	; 0x78
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e162      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006974:	4b90      	ldr	r3, [pc, #576]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d910      	bls.n	80069a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b8d      	ldr	r3, [pc, #564]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0207 	bic.w	r2, r3, #7
 800698a:	498b      	ldr	r1, [pc, #556]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b89      	ldr	r3, [pc, #548]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e14a      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b0:	4b82      	ldr	r3, [pc, #520]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	497f      	ldr	r1, [pc, #508]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80dc 	beq.w	8006b88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d13c      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xf6>
 80069d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e0:	fa93 f3a3 	rbit	r3, r3
 80069e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e8:	fab3 f383 	clz	r3, r3
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d102      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xa6>
 80069fc:	4b6f      	ldr	r3, [pc, #444]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	e00f      	b.n	8006a22 <HAL_RCC_ClockConfig+0xc6>
 8006a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a14:	663b      	str	r3, [r7, #96]	; 0x60
 8006a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a18:	fa93 f3a3 	rbit	r3, r3
 8006a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1e:	4b67      	ldr	r3, [pc, #412]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a2a:	fa92 f2a2 	rbit	r2, r2
 8006a2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a32:	fab2 f282 	clz	r2, r2
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	f042 0220 	orr.w	r2, r2, #32
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	f002 021f 	and.w	r2, r2, #31
 8006a42:	2101      	movs	r1, #1
 8006a44:	fa01 f202 	lsl.w	r2, r1, r2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d17b      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e0f3      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d13c      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x178>
 8006a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a62:	fa93 f3a3 	rbit	r3, r3
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a6a:	fab3 f383 	clz	r3, r3
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d102      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x128>
 8006a7e:	4b4f      	ldr	r3, [pc, #316]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	e00f      	b.n	8006aa4 <HAL_RCC_ClockConfig+0x148>
 8006a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8c:	fa93 f3a3 	rbit	r3, r3
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a96:	643b      	str	r3, [r7, #64]	; 0x40
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	fa93 f3a3 	rbit	r3, r3
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa0:	4b46      	ldr	r3, [pc, #280]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8006aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aac:	fa92 f2a2 	rbit	r2, r2
 8006ab0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab4:	fab2 f282 	clz	r2, r2
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	f042 0220 	orr.w	r2, r2, #32
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	f002 021f 	and.w	r2, r2, #31
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d13a      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0b2      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	fa93 f3a3 	rbit	r3, r3
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae2:	fab3 f383 	clz	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d102      	bne.n	8006afc <HAL_RCC_ClockConfig+0x1a0>
 8006af6:	4b31      	ldr	r3, [pc, #196]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	e00d      	b.n	8006b18 <HAL_RCC_ClockConfig+0x1bc>
 8006afc:	2302      	movs	r3, #2
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
 8006b08:	2302      	movs	r3, #2
 8006b0a:	623b      	str	r3, [r7, #32]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	fa93 f3a3 	rbit	r3, r3
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2202      	movs	r2, #2
 8006b1a:	61ba      	str	r2, [r7, #24]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	fa92 f2a2 	rbit	r2, r2
 8006b22:	617a      	str	r2, [r7, #20]
  return result;
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	fab2 f282 	clz	r2, r2
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	f042 0220 	orr.w	r2, r2, #32
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	f002 021f 	and.w	r2, r2, #31
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f202 	lsl.w	r2, r1, r2
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e079      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f023 0203 	bic.w	r2, r3, #3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	491a      	ldr	r1, [pc, #104]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b58:	f7fc faa6 	bl	80030a8 <HAL_GetTick>
 8006b5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b5e:	e00a      	b.n	8006b76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b60:	f7fc faa2 	bl	80030a8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e061      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b76:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <HAL_RCC_ClockConfig+0x260>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 020c 	and.w	r2, r3, #12
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d1eb      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d214      	bcs.n	8006bc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 0207 	bic.w	r2, r3, #7
 8006b9e:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_RCC_ClockConfig+0x25c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e040      	b.n	8006c3a <HAL_RCC_ClockConfig+0x2de>
 8006bb8:	40022000 	.word	0x40022000
 8006bbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <HAL_RCC_ClockConfig+0x2e8>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	491a      	ldr	r1, [pc, #104]	; (8006c44 <HAL_RCC_ClockConfig+0x2e8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <HAL_RCC_ClockConfig+0x2e8>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4912      	ldr	r1, [pc, #72]	; (8006c44 <HAL_RCC_ClockConfig+0x2e8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006bfe:	f000 f829 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8006c02:	4601      	mov	r1, r0
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <HAL_RCC_ClockConfig+0x2e8>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c0c:	22f0      	movs	r2, #240	; 0xf0
 8006c0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	fa92 f2a2 	rbit	r2, r2
 8006c16:	60fa      	str	r2, [r7, #12]
  return result;
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	fab2 f282 	clz	r2, r2
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	40d3      	lsrs	r3, r2
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <HAL_RCC_ClockConfig+0x2ec>)
 8006c24:	5cd3      	ldrb	r3, [r2, r3]
 8006c26:	fa21 f303 	lsr.w	r3, r1, r3
 8006c2a:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <HAL_RCC_ClockConfig+0x2f0>)
 8006c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <HAL_RCC_ClockConfig+0x2f4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fc f8a6 	bl	8002d84 <HAL_InitTick>
  
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3778      	adds	r7, #120	; 0x78
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	0800f648 	.word	0x0800f648
 8006c4c:	2000000c 	.word	0x2000000c
 8006c50:	20000010 	.word	0x20000010

08006c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b08b      	sub	sp, #44	; 0x2c
 8006c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	2300      	movs	r3, #0
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006c6e:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d002      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x30>
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0x36>
 8006c82:	e03c      	b.n	8006cfe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c84:	4b24      	ldr	r3, [pc, #144]	; (8006d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c86:	623b      	str	r3, [r7, #32]
      break;
 8006c88:	e03c      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006c94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	fa92 f2a2 	rbit	r2, r2
 8006c9c:	607a      	str	r2, [r7, #4]
  return result;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	fab2 f282 	clz	r2, r2
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	40d3      	lsrs	r3, r2
 8006ca8:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006caa:	5cd3      	ldrb	r3, [r2, r3]
 8006cac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006cae:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	220f      	movs	r2, #15
 8006cb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	fa92 f2a2 	rbit	r2, r2
 8006cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	fab2 f282 	clz	r2, r2
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	40d3      	lsrs	r3, r2
 8006ccc:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006cdc:	4a0e      	ldr	r2, [pc, #56]	; (8006d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
 8006cec:	e004      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	623b      	str	r3, [r7, #32]
      break;
 8006cfc:	e002      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006d00:	623b      	str	r3, [r7, #32]
      break;
 8006d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d04:	6a3b      	ldr	r3, [r7, #32]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	372c      	adds	r7, #44	; 0x2c
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40021000 	.word	0x40021000
 8006d18:	007a1200 	.word	0x007a1200
 8006d1c:	0800f660 	.word	0x0800f660
 8006d20:	0800f670 	.word	0x0800f670
 8006d24:	003d0900 	.word	0x003d0900

08006d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000000c 	.word	0x2000000c

08006d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006d46:	f7ff ffef 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	fa92 f2a2 	rbit	r2, r2
 8006d60:	603a      	str	r2, [r7, #0]
  return result;
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	fab2 f282 	clz	r2, r2
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	40d3      	lsrs	r3, r2
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	0800f658 	.word	0x0800f658

08006d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006d8a:	f7ff ffcd 	bl	8006d28 <HAL_RCC_GetHCLKFreq>
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006d9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	fa92 f2a2 	rbit	r2, r2
 8006da4:	603a      	str	r2, [r7, #0]
  return result;
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	fab2 f282 	clz	r2, r2
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	40d3      	lsrs	r3, r2
 8006db0:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
 8006db4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	0800f658 	.word	0x0800f658

08006dc8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	220f      	movs	r2, #15
 8006dd6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 0203 	and.w	r2, r3, #3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCC_GetClockConfig+0x5c>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	08db      	lsrs	r3, r3, #3
 8006e02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <HAL_RCC_GetClockConfig+0x60>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0207 	and.w	r2, r3, #7
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	40022000 	.word	0x40022000

08006e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b092      	sub	sp, #72	; 0x48
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80d4 	beq.w	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e50:	4b4e      	ldr	r3, [pc, #312]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10e      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e5c:	4b4b      	ldr	r3, [pc, #300]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	4a4a      	ldr	r2, [pc, #296]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e66:	61d3      	str	r3, [r2, #28]
 8006e68:	4b48      	ldr	r3, [pc, #288]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7a:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d118      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e86:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a41      	ldr	r2, [pc, #260]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e92:	f7fc f909 	bl	80030a8 <HAL_GetTick>
 8006e96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e9a:	f7fc f905 	bl	80030a8 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b64      	cmp	r3, #100	; 0x64
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e169      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eac:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eb8:	4b34      	ldr	r3, [pc, #208]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8084 	beq.w	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d07c      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ed8:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	fa93 f3a3 	rbit	r3, r3
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ef2:	fab3 f383 	clz	r3, r3
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b26      	ldr	r3, [pc, #152]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	461a      	mov	r2, r3
 8006f02:	2301      	movs	r3, #1
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	fa93 f3a3 	rbit	r3, r3
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f16:	fab3 f383 	clz	r3, r3
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	461a      	mov	r2, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d04b      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fc f8b5 	bl	80030a8 <HAL_GetTick>
 8006f3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f40:	e00a      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f42:	f7fc f8b1 	bl	80030a8 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e113      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
 8006f64:	2302      	movs	r3, #2
 8006f66:	623b      	str	r3, [r7, #32]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	fa93 f3a3 	rbit	r3, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
  return result;
 8006f70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f72:	fab3 f383 	clz	r3, r3
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f043 0302 	orr.w	r3, r3, #2
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d108      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f86:	4b01      	ldr	r3, [pc, #4]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	e00d      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	40007000 	.word	0x40007000
 8006f94:	10908100 	.word	0x10908100
 8006f98:	2302      	movs	r3, #2
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	fa93 f3a3 	rbit	r3, r3
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	4b78      	ldr	r3, [pc, #480]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2202      	movs	r2, #2
 8006faa:	613a      	str	r2, [r7, #16]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	fa92 f2a2 	rbit	r2, r2
 8006fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	fab2 f282 	clz	r2, r2
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	f002 021f 	and.w	r2, r2, #31
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0b7      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fd2:	4b6d      	ldr	r3, [pc, #436]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	496a      	ldr	r1, [pc, #424]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fec:	4b66      	ldr	r3, [pc, #408]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4a65      	ldr	r2, [pc, #404]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007004:	4b60      	ldr	r3, [pc, #384]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	f023 0203 	bic.w	r2, r3, #3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	495d      	ldr	r1, [pc, #372]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d008      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007022:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	4956      	ldr	r1, [pc, #344]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007030:	4313      	orrs	r3, r2
 8007032:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007040:	4b51      	ldr	r3, [pc, #324]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	494e      	ldr	r1, [pc, #312]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800704e:	4313      	orrs	r3, r2
 8007050:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800705e:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f023 0210 	bic.w	r2, r3, #16
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	4947      	ldr	r1, [pc, #284]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800707c:	4b42      	ldr	r3, [pc, #264]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	493f      	ldr	r1, [pc, #252]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f023 0220 	bic.w	r2, r3, #32
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	4938      	ldr	r1, [pc, #224]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070b8:	4b33      	ldr	r3, [pc, #204]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	4930      	ldr	r1, [pc, #192]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0310 	and.w	r3, r3, #16
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070d6:	4b2c      	ldr	r3, [pc, #176]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	4929      	ldr	r1, [pc, #164]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070f4:	4b24      	ldr	r3, [pc, #144]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	4921      	ldr	r1, [pc, #132]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007102:	4313      	orrs	r3, r2
 8007104:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007112:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	491a      	ldr	r1, [pc, #104]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007130:	4b15      	ldr	r3, [pc, #84]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	4912      	ldr	r1, [pc, #72]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	490b      	ldr	r1, [pc, #44]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800715c:	4313      	orrs	r3, r2
 800715e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d008      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007178:	4903      	ldr	r1, [pc, #12]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3748      	adds	r7, #72	; 0x48
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40021000 	.word	0x40021000

0800718c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e049      	b.n	8007232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fb fc86 	bl	8002ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f000 ffd8 	bl	8008180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d001      	beq.n	8007254 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e042      	b.n	80072da <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a21      	ldr	r2, [pc, #132]	; (80072e8 <HAL_TIM_Base_Start+0xac>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <HAL_TIM_Base_Start+0x5c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d013      	beq.n	8007298 <HAL_TIM_Base_Start+0x5c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <HAL_TIM_Base_Start+0xb0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_TIM_Base_Start+0x5c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <HAL_TIM_Base_Start+0xb4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_TIM_Base_Start+0x5c>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <HAL_TIM_Base_Start+0xb8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <HAL_TIM_Base_Start+0x5c>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <HAL_TIM_Base_Start+0xbc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d115      	bne.n	80072c4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	4b17      	ldr	r3, [pc, #92]	; (80072fc <HAL_TIM_Base_Start+0xc0>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b06      	cmp	r3, #6
 80072a8:	d015      	beq.n	80072d6 <HAL_TIM_Base_Start+0x9a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b0:	d011      	beq.n	80072d6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	e008      	b.n	80072d6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e000      	b.n	80072d8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40013400 	.word	0x40013400
 80072f8:	40014000 	.word	0x40014000
 80072fc:	00010007 	.word	0x00010007

08007300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e04a      	b.n	80073ae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_TIM_Base_Start_IT+0xbc>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x6c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007342:	d013      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x6c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1d      	ldr	r2, [pc, #116]	; (80073c0 <HAL_TIM_Base_Start_IT+0xc0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x6c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1c      	ldr	r2, [pc, #112]	; (80073c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x6c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1a      	ldr	r2, [pc, #104]	; (80073c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x6c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a19      	ldr	r2, [pc, #100]	; (80073cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d115      	bne.n	8007398 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d015      	beq.n	80073aa <HAL_TIM_Base_Start_IT+0xaa>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007384:	d011      	beq.n	80073aa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007396:	e008      	b.n	80073aa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e000      	b.n	80073ac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	00010007 	.word	0x00010007

080073d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e049      	b.n	800747a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fb fbf6 	bl	8002bec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f000 feb4 	bl	8008180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e049      	b.n	8007528 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fb fad5 	bl	8002a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f000 fe5d 	bl	8008180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <HAL_TIM_PWM_Start+0x24>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	bf14      	ite	ne
 800754c:	2301      	movne	r3, #1
 800754e:	2300      	moveq	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	e03c      	b.n	80075ce <HAL_TIM_PWM_Start+0x9e>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b04      	cmp	r3, #4
 8007558:	d109      	bne.n	800756e <HAL_TIM_PWM_Start+0x3e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b01      	cmp	r3, #1
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	e02f      	b.n	80075ce <HAL_TIM_PWM_Start+0x9e>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d109      	bne.n	8007588 <HAL_TIM_PWM_Start+0x58>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	bf14      	ite	ne
 8007580:	2301      	movne	r3, #1
 8007582:	2300      	moveq	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	e022      	b.n	80075ce <HAL_TIM_PWM_Start+0x9e>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d109      	bne.n	80075a2 <HAL_TIM_PWM_Start+0x72>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	e015      	b.n	80075ce <HAL_TIM_PWM_Start+0x9e>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b10      	cmp	r3, #16
 80075a6:	d109      	bne.n	80075bc <HAL_TIM_PWM_Start+0x8c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	e008      	b.n	80075ce <HAL_TIM_PWM_Start+0x9e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e097      	b.n	8007706 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_PWM_Start+0xb6>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075e4:	e023      	b.n	800762e <HAL_TIM_PWM_Start+0xfe>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_PWM_Start+0xc6>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f4:	e01b      	b.n	800762e <HAL_TIM_PWM_Start+0xfe>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0xd6>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007604:	e013      	b.n	800762e <HAL_TIM_PWM_Start+0xfe>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0xe6>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007614:	e00b      	b.n	800762e <HAL_TIM_PWM_Start+0xfe>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b10      	cmp	r3, #16
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0xf6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007624:	e003      	b.n	800762e <HAL_TIM_PWM_Start+0xfe>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fac0 	bl	8008bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a33      	ldr	r2, [pc, #204]	; (8007710 <HAL_TIM_PWM_Start+0x1e0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIM_PWM_Start+0x13e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a32      	ldr	r2, [pc, #200]	; (8007714 <HAL_TIM_PWM_Start+0x1e4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIM_PWM_Start+0x13e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a30      	ldr	r2, [pc, #192]	; (8007718 <HAL_TIM_PWM_Start+0x1e8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIM_PWM_Start+0x13e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a2f      	ldr	r2, [pc, #188]	; (800771c <HAL_TIM_PWM_Start+0x1ec>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIM_PWM_Start+0x13e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	; (8007720 <HAL_TIM_PWM_Start+0x1f0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d101      	bne.n	8007672 <HAL_TIM_PWM_Start+0x142>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <HAL_TIM_PWM_Start+0x144>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007686:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a20      	ldr	r2, [pc, #128]	; (8007710 <HAL_TIM_PWM_Start+0x1e0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x194>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d013      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x194>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a20      	ldr	r2, [pc, #128]	; (8007724 <HAL_TIM_PWM_Start+0x1f4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x194>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <HAL_TIM_PWM_Start+0x1f8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x194>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a17      	ldr	r2, [pc, #92]	; (8007714 <HAL_TIM_PWM_Start+0x1e4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x194>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a16      	ldr	r2, [pc, #88]	; (8007718 <HAL_TIM_PWM_Start+0x1e8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d115      	bne.n	80076f0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	4b18      	ldr	r3, [pc, #96]	; (800772c <HAL_TIM_PWM_Start+0x1fc>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d015      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1d2>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d011      	beq.n	8007702 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ee:	e008      	b.n	8007702 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e000      	b.n	8007704 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40013400 	.word	0x40013400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	00010007 	.word	0x00010007

08007730 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fa3a 	bl	8008bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a3e      	ldr	r2, [pc, #248]	; (8007848 <HAL_TIM_PWM_Stop+0x118>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_TIM_PWM_Stop+0x4a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a3d      	ldr	r2, [pc, #244]	; (800784c <HAL_TIM_PWM_Stop+0x11c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_TIM_PWM_Stop+0x4a>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a3b      	ldr	r2, [pc, #236]	; (8007850 <HAL_TIM_PWM_Stop+0x120>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_TIM_PWM_Stop+0x4a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a3a      	ldr	r2, [pc, #232]	; (8007854 <HAL_TIM_PWM_Stop+0x124>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_TIM_PWM_Stop+0x4a>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a38      	ldr	r2, [pc, #224]	; (8007858 <HAL_TIM_PWM_Stop+0x128>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d101      	bne.n	800777e <HAL_TIM_PWM_Stop+0x4e>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <HAL_TIM_PWM_Stop+0x50>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d017      	beq.n	80077b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	f241 1311 	movw	r3, #4369	; 0x1111
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10f      	bne.n	80077b4 <HAL_TIM_PWM_Stop+0x84>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1a      	ldr	r2, [r3, #32]
 800779a:	f240 4344 	movw	r3, #1092	; 0x444
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d107      	bne.n	80077b4 <HAL_TIM_PWM_Stop+0x84>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10f      	bne.n	80077e4 <HAL_TIM_PWM_Stop+0xb4>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6a1a      	ldr	r2, [r3, #32]
 80077ca:	f240 4344 	movw	r3, #1092	; 0x444
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <HAL_TIM_PWM_Stop+0xb4>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <HAL_TIM_PWM_Stop+0xc4>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f2:	e023      	b.n	800783c <HAL_TIM_PWM_Stop+0x10c>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d104      	bne.n	8007804 <HAL_TIM_PWM_Stop+0xd4>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007802:	e01b      	b.n	800783c <HAL_TIM_PWM_Stop+0x10c>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b08      	cmp	r3, #8
 8007808:	d104      	bne.n	8007814 <HAL_TIM_PWM_Stop+0xe4>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007812:	e013      	b.n	800783c <HAL_TIM_PWM_Stop+0x10c>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b0c      	cmp	r3, #12
 8007818:	d104      	bne.n	8007824 <HAL_TIM_PWM_Stop+0xf4>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007822:	e00b      	b.n	800783c <HAL_TIM_PWM_Stop+0x10c>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b10      	cmp	r3, #16
 8007828:	d104      	bne.n	8007834 <HAL_TIM_PWM_Stop+0x104>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007832:	e003      	b.n	800783c <HAL_TIM_PWM_Stop+0x10c>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e049      	b.n	8007902 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f841 	bl	800790a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f000 fc70 	bl	8008180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d122      	bne.n	800797a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b02      	cmp	r3, #2
 8007940:	d11b      	bne.n	800797a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0202 	mvn.w	r2, #2
 800794a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fbf8 	bl	8008156 <HAL_TIM_IC_CaptureCallback>
 8007966:	e005      	b.n	8007974 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fbea 	bl	8008142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fa fa72 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b04      	cmp	r3, #4
 8007986:	d122      	bne.n	80079ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b04      	cmp	r3, #4
 8007994:	d11b      	bne.n	80079ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f06f 0204 	mvn.w	r2, #4
 800799e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fbce 	bl	8008156 <HAL_TIM_IC_CaptureCallback>
 80079ba:	e005      	b.n	80079c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fbc0 	bl	8008142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fa fa48 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d122      	bne.n	8007a22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d11b      	bne.n	8007a22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f06f 0208 	mvn.w	r2, #8
 80079f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2204      	movs	r2, #4
 80079f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fba4 	bl	8008156 <HAL_TIM_IC_CaptureCallback>
 8007a0e:	e005      	b.n	8007a1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fb96 	bl	8008142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fa fa1e 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d122      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d11b      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f06f 0210 	mvn.w	r2, #16
 8007a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb7a 	bl	8008156 <HAL_TIM_IC_CaptureCallback>
 8007a62:	e005      	b.n	8007a70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb6c 	bl	8008142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fa f9f4 	bl	8001e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d10e      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0201 	mvn.w	r2, #1
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fa fcab 	bl	80023f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d10e      	bne.n	8007ace <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d107      	bne.n	8007ace <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f9a5 	bl	8008e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007adc:	d10e      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f998 	bl	8008e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb21 	bl	800816a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0220 	mvn.w	r2, #32
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 f958 	bl	8008e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e066      	b.n	8007c48 <HAL_TIM_OC_ConfigChannel+0xec>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b14      	cmp	r3, #20
 8007b86:	d857      	bhi.n	8007c38 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007c39 	.word	0x08007c39
 8007b98:	08007c39 	.word	0x08007c39
 8007b9c:	08007c39 	.word	0x08007c39
 8007ba0:	08007bf3 	.word	0x08007bf3
 8007ba4:	08007c39 	.word	0x08007c39
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c39 	.word	0x08007c39
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c0f 	.word	0x08007c0f
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c39 	.word	0x08007c39
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c2b 	.word	0x08007c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb58 	bl	80082a0 <TIM_OC1_SetConfig>
      break;
 8007bf0:	e025      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fbe1 	bl	80083c0 <TIM_OC2_SetConfig>
      break;
 8007bfe:	e01e      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fc64 	bl	80084d4 <TIM_OC3_SetConfig>
      break;
 8007c0c:	e017      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fce5 	bl	80085e4 <TIM_OC4_SetConfig>
      break;
 8007c1a:	e010      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fd48 	bl	80086b8 <TIM_OC5_SetConfig>
      break;
 8007c28:	e009      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fda5 	bl	8008780 <TIM_OC6_SetConfig>
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e088      	b.n	8007d80 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f000 fdde 	bl	800884c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 020c 	bic.w	r2, r2, #12
 8007c9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6999      	ldr	r1, [r3, #24]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	619a      	str	r2, [r3, #24]
 8007cb2:	e060      	b.n	8007d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d11c      	bne.n	8007cf4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f000 fe56 	bl	800897a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6999      	ldr	r1, [r3, #24]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	021a      	lsls	r2, r3, #8
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	619a      	str	r2, [r3, #24]
 8007cf2:	e040      	b.n	8007d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d11b      	bne.n	8007d32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f000 fea3 	bl	8008a54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 020c 	bic.w	r2, r2, #12
 8007d1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69d9      	ldr	r1, [r3, #28]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	61da      	str	r2, [r3, #28]
 8007d30:	e021      	b.n	8007d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b0c      	cmp	r3, #12
 8007d36:	d11c      	bne.n	8007d72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f000 fec0 	bl	8008acc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69da      	ldr	r2, [r3, #28]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69d9      	ldr	r1, [r3, #28]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	021a      	lsls	r2, r3, #8
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	61da      	str	r2, [r3, #28]
 8007d70:	e001      	b.n	8007d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e0ff      	b.n	8007fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b14      	cmp	r3, #20
 8007db2:	f200 80f0 	bhi.w	8007f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007f97 	.word	0x08007f97
 8007dc4:	08007f97 	.word	0x08007f97
 8007dc8:	08007f97 	.word	0x08007f97
 8007dcc:	08007e51 	.word	0x08007e51
 8007dd0:	08007f97 	.word	0x08007f97
 8007dd4:	08007f97 	.word	0x08007f97
 8007dd8:	08007f97 	.word	0x08007f97
 8007ddc:	08007e93 	.word	0x08007e93
 8007de0:	08007f97 	.word	0x08007f97
 8007de4:	08007f97 	.word	0x08007f97
 8007de8:	08007f97 	.word	0x08007f97
 8007dec:	08007ed3 	.word	0x08007ed3
 8007df0:	08007f97 	.word	0x08007f97
 8007df4:	08007f97 	.word	0x08007f97
 8007df8:	08007f97 	.word	0x08007f97
 8007dfc:	08007f15 	.word	0x08007f15
 8007e00:	08007f97 	.word	0x08007f97
 8007e04:	08007f97 	.word	0x08007f97
 8007e08:	08007f97 	.word	0x08007f97
 8007e0c:	08007f55 	.word	0x08007f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fa42 	bl	80082a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0208 	orr.w	r2, r2, #8
 8007e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0204 	bic.w	r2, r2, #4
 8007e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6999      	ldr	r1, [r3, #24]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	619a      	str	r2, [r3, #24]
      break;
 8007e4e:	e0a5      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fab2 	bl	80083c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	699a      	ldr	r2, [r3, #24]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6999      	ldr	r1, [r3, #24]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	021a      	lsls	r2, r3, #8
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	619a      	str	r2, [r3, #24]
      break;
 8007e90:	e084      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fb1b 	bl	80084d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0208 	orr.w	r2, r2, #8
 8007eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69da      	ldr	r2, [r3, #28]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0204 	bic.w	r2, r2, #4
 8007ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69d9      	ldr	r1, [r3, #28]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	61da      	str	r2, [r3, #28]
      break;
 8007ed0:	e064      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fb83 	bl	80085e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69d9      	ldr	r1, [r3, #28]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	021a      	lsls	r2, r3, #8
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	61da      	str	r2, [r3, #28]
      break;
 8007f12:	e043      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fbcc 	bl	80086b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0208 	orr.w	r2, r2, #8
 8007f2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0204 	bic.w	r2, r2, #4
 8007f3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f52:	e023      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fc10 	bl	8008780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f94:	e002      	b.n	8007f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop

08007fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIM_ConfigClockSource+0x1c>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e0b6      	b.n	800813a <HAL_TIM_ConfigClockSource+0x18a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008008:	d03e      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0xd8>
 800800a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800e:	f200 8087 	bhi.w	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008016:	f000 8086 	beq.w	8008126 <HAL_TIM_ConfigClockSource+0x176>
 800801a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801e:	d87f      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008020:	2b70      	cmp	r3, #112	; 0x70
 8008022:	d01a      	beq.n	800805a <HAL_TIM_ConfigClockSource+0xaa>
 8008024:	2b70      	cmp	r3, #112	; 0x70
 8008026:	d87b      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008028:	2b60      	cmp	r3, #96	; 0x60
 800802a:	d050      	beq.n	80080ce <HAL_TIM_ConfigClockSource+0x11e>
 800802c:	2b60      	cmp	r3, #96	; 0x60
 800802e:	d877      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008030:	2b50      	cmp	r3, #80	; 0x50
 8008032:	d03c      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0xfe>
 8008034:	2b50      	cmp	r3, #80	; 0x50
 8008036:	d873      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d058      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x13e>
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d86f      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008040:	2b30      	cmp	r3, #48	; 0x30
 8008042:	d064      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x15e>
 8008044:	2b30      	cmp	r3, #48	; 0x30
 8008046:	d86b      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008048:	2b20      	cmp	r3, #32
 800804a:	d060      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x15e>
 800804c:	2b20      	cmp	r3, #32
 800804e:	d867      	bhi.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d05c      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x15e>
 8008054:	2b10      	cmp	r3, #16
 8008056:	d05a      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x15e>
 8008058:	e062      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6899      	ldr	r1, [r3, #8]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f000 fd87 	bl	8008b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800807c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	609a      	str	r2, [r3, #8]
      break;
 8008086:	e04f      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6899      	ldr	r1, [r3, #8]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f000 fd70 	bl	8008b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080aa:	609a      	str	r2, [r3, #8]
      break;
 80080ac:	e03c      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6859      	ldr	r1, [r3, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f000 fc2e 	bl	800891c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2150      	movs	r1, #80	; 0x50
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fd3d 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 80080cc:	e02c      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6859      	ldr	r1, [r3, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	461a      	mov	r2, r3
 80080dc:	f000 fc8a 	bl	80089f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2160      	movs	r1, #96	; 0x60
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fd2d 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 80080ec:	e01c      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 fc0e 	bl	800891c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2140      	movs	r1, #64	; 0x40
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fd1d 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 800810c:	e00c      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f000 fd14 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 800811e:	e003      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
      break;
 8008124:	e000      	b.n	8008128 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a3c      	ldr	r2, [pc, #240]	; (8008284 <TIM_Base_SetConfig+0x104>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_Base_SetConfig+0x38>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0x38>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a39      	ldr	r2, [pc, #228]	; (8008288 <TIM_Base_SetConfig+0x108>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0x38>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a38      	ldr	r2, [pc, #224]	; (800828c <TIM_Base_SetConfig+0x10c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0x38>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a37      	ldr	r2, [pc, #220]	; (8008290 <TIM_Base_SetConfig+0x110>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d108      	bne.n	80081ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <TIM_Base_SetConfig+0x104>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01b      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d8:	d017      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2a      	ldr	r2, [pc, #168]	; (8008288 <TIM_Base_SetConfig+0x108>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a29      	ldr	r2, [pc, #164]	; (800828c <TIM_Base_SetConfig+0x10c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00f      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a28      	ldr	r2, [pc, #160]	; (8008290 <TIM_Base_SetConfig+0x110>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00b      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a27      	ldr	r2, [pc, #156]	; (8008294 <TIM_Base_SetConfig+0x114>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d007      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a26      	ldr	r2, [pc, #152]	; (8008298 <TIM_Base_SetConfig+0x118>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d003      	beq.n	800820a <TIM_Base_SetConfig+0x8a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a25      	ldr	r2, [pc, #148]	; (800829c <TIM_Base_SetConfig+0x11c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d108      	bne.n	800821c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a10      	ldr	r2, [pc, #64]	; (8008284 <TIM_Base_SetConfig+0x104>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00f      	beq.n	8008268 <TIM_Base_SetConfig+0xe8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a11      	ldr	r2, [pc, #68]	; (8008290 <TIM_Base_SetConfig+0x110>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <TIM_Base_SetConfig+0xe8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a10      	ldr	r2, [pc, #64]	; (8008294 <TIM_Base_SetConfig+0x114>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <TIM_Base_SetConfig+0xe8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a0f      	ldr	r2, [pc, #60]	; (8008298 <TIM_Base_SetConfig+0x118>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_Base_SetConfig+0xe8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <TIM_Base_SetConfig+0x11c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d103      	bne.n	8008270 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	615a      	str	r2, [r3, #20]
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40012c00 	.word	0x40012c00
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40013400 	.word	0x40013400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800

080082a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f023 0201 	bic.w	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f023 0302 	bic.w	r3, r3, #2
 80082ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <TIM_OC1_SetConfig+0x10c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00f      	beq.n	8008320 <TIM_OC1_SetConfig+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a2b      	ldr	r2, [pc, #172]	; (80083b0 <TIM_OC1_SetConfig+0x110>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d00b      	beq.n	8008320 <TIM_OC1_SetConfig+0x80>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <TIM_OC1_SetConfig+0x114>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d007      	beq.n	8008320 <TIM_OC1_SetConfig+0x80>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <TIM_OC1_SetConfig+0x118>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC1_SetConfig+0x80>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a28      	ldr	r2, [pc, #160]	; (80083bc <TIM_OC1_SetConfig+0x11c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10c      	bne.n	800833a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f023 0308 	bic.w	r3, r3, #8
 8008326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	4313      	orrs	r3, r2
 8008330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f023 0304 	bic.w	r3, r3, #4
 8008338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1b      	ldr	r2, [pc, #108]	; (80083ac <TIM_OC1_SetConfig+0x10c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <TIM_OC1_SetConfig+0xc2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <TIM_OC1_SetConfig+0x110>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00b      	beq.n	8008362 <TIM_OC1_SetConfig+0xc2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <TIM_OC1_SetConfig+0x114>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <TIM_OC1_SetConfig+0xc2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <TIM_OC1_SetConfig+0x118>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC1_SetConfig+0xc2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a17      	ldr	r2, [pc, #92]	; (80083bc <TIM_OC1_SetConfig+0x11c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d111      	bne.n	8008386 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	621a      	str	r2, [r3, #32]
}
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	40012c00 	.word	0x40012c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400
 80083bc:	40014800 	.word	0x40014800

080083c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	f023 0210 	bic.w	r2, r3, #16
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	4313      	orrs	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 0320 	bic.w	r3, r3, #32
 800840e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a28      	ldr	r2, [pc, #160]	; (80084c0 <TIM_OC2_SetConfig+0x100>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d003      	beq.n	800842c <TIM_OC2_SetConfig+0x6c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a27      	ldr	r2, [pc, #156]	; (80084c4 <TIM_OC2_SetConfig+0x104>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d10d      	bne.n	8008448 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1d      	ldr	r2, [pc, #116]	; (80084c0 <TIM_OC2_SetConfig+0x100>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00f      	beq.n	8008470 <TIM_OC2_SetConfig+0xb0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <TIM_OC2_SetConfig+0x104>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00b      	beq.n	8008470 <TIM_OC2_SetConfig+0xb0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <TIM_OC2_SetConfig+0x108>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d007      	beq.n	8008470 <TIM_OC2_SetConfig+0xb0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1a      	ldr	r2, [pc, #104]	; (80084cc <TIM_OC2_SetConfig+0x10c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_OC2_SetConfig+0xb0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <TIM_OC2_SetConfig+0x110>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d113      	bne.n	8008498 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008476:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4313      	orrs	r3, r2
 800848a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	621a      	str	r2, [r3, #32]
}
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800

080084d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <TIM_OC3_SetConfig+0xfc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <TIM_OC3_SetConfig+0x6a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <TIM_OC3_SetConfig+0x100>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d10d      	bne.n	800855a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008558:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1c      	ldr	r2, [pc, #112]	; (80085d0 <TIM_OC3_SetConfig+0xfc>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00f      	beq.n	8008582 <TIM_OC3_SetConfig+0xae>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <TIM_OC3_SetConfig+0x100>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00b      	beq.n	8008582 <TIM_OC3_SetConfig+0xae>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <TIM_OC3_SetConfig+0x104>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d007      	beq.n	8008582 <TIM_OC3_SetConfig+0xae>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a19      	ldr	r2, [pc, #100]	; (80085dc <TIM_OC3_SetConfig+0x108>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC3_SetConfig+0xae>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a18      	ldr	r2, [pc, #96]	; (80085e0 <TIM_OC3_SetConfig+0x10c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d113      	bne.n	80085aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	621a      	str	r2, [r3, #32]
}
 80085c4:	bf00      	nop
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40012c00 	.word	0x40012c00
 80085d4:	40013400 	.word	0x40013400
 80085d8:	40014000 	.word	0x40014000
 80085dc:	40014400 	.word	0x40014400
 80085e0:	40014800 	.word	0x40014800

080085e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	031b      	lsls	r3, r3, #12
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <TIM_OC4_SetConfig+0xc0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00f      	beq.n	8008668 <TIM_OC4_SetConfig+0x84>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <TIM_OC4_SetConfig+0xc4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_OC4_SetConfig+0x84>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a16      	ldr	r2, [pc, #88]	; (80086ac <TIM_OC4_SetConfig+0xc8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_OC4_SetConfig+0x84>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <TIM_OC4_SetConfig+0xcc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_OC4_SetConfig+0x84>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <TIM_OC4_SetConfig+0xd0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d109      	bne.n	800867c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800866e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	019b      	lsls	r3, r3, #6
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4313      	orrs	r3, r2
 800867a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800

080086b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a17      	ldr	r2, [pc, #92]	; (800876c <TIM_OC5_SetConfig+0xb4>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00f      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a16      	ldr	r2, [pc, #88]	; (8008770 <TIM_OC5_SetConfig+0xb8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00b      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a15      	ldr	r2, [pc, #84]	; (8008774 <TIM_OC5_SetConfig+0xbc>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d007      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a14      	ldr	r2, [pc, #80]	; (8008778 <TIM_OC5_SetConfig+0xc0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d003      	beq.n	8008732 <TIM_OC5_SetConfig+0x7a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a13      	ldr	r2, [pc, #76]	; (800877c <TIM_OC5_SetConfig+0xc4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d109      	bne.n	8008746 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40012c00 	.word	0x40012c00
 8008770:	40013400 	.word	0x40013400
 8008774:	40014000 	.word	0x40014000
 8008778:	40014400 	.word	0x40014400
 800877c:	40014800 	.word	0x40014800

08008780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <TIM_OC6_SetConfig+0xb8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00f      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a17      	ldr	r2, [pc, #92]	; (800883c <TIM_OC6_SetConfig+0xbc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00b      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <TIM_OC6_SetConfig+0xc0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a15      	ldr	r2, [pc, #84]	; (8008844 <TIM_OC6_SetConfig+0xc4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC6_SetConfig+0x7c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <TIM_OC6_SetConfig+0xc8>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d109      	bne.n	8008810 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40013400 	.word	0x40013400
 8008840:	40014000 	.word	0x40014000
 8008844:	40014400 	.word	0x40014400
 8008848:	40014800 	.word	0x40014800

0800884c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f023 0201 	bic.w	r2, r3, #1
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a24      	ldr	r2, [pc, #144]	; (8008908 <TIM_TI1_SetConfig+0xbc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <TIM_TI1_SetConfig+0x56>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d00f      	beq.n	80088a2 <TIM_TI1_SetConfig+0x56>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4a21      	ldr	r2, [pc, #132]	; (800890c <TIM_TI1_SetConfig+0xc0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <TIM_TI1_SetConfig+0x56>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a20      	ldr	r2, [pc, #128]	; (8008910 <TIM_TI1_SetConfig+0xc4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <TIM_TI1_SetConfig+0x56>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <TIM_TI1_SetConfig+0xc8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_TI1_SetConfig+0x56>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4a1e      	ldr	r2, [pc, #120]	; (8008918 <TIM_TI1_SetConfig+0xcc>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d101      	bne.n	80088a6 <TIM_TI1_SetConfig+0x5a>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <TIM_TI1_SetConfig+0x5c>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f023 0303 	bic.w	r3, r3, #3
 80088b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e003      	b.n	80088c6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f023 030a 	bic.w	r3, r3, #10
 80088e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f003 030a 	and.w	r3, r3, #10
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	621a      	str	r2, [r3, #32]
}
 80088fa:	bf00      	nop
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40012c00 	.word	0x40012c00
 800890c:	40000400 	.word	0x40000400
 8008910:	40000800 	.word	0x40000800
 8008914:	40013400 	.word	0x40013400
 8008918:	40014000 	.word	0x40014000

0800891c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0201 	bic.w	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f023 030a 	bic.w	r3, r3, #10
 8008958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800897a:	b480      	push	{r7}
 800897c:	b087      	sub	sp, #28
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	f023 0210 	bic.w	r2, r3, #16
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	031b      	lsls	r3, r3, #12
 80089be:	b29b      	uxth	r3, r3
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f023 0210 	bic.w	r2, r3, #16
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	031b      	lsls	r3, r3, #12
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	621a      	str	r2, [r3, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f023 0303 	bic.w	r3, r3, #3
 8008a80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	621a      	str	r2, [r3, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	031b      	lsls	r3, r3, #12
 8008b24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f043 0307 	orr.w	r3, r3, #7
 8008b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	609a      	str	r2, [r3, #8]
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	021a      	lsls	r2, r3, #8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	609a      	str	r2, [r3, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 031f 	and.w	r3, r3, #31
 8008bce:	2201      	movs	r2, #1
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a1a      	ldr	r2, [r3, #32]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	401a      	ands	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e063      	b.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a2b      	ldr	r2, [pc, #172]	; (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d004      	beq.n	8008c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d108      	bne.n	8008c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1b      	ldr	r2, [pc, #108]	; (8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d018      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c92:	d013      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d00e      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a17      	ldr	r2, [pc, #92]	; (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d009      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d004      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a13      	ldr	r2, [pc, #76]	; (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d10c      	bne.n	8008cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	40012c00 	.word	0x40012c00
 8008cf8:	40013400 	.word	0x40013400
 8008cfc:	40000400 	.word	0x40000400
 8008d00:	40000800 	.word	0x40000800
 8008d04:	40014000 	.word	0x40014000

08008d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e065      	b.n	8008df0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	041b      	lsls	r3, r3, #16
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a14      	ldr	r2, [pc, #80]	; (8008e00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d115      	bne.n	8008dde <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	051b      	lsls	r3, r3, #20
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	40012c00 	.word	0x40012c00
 8008e00:	40013400 	.word	0x40013400

08008e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e040      	b.n	8008ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7f9 ff20 	bl	8002ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2224      	movs	r2, #36	; 0x24
 8008e6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f97e 	bl	8009180 <UART_SetConfig>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e022      	b.n	8008ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fb46 	bl	8009528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fbcd 	bl	800966c <UART_CheckIdleState>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08a      	sub	sp, #40	; 0x28
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	f040 8082 	bne.w	8008ffa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_UART_Transmit+0x26>
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e07a      	b.n	8008ffc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_UART_Transmit+0x38>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e073      	b.n	8008ffc <HAL_UART_Transmit+0x120>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2221      	movs	r2, #33	; 0x21
 8008f28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f2a:	f7fa f8bd 	bl	80030a8 <HAL_GetTick>
 8008f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	88fa      	ldrh	r2, [r7, #6]
 8008f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f48:	d108      	bne.n	8008f5c <HAL_UART_Transmit+0x80>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	e003      	b.n	8008f64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008f6c:	e02d      	b.n	8008fca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fbc0 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e039      	b.n	8008ffc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10b      	bne.n	8008fa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	61bb      	str	r3, [r7, #24]
 8008fa4:	e008      	b.n	8008fb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	b292      	uxth	r2, r2
 8008fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1cb      	bne.n	8008f6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2140      	movs	r1, #64	; 0x40
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fb8c 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e005      	b.n	8008ffc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e000      	b.n	8008ffc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008ffa:	2302      	movs	r3, #2
  }
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009018:	2b20      	cmp	r3, #32
 800901a:	f040 80ac 	bne.w	8009176 <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_UART_Receive+0x26>
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e0a4      	b.n	8009178 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_UART_Receive+0x38>
 8009038:	2302      	movs	r3, #2
 800903a:	e09d      	b.n	8009178 <HAL_UART_Receive+0x174>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2222      	movs	r2, #34	; 0x22
 8009050:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009058:	f7fa f826 	bl	80030a8 <HAL_GetTick>
 800905c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d10e      	bne.n	8009096 <HAL_UART_Receive+0x92>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <HAL_UART_Receive+0x88>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800908a:	e01a      	b.n	80090c2 <HAL_UART_Receive+0xbe>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	22ff      	movs	r2, #255	; 0xff
 8009090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009094:	e015      	b.n	80090c2 <HAL_UART_Receive+0xbe>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <HAL_UART_Receive+0xb6>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <HAL_UART_Receive+0xac>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	22ff      	movs	r2, #255	; 0xff
 80090aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090ae:	e008      	b.n	80090c2 <HAL_UART_Receive+0xbe>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	227f      	movs	r2, #127	; 0x7f
 80090b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80090b8:	e003      	b.n	80090c2 <HAL_UART_Receive+0xbe>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d2:	d108      	bne.n	80090e6 <HAL_UART_Receive+0xe2>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e003      	b.n	80090ee <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80090f6:	e033      	b.n	8009160 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2200      	movs	r2, #0
 8009100:	2120      	movs	r1, #32
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fafb 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e032      	b.n	8009178 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10c      	bne.n	8009132 <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800911e:	b29a      	uxth	r2, r3
 8009120:	8a7b      	ldrh	r3, [r7, #18]
 8009122:	4013      	ands	r3, r2
 8009124:	b29a      	uxth	r2, r3
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	3302      	adds	r3, #2
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	e00d      	b.n	800914e <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009138:	b29b      	uxth	r3, r3
 800913a:	b2da      	uxtb	r2, r3
 800913c:	8a7b      	ldrh	r3, [r7, #18]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	4013      	ands	r3, r2
 8009142:	b2da      	uxtb	r2, r3
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	3301      	adds	r3, #1
 800914c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1c5      	bne.n	80090f8 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2220      	movs	r2, #32
 8009170:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e000      	b.n	8009178 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009176:	2302      	movs	r3, #2
  }
}
 8009178:	4618      	mov	r0, r3
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80091ae:	f023 030c 	bic.w	r3, r3, #12
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6812      	ldr	r2, [r2, #0]
 80091b6:	6979      	ldr	r1, [r7, #20]
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4aae      	ldr	r2, [pc, #696]	; (80094b4 <UART_SetConfig+0x334>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d120      	bne.n	8009242 <UART_SetConfig+0xc2>
 8009200:	4bad      	ldr	r3, [pc, #692]	; (80094b8 <UART_SetConfig+0x338>)
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	f003 0303 	and.w	r3, r3, #3
 8009208:	2b03      	cmp	r3, #3
 800920a:	d817      	bhi.n	800923c <UART_SetConfig+0xbc>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <UART_SetConfig+0x94>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009225 	.word	0x08009225
 8009218:	08009231 	.word	0x08009231
 800921c:	08009237 	.word	0x08009237
 8009220:	0800922b 	.word	0x0800922b
 8009224:	2301      	movs	r3, #1
 8009226:	77fb      	strb	r3, [r7, #31]
 8009228:	e0b5      	b.n	8009396 <UART_SetConfig+0x216>
 800922a:	2302      	movs	r3, #2
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e0b2      	b.n	8009396 <UART_SetConfig+0x216>
 8009230:	2304      	movs	r3, #4
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e0af      	b.n	8009396 <UART_SetConfig+0x216>
 8009236:	2308      	movs	r3, #8
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e0ac      	b.n	8009396 <UART_SetConfig+0x216>
 800923c:	2310      	movs	r3, #16
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e0a9      	b.n	8009396 <UART_SetConfig+0x216>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a9d      	ldr	r2, [pc, #628]	; (80094bc <UART_SetConfig+0x33c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d124      	bne.n	8009296 <UART_SetConfig+0x116>
 800924c:	4b9a      	ldr	r3, [pc, #616]	; (80094b8 <UART_SetConfig+0x338>)
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009254:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009258:	d011      	beq.n	800927e <UART_SetConfig+0xfe>
 800925a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800925e:	d817      	bhi.n	8009290 <UART_SetConfig+0x110>
 8009260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009264:	d011      	beq.n	800928a <UART_SetConfig+0x10a>
 8009266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800926a:	d811      	bhi.n	8009290 <UART_SetConfig+0x110>
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <UART_SetConfig+0xf8>
 8009270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009274:	d006      	beq.n	8009284 <UART_SetConfig+0x104>
 8009276:	e00b      	b.n	8009290 <UART_SetConfig+0x110>
 8009278:	2300      	movs	r3, #0
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	e08b      	b.n	8009396 <UART_SetConfig+0x216>
 800927e:	2302      	movs	r3, #2
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	e088      	b.n	8009396 <UART_SetConfig+0x216>
 8009284:	2304      	movs	r3, #4
 8009286:	77fb      	strb	r3, [r7, #31]
 8009288:	e085      	b.n	8009396 <UART_SetConfig+0x216>
 800928a:	2308      	movs	r3, #8
 800928c:	77fb      	strb	r3, [r7, #31]
 800928e:	e082      	b.n	8009396 <UART_SetConfig+0x216>
 8009290:	2310      	movs	r3, #16
 8009292:	77fb      	strb	r3, [r7, #31]
 8009294:	e07f      	b.n	8009396 <UART_SetConfig+0x216>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a89      	ldr	r2, [pc, #548]	; (80094c0 <UART_SetConfig+0x340>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d124      	bne.n	80092ea <UART_SetConfig+0x16a>
 80092a0:	4b85      	ldr	r3, [pc, #532]	; (80094b8 <UART_SetConfig+0x338>)
 80092a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80092a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80092ac:	d011      	beq.n	80092d2 <UART_SetConfig+0x152>
 80092ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80092b2:	d817      	bhi.n	80092e4 <UART_SetConfig+0x164>
 80092b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092b8:	d011      	beq.n	80092de <UART_SetConfig+0x15e>
 80092ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092be:	d811      	bhi.n	80092e4 <UART_SetConfig+0x164>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <UART_SetConfig+0x14c>
 80092c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092c8:	d006      	beq.n	80092d8 <UART_SetConfig+0x158>
 80092ca:	e00b      	b.n	80092e4 <UART_SetConfig+0x164>
 80092cc:	2300      	movs	r3, #0
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e061      	b.n	8009396 <UART_SetConfig+0x216>
 80092d2:	2302      	movs	r3, #2
 80092d4:	77fb      	strb	r3, [r7, #31]
 80092d6:	e05e      	b.n	8009396 <UART_SetConfig+0x216>
 80092d8:	2304      	movs	r3, #4
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e05b      	b.n	8009396 <UART_SetConfig+0x216>
 80092de:	2308      	movs	r3, #8
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e058      	b.n	8009396 <UART_SetConfig+0x216>
 80092e4:	2310      	movs	r3, #16
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e055      	b.n	8009396 <UART_SetConfig+0x216>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a75      	ldr	r2, [pc, #468]	; (80094c4 <UART_SetConfig+0x344>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d124      	bne.n	800933e <UART_SetConfig+0x1be>
 80092f4:	4b70      	ldr	r3, [pc, #448]	; (80094b8 <UART_SetConfig+0x338>)
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009300:	d011      	beq.n	8009326 <UART_SetConfig+0x1a6>
 8009302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009306:	d817      	bhi.n	8009338 <UART_SetConfig+0x1b8>
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930c:	d011      	beq.n	8009332 <UART_SetConfig+0x1b2>
 800930e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009312:	d811      	bhi.n	8009338 <UART_SetConfig+0x1b8>
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <UART_SetConfig+0x1a0>
 8009318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931c:	d006      	beq.n	800932c <UART_SetConfig+0x1ac>
 800931e:	e00b      	b.n	8009338 <UART_SetConfig+0x1b8>
 8009320:	2300      	movs	r3, #0
 8009322:	77fb      	strb	r3, [r7, #31]
 8009324:	e037      	b.n	8009396 <UART_SetConfig+0x216>
 8009326:	2302      	movs	r3, #2
 8009328:	77fb      	strb	r3, [r7, #31]
 800932a:	e034      	b.n	8009396 <UART_SetConfig+0x216>
 800932c:	2304      	movs	r3, #4
 800932e:	77fb      	strb	r3, [r7, #31]
 8009330:	e031      	b.n	8009396 <UART_SetConfig+0x216>
 8009332:	2308      	movs	r3, #8
 8009334:	77fb      	strb	r3, [r7, #31]
 8009336:	e02e      	b.n	8009396 <UART_SetConfig+0x216>
 8009338:	2310      	movs	r3, #16
 800933a:	77fb      	strb	r3, [r7, #31]
 800933c:	e02b      	b.n	8009396 <UART_SetConfig+0x216>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a61      	ldr	r2, [pc, #388]	; (80094c8 <UART_SetConfig+0x348>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d124      	bne.n	8009392 <UART_SetConfig+0x212>
 8009348:	4b5b      	ldr	r3, [pc, #364]	; (80094b8 <UART_SetConfig+0x338>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009350:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009354:	d011      	beq.n	800937a <UART_SetConfig+0x1fa>
 8009356:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800935a:	d817      	bhi.n	800938c <UART_SetConfig+0x20c>
 800935c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009360:	d011      	beq.n	8009386 <UART_SetConfig+0x206>
 8009362:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009366:	d811      	bhi.n	800938c <UART_SetConfig+0x20c>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <UART_SetConfig+0x1f4>
 800936c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009370:	d006      	beq.n	8009380 <UART_SetConfig+0x200>
 8009372:	e00b      	b.n	800938c <UART_SetConfig+0x20c>
 8009374:	2300      	movs	r3, #0
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e00d      	b.n	8009396 <UART_SetConfig+0x216>
 800937a:	2302      	movs	r3, #2
 800937c:	77fb      	strb	r3, [r7, #31]
 800937e:	e00a      	b.n	8009396 <UART_SetConfig+0x216>
 8009380:	2304      	movs	r3, #4
 8009382:	77fb      	strb	r3, [r7, #31]
 8009384:	e007      	b.n	8009396 <UART_SetConfig+0x216>
 8009386:	2308      	movs	r3, #8
 8009388:	77fb      	strb	r3, [r7, #31]
 800938a:	e004      	b.n	8009396 <UART_SetConfig+0x216>
 800938c:	2310      	movs	r3, #16
 800938e:	77fb      	strb	r3, [r7, #31]
 8009390:	e001      	b.n	8009396 <UART_SetConfig+0x216>
 8009392:	2310      	movs	r3, #16
 8009394:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800939e:	d15c      	bne.n	800945a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80093a0:	7ffb      	ldrb	r3, [r7, #31]
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	d827      	bhi.n	80093f6 <UART_SetConfig+0x276>
 80093a6:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <UART_SetConfig+0x22c>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	080093f7 	.word	0x080093f7
 80093bc:	080093e7 	.word	0x080093e7
 80093c0:	080093f7 	.word	0x080093f7
 80093c4:	080093f7 	.word	0x080093f7
 80093c8:	080093f7 	.word	0x080093f7
 80093cc:	080093ef 	.word	0x080093ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093d0:	f7fd fcb6 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 80093d4:	61b8      	str	r0, [r7, #24]
        break;
 80093d6:	e013      	b.n	8009400 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d8:	f7fd fcd4 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 80093dc:	61b8      	str	r0, [r7, #24]
        break;
 80093de:	e00f      	b.n	8009400 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093e0:	4b3a      	ldr	r3, [pc, #232]	; (80094cc <UART_SetConfig+0x34c>)
 80093e2:	61bb      	str	r3, [r7, #24]
        break;
 80093e4:	e00c      	b.n	8009400 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093e6:	f7fd fc35 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 80093ea:	61b8      	str	r0, [r7, #24]
        break;
 80093ec:	e008      	b.n	8009400 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f2:	61bb      	str	r3, [r7, #24]
        break;
 80093f4:	e004      	b.n	8009400 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	77bb      	strb	r3, [r7, #30]
        break;
 80093fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8085 	beq.w	8009512 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	005a      	lsls	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	441a      	add	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	fbb2 f3f3 	udiv	r3, r2, r3
 800941c:	b29b      	uxth	r3, r3
 800941e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b0f      	cmp	r3, #15
 8009424:	d916      	bls.n	8009454 <UART_SetConfig+0x2d4>
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942c:	d212      	bcs.n	8009454 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	b29b      	uxth	r3, r3
 8009432:	f023 030f 	bic.w	r3, r3, #15
 8009436:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	b29b      	uxth	r3, r3
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	b29a      	uxth	r2, r3
 8009444:	89fb      	ldrh	r3, [r7, #14]
 8009446:	4313      	orrs	r3, r2
 8009448:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	89fa      	ldrh	r2, [r7, #14]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	e05e      	b.n	8009512 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	77bb      	strb	r3, [r7, #30]
 8009458:	e05b      	b.n	8009512 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800945a:	7ffb      	ldrb	r3, [r7, #31]
 800945c:	2b08      	cmp	r3, #8
 800945e:	d837      	bhi.n	80094d0 <UART_SetConfig+0x350>
 8009460:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <UART_SetConfig+0x2e8>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	0800948d 	.word	0x0800948d
 800946c:	08009495 	.word	0x08009495
 8009470:	0800949d 	.word	0x0800949d
 8009474:	080094d1 	.word	0x080094d1
 8009478:	080094a3 	.word	0x080094a3
 800947c:	080094d1 	.word	0x080094d1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094ab 	.word	0x080094ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800948c:	f7fd fc58 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 8009490:	61b8      	str	r0, [r7, #24]
        break;
 8009492:	e022      	b.n	80094da <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009494:	f7fd fc76 	bl	8006d84 <HAL_RCC_GetPCLK2Freq>
 8009498:	61b8      	str	r0, [r7, #24]
        break;
 800949a:	e01e      	b.n	80094da <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <UART_SetConfig+0x34c>)
 800949e:	61bb      	str	r3, [r7, #24]
        break;
 80094a0:	e01b      	b.n	80094da <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094a2:	f7fd fbd7 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 80094a6:	61b8      	str	r0, [r7, #24]
        break;
 80094a8:	e017      	b.n	80094da <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ae:	61bb      	str	r3, [r7, #24]
        break;
 80094b0:	e013      	b.n	80094da <UART_SetConfig+0x35a>
 80094b2:	bf00      	nop
 80094b4:	40013800 	.word	0x40013800
 80094b8:	40021000 	.word	0x40021000
 80094bc:	40004400 	.word	0x40004400
 80094c0:	40004800 	.word	0x40004800
 80094c4:	40004c00 	.word	0x40004c00
 80094c8:	40005000 	.word	0x40005000
 80094cc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	77bb      	strb	r3, [r7, #30]
        break;
 80094d8:	bf00      	nop
    }

    if (pclk != 0U)
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d018      	beq.n	8009512 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	085a      	lsrs	r2, r3, #1
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	441a      	add	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b0f      	cmp	r3, #15
 80094fa:	d908      	bls.n	800950e <UART_SetConfig+0x38e>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009502:	d204      	bcs.n	800950e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	60da      	str	r2, [r3, #12]
 800950c:	e001      	b.n	8009512 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800951e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3720      	adds	r7, #32
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00a      	beq.n	80095da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01a      	beq.n	800963e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009626:	d10a      	bne.n	800963e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	430a      	orrs	r2, r1
 800965e:	605a      	str	r2, [r3, #4]
  }
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800967c:	f7f9 fd14 	bl	80030a8 <HAL_GetTick>
 8009680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b08      	cmp	r3, #8
 800968e:	d10e      	bne.n	80096ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f82d 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e023      	b.n	80096f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d10e      	bne.n	80096da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f817 	bl	80096fe <UART_WaitOnFlagUntilTimeout>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e00d      	b.n	80096f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b09c      	sub	sp, #112	; 0x70
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	603b      	str	r3, [r7, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970e:	e0a5      	b.n	800985c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	f000 80a1 	beq.w	800985c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7f9 fcc5 	bl	80030a8 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <UART_WaitOnFlagUntilTimeout+0x32>
 800972a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800972c:	2b00      	cmp	r3, #0
 800972e:	d13e      	bne.n	80097ae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800973e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009744:	667b      	str	r3, [r7, #100]	; 0x64
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800974e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009750:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e6      	bne.n	8009730 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	663b      	str	r3, [r7, #96]	; 0x60
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009782:	64ba      	str	r2, [r7, #72]	; 0x48
 8009784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e5      	bne.n	8009762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e067      	b.n	800987e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d04f      	beq.n	800985c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ca:	d147      	bne.n	800985c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
 80097f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
 80097f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e6      	bne.n	80097d6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	e853 3f00 	ldrex	r3, [r3]
 8009816:	613b      	str	r3, [r7, #16]
   return(result);
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f023 0301 	bic.w	r3, r3, #1
 800981e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009828:	623a      	str	r2, [r7, #32]
 800982a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	69f9      	ldr	r1, [r7, #28]
 800982e:	6a3a      	ldr	r2, [r7, #32]
 8009830:	e841 2300 	strex	r3, r2, [r1]
 8009834:	61bb      	str	r3, [r7, #24]
   return(result);
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e5      	bne.n	8009808 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2220      	movs	r2, #32
 8009840:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2220      	movs	r2, #32
 8009846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2220      	movs	r2, #32
 800984c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e010      	b.n	800987e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69da      	ldr	r2, [r3, #28]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4013      	ands	r3, r2
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	429a      	cmp	r2, r3
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	429a      	cmp	r2, r3
 8009878:	f43f af4a 	beq.w	8009710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3770      	adds	r7, #112	; 0x70
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	60bb      	str	r3, [r7, #8]
  return(result);
 8009894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10f      	bne.n	80098ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989a:	f3ef 8310 	mrs	r3, PRIMASK
 800989e:	607b      	str	r3, [r7, #4]
  return(result);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <osKernelInitialize+0x32>
 80098a6:	4b11      	ldr	r3, [pc, #68]	; (80098ec <osKernelInitialize+0x64>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d109      	bne.n	80098c2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098ae:	f3ef 8311 	mrs	r3, BASEPRI
 80098b2:	603b      	str	r3, [r7, #0]
  return(result);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80098ba:	f06f 0305 	mvn.w	r3, #5
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e00c      	b.n	80098dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098c2:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <osKernelInitialize+0x64>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80098ca:	4b08      	ldr	r3, [pc, #32]	; (80098ec <osKernelInitialize+0x64>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	e002      	b.n	80098dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80098dc:	68fb      	ldr	r3, [r7, #12]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000238 	.word	0x20000238

080098f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f6:	f3ef 8305 	mrs	r3, IPSR
 80098fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80098fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10f      	bne.n	8009922 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009902:	f3ef 8310 	mrs	r3, PRIMASK
 8009906:	607b      	str	r3, [r7, #4]
  return(result);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d109      	bne.n	8009922 <osKernelStart+0x32>
 800990e:	4b11      	ldr	r3, [pc, #68]	; (8009954 <osKernelStart+0x64>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d109      	bne.n	800992a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009916:	f3ef 8311 	mrs	r3, BASEPRI
 800991a:	603b      	str	r3, [r7, #0]
  return(result);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009922:	f06f 0305 	mvn.w	r3, #5
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	e00e      	b.n	8009948 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <osKernelStart+0x64>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d107      	bne.n	8009942 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <osKernelStart+0x64>)
 8009934:	2202      	movs	r2, #2
 8009936:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009938:	f001 f974 	bl	800ac24 <vTaskStartScheduler>
      stat = osOK;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e002      	b.n	8009948 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009942:	f04f 33ff 	mov.w	r3, #4294967295
 8009946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009948:	68fb      	ldr	r3, [r7, #12]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000238 	.word	0x20000238

08009958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b092      	sub	sp, #72	; 0x48
 800995c:	af04      	add	r7, sp, #16
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009968:	f3ef 8305 	mrs	r3, IPSR
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009970:	2b00      	cmp	r3, #0
 8009972:	f040 8094 	bne.w	8009a9e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009976:	f3ef 8310 	mrs	r3, PRIMASK
 800997a:	623b      	str	r3, [r7, #32]
  return(result);
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f040 808d 	bne.w	8009a9e <osThreadNew+0x146>
 8009984:	4b48      	ldr	r3, [pc, #288]	; (8009aa8 <osThreadNew+0x150>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d106      	bne.n	800999a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800998c:	f3ef 8311 	mrs	r3, BASEPRI
 8009990:	61fb      	str	r3, [r7, #28]
  return(result);
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 8082 	bne.w	8009a9e <osThreadNew+0x146>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d07e      	beq.n	8009a9e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80099a4:	2318      	movs	r3, #24
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80099a8:	2300      	movs	r3, #0
 80099aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80099ac:	f107 031b 	add.w	r3, r7, #27
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80099b2:	f04f 33ff 	mov.w	r3, #4294967295
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d045      	beq.n	8009a4a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <osThreadNew+0x74>
        name = attr->name;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d008      	beq.n	80099f2 <osThreadNew+0x9a>
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	2b38      	cmp	r3, #56	; 0x38
 80099e4:	d805      	bhi.n	80099f2 <osThreadNew+0x9a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <osThreadNew+0x9e>
        return (NULL);
 80099f2:	2300      	movs	r3, #0
 80099f4:	e054      	b.n	8009aa0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	089b      	lsrs	r3, r3, #2
 8009a04:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00e      	beq.n	8009a2c <osThreadNew+0xd4>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	2b5b      	cmp	r3, #91	; 0x5b
 8009a14:	d90a      	bls.n	8009a2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <osThreadNew+0xd4>
        mem = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a2a:	e010      	b.n	8009a4e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10c      	bne.n	8009a4e <osThreadNew+0xf6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d108      	bne.n	8009a4e <osThreadNew+0xf6>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d104      	bne.n	8009a4e <osThreadNew+0xf6>
          mem = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a48:	e001      	b.n	8009a4e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d110      	bne.n	8009a76 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a5c:	9202      	str	r2, [sp, #8]
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 ff0e 	bl	800a88c <xTaskCreateStatic>
 8009a70:	4603      	mov	r3, r0
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	e013      	b.n	8009a9e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d110      	bne.n	8009a9e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	f107 0314 	add.w	r3, r7, #20
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 ff58 	bl	800a944 <xTaskCreate>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d001      	beq.n	8009a9e <osThreadNew+0x146>
          hTask = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a9e:	697b      	ldr	r3, [r7, #20]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3738      	adds	r7, #56	; 0x38
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000238 	.word	0x20000238

08009aac <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <osThreadFlagsSet+0x1a>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da03      	bge.n	8009ace <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009ac6:	f06f 0303 	mvn.w	r3, #3
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e045      	b.n	8009b5a <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad4:	f3ef 8305 	mrs	r3, IPSR
 8009ad8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ada:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10f      	bne.n	8009b00 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d109      	bne.n	8009b00 <osThreadFlagsSet+0x54>
 8009aec:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <osThreadFlagsSet+0xb8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d125      	bne.n	8009b40 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009af4:	f3ef 8311 	mrs	r3, BASEPRI
 8009af8:	613b      	str	r3, [r7, #16]
  return(result);
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01f      	beq.n	8009b40 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	69f8      	ldr	r0, [r7, #28]
 8009b12:	f001 fe63 	bl	800b7dc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009b16:	f107 030c 	add.w	r3, r7, #12
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	9200      	str	r2, [sp, #0]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2100      	movs	r1, #0
 8009b22:	69f8      	ldr	r0, [r7, #28]
 8009b24:	f001 fe5a 	bl	800b7dc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d015      	beq.n	8009b5a <osThreadFlagsSet+0xae>
 8009b2e:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <osThreadFlagsSet+0xbc>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	e00c      	b.n	8009b5a <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009b40:	2300      	movs	r3, #0
 8009b42:	2201      	movs	r2, #1
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	69f8      	ldr	r0, [r7, #28]
 8009b48:	f001 fda4 	bl	800b694 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009b4c:	f107 030c 	add.w	r3, r7, #12
 8009b50:	2200      	movs	r2, #0
 8009b52:	2100      	movs	r1, #0
 8009b54:	69f8      	ldr	r0, [r7, #28]
 8009b56:	f001 fd9d 	bl	800b694 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3720      	adds	r7, #32
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000238 	.word	0x20000238
 8009b68:	e000ed04 	.word	0xe000ed04

08009b6c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	; 0x38
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b78:	f3ef 8305 	mrs	r3, IPSR
 8009b7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b7e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10f      	bne.n	8009ba4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b84:	f3ef 8310 	mrs	r3, PRIMASK
 8009b88:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <osThreadFlagsWait+0x38>
 8009b90:	4b3f      	ldr	r3, [pc, #252]	; (8009c90 <osThreadFlagsWait+0x124>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d109      	bne.n	8009bac <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b98:	f3ef 8311 	mrs	r3, BASEPRI
 8009b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8009ba4:	f06f 0305 	mvn.w	r3, #5
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8009baa:	e06b      	b.n	8009c84 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da03      	bge.n	8009bba <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8009bb2:	f06f 0303 	mvn.w	r3, #3
 8009bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb8:	e064      	b.n	8009c84 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <osThreadFlagsWait+0x5e>
      clear = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8009bc8:	e001      	b.n	8009bce <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8009bd6:	f001 f937 	bl	800ae48 <xTaskGetTickCount>
 8009bda:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009bdc:	f107 0210 	add.w	r2, r7, #16
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009be4:	2000      	movs	r0, #0
 8009be6:	f001 fcfb 	bl	800b5e0 <xTaskNotifyWait>
 8009bea:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d137      	bne.n	8009c62 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8009bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00c      	beq.n	8009c26 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	4013      	ands	r3, r2
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d032      	beq.n	8009c7e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10f      	bne.n	8009c3e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009c1e:	f06f 0302 	mvn.w	r3, #2
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009c24:	e02e      	b.n	8009c84 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d128      	bne.n	8009c82 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8009c36:	f06f 0302 	mvn.w	r3, #2
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8009c3c:	e022      	b.n	8009c84 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009c3e:	f001 f903 	bl	800ae48 <xTaskGetTickCount>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8009c4a:	6a3a      	ldr	r2, [r7, #32]
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d902      	bls.n	8009c58 <osThreadFlagsWait+0xec>
          tout  = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c56:	e00e      	b.n	8009c76 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8009c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c60:	e009      	b.n	8009c76 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8009c68:	f06f 0302 	mvn.w	r3, #2
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c6e:	e002      	b.n	8009c76 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009c70:	f06f 0301 	mvn.w	r3, #1
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1af      	bne.n	8009bdc <osThreadFlagsWait+0x70>
 8009c7c:	e002      	b.n	8009c84 <osThreadFlagsWait+0x118>
            break;
 8009c7e:	bf00      	nop
 8009c80:	e000      	b.n	8009c84 <osThreadFlagsWait+0x118>
            break;
 8009c82:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3738      	adds	r7, #56	; 0x38
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000238 	.word	0x20000238

08009c94 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c9c:	f3ef 8305 	mrs	r3, IPSR
 8009ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8009ca2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10f      	bne.n	8009cc8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <osDelay+0x34>
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <osDelay+0x58>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d109      	bne.n	8009cd0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <osDelay+0x3c>
    stat = osErrorISR;
 8009cc8:	f06f 0305 	mvn.w	r3, #5
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	e007      	b.n	8009ce0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 ff6e 	bl	800abbc <vTaskDelay>
    }
  }

  return (stat);
 8009ce0:	697b      	ldr	r3, [r7, #20]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000238 	.word	0x20000238

08009cf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4a07      	ldr	r2, [pc, #28]	; (8009d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a06      	ldr	r2, [pc, #24]	; (8009d20 <vApplicationGetIdleTaskMemory+0x30>)
 8009d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2280      	movs	r2, #128	; 0x80
 8009d0c:	601a      	str	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	2000023c 	.word	0x2000023c
 8009d20:	20000298 	.word	0x20000298

08009d24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4a06      	ldr	r2, [pc, #24]	; (8009d54 <vApplicationGetTimerTaskMemory+0x30>)
 8009d3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20000498 	.word	0x20000498
 8009d54:	200004f4 	.word	0x200004f4

08009d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 0208 	add.w	r2, r3, #8
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f103 0208 	add.w	r2, r3, #8
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f103 0208 	add.w	r2, r3, #8
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d103      	bne.n	8009e1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	60fb      	str	r3, [r7, #12]
 8009e18:	e00c      	b.n	8009e34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	e002      	b.n	8009e28 <vListInsert+0x2e>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d2f6      	bcs.n	8009e22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	685a      	ldr	r2, [r3, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	601a      	str	r2, [r3, #0]
}
 8009e60:	bf00      	nop
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6892      	ldr	r2, [r2, #8]
 8009e82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6852      	ldr	r2, [r2, #4]
 8009e8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d103      	bne.n	8009ea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	1e5a      	subs	r2, r3, #1
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009eea:	f002 f9d3 	bl	800c294 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	68f9      	ldr	r1, [r7, #12]
 8009ef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	441a      	add	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	441a      	add	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d114      	bne.n	8009f6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01a      	beq.n	8009f7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f8f7 	bl	800b140 <xTaskRemoveFromEventList>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d012      	beq.n	8009f7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f58:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <xQueueGenericReset+0xcc>)
 8009f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	e009      	b.n	8009f7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3310      	adds	r3, #16
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fef2 	bl	8009d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff feed 	bl	8009d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f7e:	f002 f9b9 	bl	800c2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f82:	2301      	movs	r3, #1
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	e000ed04 	.word	0xe000ed04

08009f90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <xQueueGenericCreateStatic+0x52>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <xQueueGenericCreateStatic+0x56>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueGenericCreateStatic+0x58>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	623b      	str	r3, [r7, #32]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <xQueueGenericCreateStatic+0x7e>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <xQueueGenericCreateStatic+0x82>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <xQueueGenericCreateStatic+0x84>
 800a012:	2300      	movs	r3, #0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	61fb      	str	r3, [r7, #28]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a02e:	2350      	movs	r3, #80	; 0x50
 800a030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b50      	cmp	r3, #80	; 0x50
 800a036:	d00a      	beq.n	800a04e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	61bb      	str	r3, [r7, #24]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a060:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f805 	bl	800a07e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a076:	4618      	mov	r0, r3
 800a078:	3730      	adds	r7, #48	; 0x30
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	60f8      	str	r0, [r7, #12]
 800a086:	60b9      	str	r1, [r7, #8]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e002      	b.n	800a0a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	69b8      	ldr	r0, [r7, #24]
 800a0b0:	f7ff ff06 	bl	8009ec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	78fa      	ldrb	r2, [r7, #3]
 800a0b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08e      	sub	sp, #56	; 0x38
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <xQueueGenericSend+0x40>
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <xQueueGenericSend+0x44>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <xQueueGenericSend+0x46>
 800a108:	2300      	movs	r3, #0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <xQueueGenericSend+0x60>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d103      	bne.n	800a132 <xQueueGenericSend+0x6e>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <xQueueGenericSend+0x72>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xQueueGenericSend+0x74>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueGenericSend+0x8e>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	623b      	str	r3, [r7, #32]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a152:	f001 f9b9 	bl	800b4c8 <xTaskGetSchedulerState>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <xQueueGenericSend+0x9e>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <xQueueGenericSend+0xa2>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueGenericSend+0xa4>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10a      	bne.n	800a182 <xQueueGenericSend+0xbe>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	61fb      	str	r3, [r7, #28]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a182:	f002 f887 	bl	800c294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d302      	bcc.n	800a198 <xQueueGenericSend+0xd4>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d129      	bne.n	800a1ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19e:	f000 fa07 	bl	800a5b0 <prvCopyDataToQueue>
 800a1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	3324      	adds	r3, #36	; 0x24
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 ffc5 	bl	800b140 <xTaskRemoveFromEventList>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d013      	beq.n	800a1e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1bc:	4b3f      	ldr	r3, [pc, #252]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	e00a      	b.n	800a1e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b39      	ldr	r3, [pc, #228]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1e4:	f002 f886 	bl	800c2f4 <vPortExitCritical>
				return pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e063      	b.n	800a2b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f2:	f002 f87f 	bl	800c2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e05c      	b.n	800a2b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a200:	f107 0314 	add.w	r3, r7, #20
 800a204:	4618      	mov	r0, r3
 800a206:	f000 ffff 	bl	800b208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a20e:	f002 f871 	bl	800c2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a212:	f000 fd6d 	bl	800acf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a216:	f002 f83d 	bl	800c294 <vPortEnterCritical>
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d103      	bne.n	800a230 <xQueueGenericSend+0x16c>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a236:	b25b      	sxtb	r3, r3
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d103      	bne.n	800a246 <xQueueGenericSend+0x182>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a246:	f002 f855 	bl	800c2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	f107 0314 	add.w	r3, r7, #20
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 ffee 	bl	800b234 <xTaskCheckForTimeOut>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d124      	bne.n	800a2a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a260:	f000 fa9e 	bl	800a7a0 <prvIsQueueFull>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d018      	beq.n	800a29c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	3310      	adds	r3, #16
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f000 ff14 	bl	800b0a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27a:	f000 fa29 	bl	800a6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f000 fd45 	bl	800ad0c <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	f47f af7c 	bne.w	800a182 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a28a:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <xQueueGenericSend+0x1f8>)
 800a28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	e772      	b.n	800a182 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29e:	f000 fa17 	bl	800a6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a2:	f000 fd33 	bl	800ad0c <xTaskResumeAll>
 800a2a6:	e76c      	b.n	800a182 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2aa:	f000 fa11 	bl	800a6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ae:	f000 fd2d 	bl	800ad0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2b2:	2300      	movs	r3, #0
		}
	}
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3738      	adds	r7, #56	; 0x38
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	; 0x38
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d103      	bne.n	800a2fc <xQueueGenericSendFromISR+0x3c>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <xQueueGenericSendFromISR+0x40>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e000      	b.n	800a302 <xQueueGenericSendFromISR+0x42>
 800a300:	2300      	movs	r3, #0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	623b      	str	r3, [r7, #32]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d103      	bne.n	800a32a <xQueueGenericSendFromISR+0x6a>
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <xQueueGenericSendFromISR+0x6e>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <xQueueGenericSendFromISR+0x70>
 800a32e:	2300      	movs	r3, #0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10a      	bne.n	800a34a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	61fb      	str	r3, [r7, #28]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a34a:	f002 f885 	bl	800c458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a34e:	f3ef 8211 	mrs	r2, BASEPRI
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	61ba      	str	r2, [r7, #24]
 800a364:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a366:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <xQueueGenericSendFromISR+0xbc>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d12c      	bne.n	800a3d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38c:	f000 f910 	bl	800a5b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a390:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d112      	bne.n	800a3c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d016      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	3324      	adds	r3, #36	; 0x24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 feca 	bl	800b140 <xTaskRemoveFromEventList>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00e      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e007      	b.n	800a3d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	b25a      	sxtb	r2, r3
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a3d4:	e001      	b.n	800a3da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3738      	adds	r7, #56	; 0x38
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08c      	sub	sp, #48	; 0x30
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <xQueueReceive+0x30>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	623b      	str	r3, [r7, #32]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <xQueueReceive+0x3e>
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <xQueueReceive+0x42>
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <xQueueReceive+0x44>
 800a432:	2300      	movs	r3, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <xQueueReceive+0x5e>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	61fb      	str	r3, [r7, #28]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a44e:	f001 f83b 	bl	800b4c8 <xTaskGetSchedulerState>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <xQueueReceive+0x6e>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <xQueueReceive+0x72>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueReceive+0x74>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xQueueReceive+0x8e>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	61bb      	str	r3, [r7, #24]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a47e:	f001 ff09 	bl	800c294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d01f      	beq.n	800a4ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a48e:	68b9      	ldr	r1, [r7, #8]
 800a490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a492:	f000 f8f7 	bl	800a684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	1e5a      	subs	r2, r3, #1
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00f      	beq.n	800a4c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	3310      	adds	r3, #16
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fe48 	bl	800b140 <xTaskRemoveFromEventList>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d007      	beq.n	800a4c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4b6:	4b3d      	ldr	r3, [pc, #244]	; (800a5ac <xQueueReceive+0x1bc>)
 800a4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4c6:	f001 ff15 	bl	800c2f4 <vPortExitCritical>
				return pdPASS;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e069      	b.n	800a5a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4d4:	f001 ff0e 	bl	800c2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e062      	b.n	800a5a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4e2:	f107 0310 	add.w	r3, r7, #16
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fe8e 	bl	800b208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4f0:	f001 ff00 	bl	800c2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4f4:	f000 fbfc 	bl	800acf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4f8:	f001 fecc 	bl	800c294 <vPortEnterCritical>
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a502:	b25b      	sxtb	r3, r3
 800a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a508:	d103      	bne.n	800a512 <xQueueReceive+0x122>
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d103      	bne.n	800a528 <xQueueReceive+0x138>
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a528:	f001 fee4 	bl	800c2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a52c:	1d3a      	adds	r2, r7, #4
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fe7d 	bl	800b234 <xTaskCheckForTimeOut>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d123      	bne.n	800a588 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f000 f917 	bl	800a774 <prvIsQueueEmpty>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d017      	beq.n	800a57c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	3324      	adds	r3, #36	; 0x24
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fda3 	bl	800b0a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55c:	f000 f8b8 	bl	800a6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a560:	f000 fbd4 	bl	800ad0c <xTaskResumeAll>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d189      	bne.n	800a47e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <xQueueReceive+0x1bc>)
 800a56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	e780      	b.n	800a47e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a57e:	f000 f8a7 	bl	800a6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a582:	f000 fbc3 	bl	800ad0c <xTaskResumeAll>
 800a586:	e77a      	b.n	800a47e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58a:	f000 f8a1 	bl	800a6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a58e:	f000 fbbd 	bl	800ad0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a594:	f000 f8ee 	bl	800a774 <prvIsQueueEmpty>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f43f af6f 	beq.w	800a47e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3730      	adds	r7, #48	; 0x30
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10d      	bne.n	800a5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d14d      	bne.n	800a672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 ff92 	bl	800b504 <xTaskPriorityDisinherit>
 800a5e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	605a      	str	r2, [r3, #4]
 800a5e8:	e043      	b.n	800a672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d119      	bne.n	800a624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6898      	ldr	r0, [r3, #8]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	f002 f970 	bl	800c8e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	441a      	add	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d32b      	bcc.n	800a672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	609a      	str	r2, [r3, #8]
 800a622:	e026      	b.n	800a672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	68d8      	ldr	r0, [r3, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	461a      	mov	r2, r3
 800a62e:	68b9      	ldr	r1, [r7, #8]
 800a630:	f002 f956 	bl	800c8e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	425b      	negs	r3, r3
 800a63e:	441a      	add	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d207      	bcs.n	800a660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a658:	425b      	negs	r3, r3
 800a65a:	441a      	add	r2, r3
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d105      	bne.n	800a672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	3b01      	subs	r3, #1
 800a670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a67a:	697b      	ldr	r3, [r7, #20]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d018      	beq.n	800a6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	441a      	add	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d303      	bcc.n	800a6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68d9      	ldr	r1, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f002 f90c 	bl	800c8e0 <memcpy>
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6d8:	f001 fddc 	bl	800c294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6e4:	e011      	b.n	800a70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d012      	beq.n	800a714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3324      	adds	r3, #36	; 0x24
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fd24 	bl	800b140 <xTaskRemoveFromEventList>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6fe:	f000 fdfb 	bl	800b2f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	3b01      	subs	r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dce9      	bgt.n	800a6e6 <prvUnlockQueue+0x16>
 800a712:	e000      	b.n	800a716 <prvUnlockQueue+0x46>
					break;
 800a714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	22ff      	movs	r2, #255	; 0xff
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a71e:	f001 fde9 	bl	800c2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a722:	f001 fdb7 	bl	800c294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a72e:	e011      	b.n	800a754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3310      	adds	r3, #16
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fcff 	bl	800b140 <xTaskRemoveFromEventList>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a748:	f000 fdd6 	bl	800b2f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	3b01      	subs	r3, #1
 800a750:	b2db      	uxtb	r3, r3
 800a752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dce9      	bgt.n	800a730 <prvUnlockQueue+0x60>
 800a75c:	e000      	b.n	800a760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	22ff      	movs	r2, #255	; 0xff
 800a764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a768:	f001 fdc4 	bl	800c2f4 <vPortExitCritical>
}
 800a76c:	bf00      	nop
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a77c:	f001 fd8a 	bl	800c294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e001      	b.n	800a792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a792:	f001 fdaf 	bl	800c2f4 <vPortExitCritical>

	return xReturn;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7a8:	f001 fd74 	bl	800c294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d102      	bne.n	800a7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e001      	b.n	800a7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c2:	f001 fd97 	bl	800c2f4 <vPortExitCritical>

	return xReturn;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e014      	b.n	800a80a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a7e0:	4a0f      	ldr	r2, [pc, #60]	; (800a820 <vQueueAddToRegistry+0x50>)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10b      	bne.n	800a804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a7ec:	490c      	ldr	r1, [pc, #48]	; (800a820 <vQueueAddToRegistry+0x50>)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7f6:	4a0a      	ldr	r2, [pc, #40]	; (800a820 <vQueueAddToRegistry+0x50>)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a802:	e006      	b.n	800a812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b07      	cmp	r3, #7
 800a80e:	d9e7      	bls.n	800a7e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20002294 	.word	0x20002294

0800a824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a834:	f001 fd2e 	bl	800c294 <vPortEnterCritical>
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a83e:	b25b      	sxtb	r3, r3
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a844:	d103      	bne.n	800a84e <vQueueWaitForMessageRestricted+0x2a>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a854:	b25b      	sxtb	r3, r3
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d103      	bne.n	800a864 <vQueueWaitForMessageRestricted+0x40>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a864:	f001 fd46 	bl	800c2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	3324      	adds	r3, #36	; 0x24
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fc35 	bl	800b0e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a87e:	6978      	ldr	r0, [r7, #20]
 800a880:	f7ff ff26 	bl	800a6d0 <prvUnlockQueue>
	}
 800a884:	bf00      	nop
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	623b      	str	r3, [r7, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61fb      	str	r3, [r7, #28]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8d2:	235c      	movs	r3, #92	; 0x5c
 800a8d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a8da:	d00a      	beq.n	800a8f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	61bb      	str	r3, [r7, #24]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01e      	beq.n	800a936 <xTaskCreateStatic+0xaa>
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01b      	beq.n	800a936 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a906:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a910:	2300      	movs	r3, #0
 800a912:	9303      	str	r3, [sp, #12]
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	9302      	str	r3, [sp, #8]
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f850 	bl	800a9ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a92e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a930:	f000 f8d4 	bl	800aadc <prvAddNewTaskToReadyList>
 800a934:	e001      	b.n	800a93a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a93a:	697b      	ldr	r3, [r7, #20]
	}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3728      	adds	r7, #40	; 0x28
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08c      	sub	sp, #48	; 0x30
 800a948:	af04      	add	r7, sp, #16
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4618      	mov	r0, r3
 800a95a:	f001 fdbd 	bl	800c4d8 <pvPortMalloc>
 800a95e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00e      	beq.n	800a984 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a966:	205c      	movs	r0, #92	; 0x5c
 800a968:	f001 fdb6 	bl	800c4d8 <pvPortMalloc>
 800a96c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	631a      	str	r2, [r3, #48]	; 0x30
 800a97a:	e005      	b.n	800a988 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a97c:	6978      	ldr	r0, [r7, #20]
 800a97e:	f001 fe6f 	bl	800c660 <vPortFree>
 800a982:	e001      	b.n	800a988 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d017      	beq.n	800a9be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a996:	88fa      	ldrh	r2, [r7, #6]
 800a998:	2300      	movs	r3, #0
 800a99a:	9303      	str	r3, [sp, #12]
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	68b9      	ldr	r1, [r7, #8]
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 f80e 	bl	800a9ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9b2:	69f8      	ldr	r0, [r7, #28]
 800a9b4:	f000 f892 	bl	800aadc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	61bb      	str	r3, [r7, #24]
 800a9bc:	e002      	b.n	800a9c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
	}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b088      	sub	sp, #32
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	607a      	str	r2, [r7, #4]
 800a9da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	21a5      	movs	r1, #165	; 0xa5
 800a9e8:	f001 ff88 	bl	800c8fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	f023 0307 	bic.w	r3, r3, #7
 800aa04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00a      	beq.n	800aa26 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	617b      	str	r3, [r7, #20]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	e012      	b.n	800aa52 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	7819      	ldrb	r1, [r3, #0]
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	3334      	adds	r3, #52	; 0x34
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	2b0f      	cmp	r3, #15
 800aa56:	d9e9      	bls.n	800aa2c <prvInitialiseNewTask+0x5e>
 800aa58:	e000      	b.n	800aa5c <prvInitialiseNewTask+0x8e>
		{
			break;
 800aa5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	2b37      	cmp	r3, #55	; 0x37
 800aa68:	d901      	bls.n	800aa6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa6a:	2337      	movs	r3, #55	; 0x37
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	3304      	adds	r3, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff f987 	bl	8009d98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	3318      	adds	r3, #24
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff f982 	bl	8009d98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2200      	movs	r2, #0
 800aaae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	68f9      	ldr	r1, [r7, #12]
 800aabc:	69b8      	ldr	r0, [r7, #24]
 800aabe:	f001 fabd 	bl	800c03c <pxPortInitialiseStack>
 800aac2:	4602      	mov	r2, r0
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d002      	beq.n	800aad4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aad4:	bf00      	nop
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aae4:	f001 fbd6 	bl	800c294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3301      	adds	r3, #1
 800aaee:	4a2c      	ldr	r2, [pc, #176]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800aaf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaf2:	4b2c      	ldr	r3, [pc, #176]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aafa:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab00:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <prvAddNewTaskToReadyList+0xc4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d110      	bne.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab08:	f000 fc1a 	bl	800b340 <prvInitialiseTaskLists>
 800ab0c:	e00d      	b.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab0e:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <prvAddNewTaskToReadyList+0xcc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab16:	4b23      	ldr	r3, [pc, #140]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d802      	bhi.n	800ab2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab24:	4a1f      	ldr	r2, [pc, #124]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab2a:	4b20      	ldr	r3, [pc, #128]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	4a1e      	ldr	r2, [pc, #120]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab34:	4b1d      	ldr	r3, [pc, #116]	; (800abac <prvAddNewTaskToReadyList+0xd0>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b1b      	ldr	r3, [pc, #108]	; (800abb0 <prvAddNewTaskToReadyList+0xd4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <prvAddNewTaskToReadyList+0x74>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a18      	ldr	r2, [pc, #96]	; (800abb0 <prvAddNewTaskToReadyList+0xd4>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <prvAddNewTaskToReadyList+0xd8>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7ff f923 	bl	8009db2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab6c:	f001 fbc2 	bl	800c2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab70:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <prvAddNewTaskToReadyList+0xcc>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00e      	beq.n	800ab96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <prvAddNewTaskToReadyList+0xc8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d207      	bcs.n	800ab96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvAddNewTaskToReadyList+0xdc>)
 800ab88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000dc8 	.word	0x20000dc8
 800aba4:	200008f4 	.word	0x200008f4
 800aba8:	20000dd4 	.word	0x20000dd4
 800abac:	20000de4 	.word	0x20000de4
 800abb0:	20000dd0 	.word	0x20000dd0
 800abb4:	200008f8 	.word	0x200008f8
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d017      	beq.n	800abfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <vTaskDelay+0x60>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <vTaskDelay+0x30>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	60bb      	str	r3, [r7, #8]
}
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abec:	f000 f880 	bl	800acf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abf0:	2100      	movs	r1, #0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 febc 	bl	800b970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abf8:	f000 f888 	bl	800ad0c <xTaskResumeAll>
 800abfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac04:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <vTaskDelay+0x64>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	20000df0 	.word	0x20000df0
 800ac20:	e000ed04 	.word	0xe000ed04

0800ac24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08a      	sub	sp, #40	; 0x28
 800ac28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac32:	463a      	mov	r2, r7
 800ac34:	1d39      	adds	r1, r7, #4
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff f858 	bl	8009cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	9202      	str	r2, [sp, #8]
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	460a      	mov	r2, r1
 800ac52:	4921      	ldr	r1, [pc, #132]	; (800acd8 <vTaskStartScheduler+0xb4>)
 800ac54:	4821      	ldr	r0, [pc, #132]	; (800acdc <vTaskStartScheduler+0xb8>)
 800ac56:	f7ff fe19 	bl	800a88c <xTaskCreateStatic>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4a20      	ldr	r2, [pc, #128]	; (800ace0 <vTaskStartScheduler+0xbc>)
 800ac5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac60:	4b1f      	ldr	r3, [pc, #124]	; (800ace0 <vTaskStartScheduler+0xbc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	e001      	b.n	800ac72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d102      	bne.n	800ac7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac78:	f000 fece 	bl	800ba18 <xTimerCreateTimerTask>
 800ac7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d116      	bne.n	800acb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	613b      	str	r3, [r7, #16]
}
 800ac96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac98:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <vTaskStartScheduler+0xc0>)
 800ac9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <vTaskStartScheduler+0xc4>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <vTaskStartScheduler+0xc8>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acac:	f001 fa50 	bl	800c150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acb0:	e00e      	b.n	800acd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d10a      	bne.n	800acd0 <vTaskStartScheduler+0xac>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	60fb      	str	r3, [r7, #12]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <vTaskStartScheduler+0xaa>
}
 800acd0:	bf00      	nop
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	0800f5a0 	.word	0x0800f5a0
 800acdc:	0800b311 	.word	0x0800b311
 800ace0:	20000dec 	.word	0x20000dec
 800ace4:	20000de8 	.word	0x20000de8
 800ace8:	20000dd4 	.word	0x20000dd4
 800acec:	20000dcc 	.word	0x20000dcc

0800acf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800acf4:	4b04      	ldr	r3, [pc, #16]	; (800ad08 <vTaskSuspendAll+0x18>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	4a03      	ldr	r2, [pc, #12]	; (800ad08 <vTaskSuspendAll+0x18>)
 800acfc:	6013      	str	r3, [r2, #0]
}
 800acfe:	bf00      	nop
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	20000df0 	.word	0x20000df0

0800ad0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad1a:	4b42      	ldr	r3, [pc, #264]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	603b      	str	r3, [r7, #0]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad38:	f001 faac 	bl	800c294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad3c:	4b39      	ldr	r3, [pc, #228]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4a38      	ldr	r2, [pc, #224]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad46:	4b37      	ldr	r3, [pc, #220]	; (800ae24 <xTaskResumeAll+0x118>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d162      	bne.n	800ae14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad4e:	4b36      	ldr	r3, [pc, #216]	; (800ae28 <xTaskResumeAll+0x11c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d05e      	beq.n	800ae14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad56:	e02f      	b.n	800adb8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ad58:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <xTaskResumeAll+0x120>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3318      	adds	r3, #24
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff f881 	bl	8009e6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff f87c 	bl	8009e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad78:	4b2d      	ldr	r3, [pc, #180]	; (800ae30 <xTaskResumeAll+0x124>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d903      	bls.n	800ad88 <xTaskResumeAll+0x7c>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4a2a      	ldr	r2, [pc, #168]	; (800ae30 <xTaskResumeAll+0x124>)
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4a27      	ldr	r2, [pc, #156]	; (800ae34 <xTaskResumeAll+0x128>)
 800ad96:	441a      	add	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7ff f807 	bl	8009db2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada8:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <xTaskResumeAll+0x12c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	429a      	cmp	r2, r3
 800adb0:	d302      	bcc.n	800adb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800adb2:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <xTaskResumeAll+0x130>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adb8:	4b1c      	ldr	r3, [pc, #112]	; (800ae2c <xTaskResumeAll+0x120>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1cb      	bne.n	800ad58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adc6:	f000 fb59 	bl	800b47c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800adca:	4b1d      	ldr	r3, [pc, #116]	; (800ae40 <xTaskResumeAll+0x134>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d010      	beq.n	800adf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800add6:	f000 f847 	bl	800ae68 <xTaskIncrementTick>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ade0:	4b16      	ldr	r3, [pc, #88]	; (800ae3c <xTaskResumeAll+0x130>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3b01      	subs	r3, #1
 800adea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f1      	bne.n	800add6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800adf2:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <xTaskResumeAll+0x134>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800adf8:	4b10      	ldr	r3, [pc, #64]	; (800ae3c <xTaskResumeAll+0x130>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d009      	beq.n	800ae14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae00:	2301      	movs	r3, #1
 800ae02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae04:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <xTaskResumeAll+0x138>)
 800ae06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae14:	f001 fa6e 	bl	800c2f4 <vPortExitCritical>

	return xAlreadyYielded;
 800ae18:	68bb      	ldr	r3, [r7, #8]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20000df0 	.word	0x20000df0
 800ae28:	20000dc8 	.word	0x20000dc8
 800ae2c:	20000d88 	.word	0x20000d88
 800ae30:	20000dd0 	.word	0x20000dd0
 800ae34:	200008f8 	.word	0x200008f8
 800ae38:	200008f4 	.word	0x200008f4
 800ae3c:	20000ddc 	.word	0x20000ddc
 800ae40:	20000dd8 	.word	0x20000dd8
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <xTaskGetTickCount+0x1c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae54:	687b      	ldr	r3, [r7, #4]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000dcc 	.word	0x20000dcc

0800ae68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae72:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <xTaskIncrementTick+0x150>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f040 808e 	bne.w	800af98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae7c:	4b4f      	ldr	r3, [pc, #316]	; (800afbc <xTaskIncrementTick+0x154>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3301      	adds	r3, #1
 800ae82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae84:	4a4d      	ldr	r2, [pc, #308]	; (800afbc <xTaskIncrementTick+0x154>)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d120      	bne.n	800aed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae90:	4b4b      	ldr	r3, [pc, #300]	; (800afc0 <xTaskIncrementTick+0x158>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	603b      	str	r3, [r7, #0]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xTaskIncrementTick+0x46>
 800aeb0:	4b43      	ldr	r3, [pc, #268]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	4b43      	ldr	r3, [pc, #268]	; (800afc4 <xTaskIncrementTick+0x15c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a41      	ldr	r2, [pc, #260]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	4a41      	ldr	r2, [pc, #260]	; (800afc4 <xTaskIncrementTick+0x15c>)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	4b40      	ldr	r3, [pc, #256]	; (800afc8 <xTaskIncrementTick+0x160>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	4a3f      	ldr	r2, [pc, #252]	; (800afc8 <xTaskIncrementTick+0x160>)
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	f000 fad5 	bl	800b47c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aed2:	4b3e      	ldr	r3, [pc, #248]	; (800afcc <xTaskIncrementTick+0x164>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d34e      	bcc.n	800af7a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aedc:	4b38      	ldr	r3, [pc, #224]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <xTaskIncrementTick+0x82>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <xTaskIncrementTick+0x84>
 800aeea:	2300      	movs	r3, #0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef0:	4b36      	ldr	r3, [pc, #216]	; (800afcc <xTaskIncrementTick+0x164>)
 800aef2:	f04f 32ff 	mov.w	r2, #4294967295
 800aef6:	601a      	str	r2, [r3, #0]
					break;
 800aef8:	e03f      	b.n	800af7a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aefa:	4b31      	ldr	r3, [pc, #196]	; (800afc0 <xTaskIncrementTick+0x158>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d203      	bcs.n	800af1a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af12:	4a2e      	ldr	r2, [pc, #184]	; (800afcc <xTaskIncrementTick+0x164>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6013      	str	r3, [r2, #0]
						break;
 800af18:	e02f      	b.n	800af7a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe ffa4 	bl	8009e6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	3318      	adds	r3, #24
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe ff9b 	bl	8009e6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	4b25      	ldr	r3, [pc, #148]	; (800afd0 <xTaskIncrementTick+0x168>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d903      	bls.n	800af4a <xTaskIncrementTick+0xe2>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af46:	4a22      	ldr	r2, [pc, #136]	; (800afd0 <xTaskIncrementTick+0x168>)
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <xTaskIncrementTick+0x16c>)
 800af58:	441a      	add	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f7fe ff26 	bl	8009db2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	4b1b      	ldr	r3, [pc, #108]	; (800afd8 <xTaskIncrementTick+0x170>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	429a      	cmp	r2, r3
 800af72:	d3b3      	bcc.n	800aedc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af78:	e7b0      	b.n	800aedc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af7a:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <xTaskIncrementTick+0x170>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af80:	4914      	ldr	r1, [pc, #80]	; (800afd4 <xTaskIncrementTick+0x16c>)
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d907      	bls.n	800afa2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800af92:	2301      	movs	r3, #1
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	e004      	b.n	800afa2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800af98:	4b10      	ldr	r3, [pc, #64]	; (800afdc <xTaskIncrementTick+0x174>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3301      	adds	r3, #1
 800af9e:	4a0f      	ldr	r2, [pc, #60]	; (800afdc <xTaskIncrementTick+0x174>)
 800afa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800afa2:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <xTaskIncrementTick+0x178>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800afaa:	2301      	movs	r3, #1
 800afac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800afae:	697b      	ldr	r3, [r7, #20]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000df0 	.word	0x20000df0
 800afbc:	20000dcc 	.word	0x20000dcc
 800afc0:	20000d80 	.word	0x20000d80
 800afc4:	20000d84 	.word	0x20000d84
 800afc8:	20000de0 	.word	0x20000de0
 800afcc:	20000de8 	.word	0x20000de8
 800afd0:	20000dd0 	.word	0x20000dd0
 800afd4:	200008f8 	.word	0x200008f8
 800afd8:	200008f4 	.word	0x200008f4
 800afdc:	20000dd8 	.word	0x20000dd8
 800afe0:	20000ddc 	.word	0x20000ddc

0800afe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afea:	4b28      	ldr	r3, [pc, #160]	; (800b08c <vTaskSwitchContext+0xa8>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aff2:	4b27      	ldr	r3, [pc, #156]	; (800b090 <vTaskSwitchContext+0xac>)
 800aff4:	2201      	movs	r2, #1
 800aff6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aff8:	e041      	b.n	800b07e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800affa:	4b25      	ldr	r3, [pc, #148]	; (800b090 <vTaskSwitchContext+0xac>)
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b000:	4b24      	ldr	r3, [pc, #144]	; (800b094 <vTaskSwitchContext+0xb0>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	e010      	b.n	800b02a <vTaskSwitchContext+0x46>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <vTaskSwitchContext+0x40>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	607b      	str	r3, [r7, #4]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <vTaskSwitchContext+0x3e>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3b01      	subs	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	491b      	ldr	r1, [pc, #108]	; (800b098 <vTaskSwitchContext+0xb4>)
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0e4      	beq.n	800b008 <vTaskSwitchContext+0x24>
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4a13      	ldr	r2, [pc, #76]	; (800b098 <vTaskSwitchContext+0xb4>)
 800b04a:	4413      	add	r3, r2
 800b04c:	60bb      	str	r3, [r7, #8]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	605a      	str	r2, [r3, #4]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3308      	adds	r3, #8
 800b060:	429a      	cmp	r2, r3
 800b062:	d104      	bne.n	800b06e <vTaskSwitchContext+0x8a>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	685a      	ldr	r2, [r3, #4]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	605a      	str	r2, [r3, #4]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4a09      	ldr	r2, [pc, #36]	; (800b09c <vTaskSwitchContext+0xb8>)
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	4a06      	ldr	r2, [pc, #24]	; (800b094 <vTaskSwitchContext+0xb0>)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6013      	str	r3, [r2, #0]
}
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	20000df0 	.word	0x20000df0
 800b090:	20000ddc 	.word	0x20000ddc
 800b094:	20000dd0 	.word	0x20000dd0
 800b098:	200008f8 	.word	0x200008f8
 800b09c:	200008f4 	.word	0x200008f4

0800b0a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60fb      	str	r3, [r7, #12]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0c6:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <vTaskPlaceOnEventList+0x44>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3318      	adds	r3, #24
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7fe fe93 	bl	8009dfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	6838      	ldr	r0, [r7, #0]
 800b0d8:	f000 fc4a 	bl	800b970 <prvAddCurrentTaskToDelayedList>
}
 800b0dc:	bf00      	nop
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	200008f4 	.word	0x200008f4

0800b0e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10a      	bne.n	800b110 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	617b      	str	r3, [r7, #20]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <vTaskPlaceOnEventListRestricted+0x54>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3318      	adds	r3, #24
 800b116:	4619      	mov	r1, r3
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7fe fe4a 	bl	8009db2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b124:	f04f 33ff 	mov.w	r3, #4294967295
 800b128:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	68b8      	ldr	r0, [r7, #8]
 800b12e:	f000 fc1f 	bl	800b970 <prvAddCurrentTaskToDelayedList>
	}
 800b132:	bf00      	nop
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	200008f4 	.word	0x200008f4

0800b140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	60fb      	str	r3, [r7, #12]
}
 800b168:	bf00      	nop
 800b16a:	e7fe      	b.n	800b16a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	3318      	adds	r3, #24
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fe7b 	bl	8009e6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b176:	4b1e      	ldr	r3, [pc, #120]	; (800b1f0 <xTaskRemoveFromEventList+0xb0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d11d      	bne.n	800b1ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	3304      	adds	r3, #4
 800b182:	4618      	mov	r0, r3
 800b184:	f7fe fe72 	bl	8009e6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4b19      	ldr	r3, [pc, #100]	; (800b1f4 <xTaskRemoveFromEventList+0xb4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d903      	bls.n	800b19c <xTaskRemoveFromEventList+0x5c>
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	4a16      	ldr	r2, [pc, #88]	; (800b1f4 <xTaskRemoveFromEventList+0xb4>)
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4a13      	ldr	r2, [pc, #76]	; (800b1f8 <xTaskRemoveFromEventList+0xb8>)
 800b1aa:	441a      	add	r2, r3
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f7fe fdfd 	bl	8009db2 <vListInsertEnd>
 800b1b8:	e005      	b.n	800b1c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	3318      	adds	r3, #24
 800b1be:	4619      	mov	r1, r3
 800b1c0:	480e      	ldr	r0, [pc, #56]	; (800b1fc <xTaskRemoveFromEventList+0xbc>)
 800b1c2:	f7fe fdf6 	bl	8009db2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <xTaskRemoveFromEventList+0xc0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d905      	bls.n	800b1e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <xTaskRemoveFromEventList+0xc4>)
 800b1da:	2201      	movs	r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e001      	b.n	800b1e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b1e4:	697b      	ldr	r3, [r7, #20]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000df0 	.word	0x20000df0
 800b1f4:	20000dd0 	.word	0x20000dd0
 800b1f8:	200008f8 	.word	0x200008f8
 800b1fc:	20000d88 	.word	0x20000d88
 800b200:	200008f4 	.word	0x200008f4
 800b204:	20000ddc 	.word	0x20000ddc

0800b208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b210:	4b06      	ldr	r3, [pc, #24]	; (800b22c <vTaskInternalSetTimeOutState+0x24>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b218:	4b05      	ldr	r3, [pc, #20]	; (800b230 <vTaskInternalSetTimeOutState+0x28>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20000de0 	.word	0x20000de0
 800b230:	20000dcc 	.word	0x20000dcc

0800b234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10a      	bne.n	800b25a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	613b      	str	r3, [r7, #16]
}
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	60fb      	str	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b276:	f001 f80d 	bl	800c294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b27a:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <xTaskCheckForTimeOut+0xbc>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d102      	bne.n	800b29a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	e023      	b.n	800b2e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	4b15      	ldr	r3, [pc, #84]	; (800b2f4 <xTaskCheckForTimeOut+0xc0>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d007      	beq.n	800b2b6 <xTaskCheckForTimeOut+0x82>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d302      	bcc.n	800b2b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	e015      	b.n	800b2e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d20b      	bcs.n	800b2d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff ff9b 	bl	800b208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e004      	b.n	800b2e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2e2:	f001 f807 	bl	800c2f4 <vPortExitCritical>

	return xReturn;
 800b2e6:	69fb      	ldr	r3, [r7, #28]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3720      	adds	r7, #32
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20000dcc 	.word	0x20000dcc
 800b2f4:	20000de0 	.word	0x20000de0

0800b2f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2fc:	4b03      	ldr	r3, [pc, #12]	; (800b30c <vTaskMissedYield+0x14>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20000ddc 	.word	0x20000ddc

0800b310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b318:	f000 f852 	bl	800b3c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b31c:	4b06      	ldr	r3, [pc, #24]	; (800b338 <prvIdleTask+0x28>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d9f9      	bls.n	800b318 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b324:	4b05      	ldr	r3, [pc, #20]	; (800b33c <prvIdleTask+0x2c>)
 800b326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b334:	e7f0      	b.n	800b318 <prvIdleTask+0x8>
 800b336:	bf00      	nop
 800b338:	200008f8 	.word	0x200008f8
 800b33c:	e000ed04 	.word	0xe000ed04

0800b340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b346:	2300      	movs	r3, #0
 800b348:	607b      	str	r3, [r7, #4]
 800b34a:	e00c      	b.n	800b366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a12      	ldr	r2, [pc, #72]	; (800b3a0 <prvInitialiseTaskLists+0x60>)
 800b358:	4413      	add	r3, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fcfc 	bl	8009d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3301      	adds	r3, #1
 800b364:	607b      	str	r3, [r7, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b37      	cmp	r3, #55	; 0x37
 800b36a:	d9ef      	bls.n	800b34c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b36c:	480d      	ldr	r0, [pc, #52]	; (800b3a4 <prvInitialiseTaskLists+0x64>)
 800b36e:	f7fe fcf3 	bl	8009d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b372:	480d      	ldr	r0, [pc, #52]	; (800b3a8 <prvInitialiseTaskLists+0x68>)
 800b374:	f7fe fcf0 	bl	8009d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b378:	480c      	ldr	r0, [pc, #48]	; (800b3ac <prvInitialiseTaskLists+0x6c>)
 800b37a:	f7fe fced 	bl	8009d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b37e:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <prvInitialiseTaskLists+0x70>)
 800b380:	f7fe fcea 	bl	8009d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b384:	480b      	ldr	r0, [pc, #44]	; (800b3b4 <prvInitialiseTaskLists+0x74>)
 800b386:	f7fe fce7 	bl	8009d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b38a:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <prvInitialiseTaskLists+0x78>)
 800b38c:	4a05      	ldr	r2, [pc, #20]	; (800b3a4 <prvInitialiseTaskLists+0x64>)
 800b38e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <prvInitialiseTaskLists+0x7c>)
 800b392:	4a05      	ldr	r2, [pc, #20]	; (800b3a8 <prvInitialiseTaskLists+0x68>)
 800b394:	601a      	str	r2, [r3, #0]
}
 800b396:	bf00      	nop
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	200008f8 	.word	0x200008f8
 800b3a4:	20000d58 	.word	0x20000d58
 800b3a8:	20000d6c 	.word	0x20000d6c
 800b3ac:	20000d88 	.word	0x20000d88
 800b3b0:	20000d9c 	.word	0x20000d9c
 800b3b4:	20000db4 	.word	0x20000db4
 800b3b8:	20000d80 	.word	0x20000d80
 800b3bc:	20000d84 	.word	0x20000d84

0800b3c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3c6:	e019      	b.n	800b3fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3c8:	f000 ff64 	bl	800c294 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b3cc:	4b10      	ldr	r3, [pc, #64]	; (800b410 <prvCheckTasksWaitingTermination+0x50>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fd47 	bl	8009e6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <prvCheckTasksWaitingTermination+0x54>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	4a0b      	ldr	r2, [pc, #44]	; (800b414 <prvCheckTasksWaitingTermination+0x54>)
 800b3e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <prvCheckTasksWaitingTermination+0x58>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4a0a      	ldr	r2, [pc, #40]	; (800b418 <prvCheckTasksWaitingTermination+0x58>)
 800b3f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b3f2:	f000 ff7f 	bl	800c2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f810 	bl	800b41c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <prvCheckTasksWaitingTermination+0x58>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e1      	bne.n	800b3c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000d9c 	.word	0x20000d9c
 800b414:	20000dc8 	.word	0x20000dc8
 800b418:	20000db0 	.word	0x20000db0

0800b41c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d108      	bne.n	800b440 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	4618      	mov	r0, r3
 800b434:	f001 f914 	bl	800c660 <vPortFree>
				vPortFree( pxTCB );
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 f911 	bl	800c660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b43e:	e018      	b.n	800b472 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b446:	2b01      	cmp	r3, #1
 800b448:	d103      	bne.n	800b452 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 f908 	bl	800c660 <vPortFree>
	}
 800b450:	e00f      	b.n	800b472 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d00a      	beq.n	800b472 <prvDeleteTCB+0x56>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	60fb      	str	r3, [r7, #12]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <prvDeleteTCB+0x54>
	}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b482:	4b0f      	ldr	r3, [pc, #60]	; (800b4c0 <prvResetNextTaskUnblockTime+0x44>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <prvResetNextTaskUnblockTime+0x14>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e000      	b.n	800b492 <prvResetNextTaskUnblockTime+0x16>
 800b490:	2300      	movs	r3, #0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d004      	beq.n	800b4a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <prvResetNextTaskUnblockTime+0x48>)
 800b498:	f04f 32ff 	mov.w	r2, #4294967295
 800b49c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b49e:	e008      	b.n	800b4b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <prvResetNextTaskUnblockTime+0x44>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a05      	ldr	r2, [pc, #20]	; (800b4c4 <prvResetNextTaskUnblockTime+0x48>)
 800b4b0:	6013      	str	r3, [r2, #0]
}
 800b4b2:	bf00      	nop
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	20000d80 	.word	0x20000d80
 800b4c4:	20000de8 	.word	0x20000de8

0800b4c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b4ce:	4b0b      	ldr	r3, [pc, #44]	; (800b4fc <xTaskGetSchedulerState+0x34>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	e008      	b.n	800b4ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <xTaskGetSchedulerState+0x38>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	607b      	str	r3, [r7, #4]
 800b4e8:	e001      	b.n	800b4ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b4ee:	687b      	ldr	r3, [r7, #4]
	}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	20000dd4 	.word	0x20000dd4
 800b500:	20000df0 	.word	0x20000df0

0800b504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b510:	2300      	movs	r3, #0
 800b512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d056      	beq.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b51a:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <xTaskPriorityDisinherit+0xd0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	429a      	cmp	r2, r3
 800b522:	d00a      	beq.n	800b53a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60bb      	str	r3, [r7, #8]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	1e5a      	subs	r2, r3, #1
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d02c      	beq.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b572:	2b00      	cmp	r3, #0
 800b574:	d128      	bne.n	800b5c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	3304      	adds	r3, #4
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fc76 	bl	8009e6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b598:	4b0f      	ldr	r3, [pc, #60]	; (800b5d8 <xTaskPriorityDisinherit+0xd4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d903      	bls.n	800b5a8 <xTaskPriorityDisinherit+0xa4>
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <xTaskPriorityDisinherit+0xd4>)
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4a09      	ldr	r2, [pc, #36]	; (800b5dc <xTaskPriorityDisinherit+0xd8>)
 800b5b6:	441a      	add	r2, r3
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4610      	mov	r0, r2
 800b5c0:	f7fe fbf7 	bl	8009db2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b5c8:	697b      	ldr	r3, [r7, #20]
	}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200008f4 	.word	0x200008f4
 800b5d8:	20000dd0 	.word	0x20000dd0
 800b5dc:	200008f8 	.word	0x200008f8

0800b5e0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b5ee:	f000 fe51 	bl	800c294 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b5f2:	4b26      	ldr	r3, [pc, #152]	; (800b68c <xTaskNotifyWait+0xac>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d01a      	beq.n	800b636 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b600:	4b22      	ldr	r3, [pc, #136]	; (800b68c <xTaskNotifyWait+0xac>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	43d2      	mvns	r2, r2
 800b60a:	400a      	ands	r2, r1
 800b60c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b60e:	4b1f      	ldr	r3, [pc, #124]	; (800b68c <xTaskNotifyWait+0xac>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b61e:	2101      	movs	r1, #1
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f000 f9a5 	bl	800b970 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b626:	4b1a      	ldr	r3, [pc, #104]	; (800b690 <xTaskNotifyWait+0xb0>)
 800b628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b636:	f000 fe5d 	bl	800c2f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b63a:	f000 fe2b 	bl	800c294 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b644:	4b11      	ldr	r3, [pc, #68]	; (800b68c <xTaskNotifyWait+0xac>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <xTaskNotifyWait+0xac>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d002      	beq.n	800b662 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e008      	b.n	800b674 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b662:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <xTaskNotifyWait+0xac>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	43d2      	mvns	r2, r2
 800b66c:	400a      	ands	r2, r1
 800b66e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <xTaskNotifyWait+0xac>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b67e:	f000 fe39 	bl	800c2f4 <vPortExitCritical>

		return xReturn;
 800b682:	697b      	ldr	r3, [r7, #20]
	}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	200008f4 	.word	0x200008f4
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08a      	sub	sp, #40	; 0x28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10a      	bne.n	800b6c4 <xTaskGenericNotify+0x30>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	61bb      	str	r3, [r7, #24]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b6c8:	f000 fde4 	bl	800c294 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b6e0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b04      	cmp	r3, #4
 800b6ee:	d828      	bhi.n	800b742 <xTaskGenericNotify+0xae>
 800b6f0:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <xTaskGenericNotify+0x64>)
 800b6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f6:	bf00      	nop
 800b6f8:	0800b743 	.word	0x0800b743
 800b6fc:	0800b70d 	.word	0x0800b70d
 800b700:	0800b71b 	.word	0x0800b71b
 800b704:	0800b727 	.word	0x0800b727
 800b708:	0800b72f 	.word	0x0800b72f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	431a      	orrs	r2, r3
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b718:	e013      	b.n	800b742 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	1c5a      	adds	r2, r3, #1
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b724:	e00d      	b.n	800b742 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b72c:	e009      	b.n	800b742 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b72e:	7ffb      	ldrb	r3, [r7, #31]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d003      	beq.n	800b73c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b73a:	e001      	b.n	800b740 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800b73c:	2300      	movs	r3, #0
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b740:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b742:	7ffb      	ldrb	r3, [r7, #31]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d13a      	bne.n	800b7be <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fb8d 	bl	8009e6c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	4b1d      	ldr	r3, [pc, #116]	; (800b7cc <xTaskGenericNotify+0x138>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d903      	bls.n	800b766 <xTaskGenericNotify+0xd2>
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	4a1a      	ldr	r2, [pc, #104]	; (800b7cc <xTaskGenericNotify+0x138>)
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4a17      	ldr	r2, [pc, #92]	; (800b7d0 <xTaskGenericNotify+0x13c>)
 800b774:	441a      	add	r2, r3
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f7fe fb18 	bl	8009db2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <xTaskGenericNotify+0x10c>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	617b      	str	r3, [r7, #20]
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4b0b      	ldr	r3, [pc, #44]	; (800b7d4 <xTaskGenericNotify+0x140>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d907      	bls.n	800b7be <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b7ae:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <xTaskGenericNotify+0x144>)
 800b7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b7be:	f000 fd99 	bl	800c2f4 <vPortExitCritical>

		return xReturn;
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3728      	adds	r7, #40	; 0x28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20000dd0 	.word	0x20000dd0
 800b7d0:	200008f8 	.word	0x200008f8
 800b7d4:	200008f4 	.word	0x200008f4
 800b7d8:	e000ed04 	.word	0xe000ed04

0800b7dc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	; 0x38
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b80c:	f000 fe24 	bl	800c458 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b814:	f3ef 8211 	mrs	r2, BASEPRI
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	623a      	str	r2, [r7, #32]
 800b82a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b82c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b04      	cmp	r3, #4
 800b854:	d828      	bhi.n	800b8a8 <xTaskGenericNotifyFromISR+0xcc>
 800b856:	a201      	add	r2, pc, #4	; (adr r2, 800b85c <xTaskGenericNotifyFromISR+0x80>)
 800b858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85c:	0800b8a9 	.word	0x0800b8a9
 800b860:	0800b871 	.word	0x0800b871
 800b864:	0800b87f 	.word	0x0800b87f
 800b868:	0800b88b 	.word	0x0800b88b
 800b86c:	0800b893 	.word	0x0800b893
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	431a      	orrs	r2, r3
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b87c:	e014      	b.n	800b8a8 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b888:	e00e      	b.n	800b8a8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b890:	e00a      	b.n	800b8a8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b896:	2b02      	cmp	r3, #2
 800b898:	d003      	beq.n	800b8a2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b8a0:	e001      	b.n	800b8a6 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b8a6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b8a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d147      	bne.n	800b940 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00a      	beq.n	800b8ce <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	61bb      	str	r3, [r7, #24]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ce:	4b22      	ldr	r3, [pc, #136]	; (800b958 <xTaskGenericNotifyFromISR+0x17c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d11d      	bne.n	800b912 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	3304      	adds	r3, #4
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fac6 	bl	8009e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e4:	4b1d      	ldr	r3, [pc, #116]	; (800b95c <xTaskGenericNotifyFromISR+0x180>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d903      	bls.n	800b8f4 <xTaskGenericNotifyFromISR+0x118>
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	4a1a      	ldr	r2, [pc, #104]	; (800b95c <xTaskGenericNotifyFromISR+0x180>)
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4a17      	ldr	r2, [pc, #92]	; (800b960 <xTaskGenericNotifyFromISR+0x184>)
 800b902:	441a      	add	r2, r3
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	3304      	adds	r3, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f7fe fa51 	bl	8009db2 <vListInsertEnd>
 800b910:	e005      	b.n	800b91e <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b914:	3318      	adds	r3, #24
 800b916:	4619      	mov	r1, r3
 800b918:	4812      	ldr	r0, [pc, #72]	; (800b964 <xTaskGenericNotifyFromISR+0x188>)
 800b91a:	f7fe fa4a 	bl	8009db2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b922:	4b11      	ldr	r3, [pc, #68]	; (800b968 <xTaskGenericNotifyFromISR+0x18c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	429a      	cmp	r2, r3
 800b92a:	d909      	bls.n	800b940 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b934:	2201      	movs	r2, #1
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	e002      	b.n	800b940 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b93a:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <xTaskGenericNotifyFromISR+0x190>)
 800b93c:	2201      	movs	r2, #1
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f383 8811 	msr	BASEPRI, r3
}
 800b94a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b94e:	4618      	mov	r0, r3
 800b950:	3738      	adds	r7, #56	; 0x38
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20000df0 	.word	0x20000df0
 800b95c:	20000dd0 	.word	0x20000dd0
 800b960:	200008f8 	.word	0x200008f8
 800b964:	20000d88 	.word	0x20000d88
 800b968:	200008f4 	.word	0x200008f4
 800b96c:	20000ddc 	.word	0x20000ddc

0800b970 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b97a:	4b21      	ldr	r3, [pc, #132]	; (800ba00 <prvAddCurrentTaskToDelayedList+0x90>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b980:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <prvAddCurrentTaskToDelayedList+0x94>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3304      	adds	r3, #4
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fa70 	bl	8009e6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b992:	d10a      	bne.n	800b9aa <prvAddCurrentTaskToDelayedList+0x3a>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d007      	beq.n	800b9aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b99a:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4819      	ldr	r0, [pc, #100]	; (800ba08 <prvAddCurrentTaskToDelayedList+0x98>)
 800b9a4:	f7fe fa05 	bl	8009db2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9a8:	e026      	b.n	800b9f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9b2:	4b14      	ldr	r3, [pc, #80]	; (800ba04 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d209      	bcs.n	800b9d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f7fe fa13 	bl	8009dfa <vListInsert>
}
 800b9d4:	e010      	b.n	800b9f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9d6:	4b0e      	ldr	r3, [pc, #56]	; (800ba10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7fe fa09 	bl	8009dfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d202      	bcs.n	800b9f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9f2:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	6013      	str	r3, [r2, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	20000dcc 	.word	0x20000dcc
 800ba04:	200008f4 	.word	0x200008f4
 800ba08:	20000db4 	.word	0x20000db4
 800ba0c:	20000d84 	.word	0x20000d84
 800ba10:	20000d80 	.word	0x20000d80
 800ba14:	20000de8 	.word	0x20000de8

0800ba18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08a      	sub	sp, #40	; 0x28
 800ba1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba22:	f000 facb 	bl	800bfbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba26:	4b1c      	ldr	r3, [pc, #112]	; (800ba98 <xTimerCreateTimerTask+0x80>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d021      	beq.n	800ba72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba36:	1d3a      	adds	r2, r7, #4
 800ba38:	f107 0108 	add.w	r1, r7, #8
 800ba3c:	f107 030c 	add.w	r3, r7, #12
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe f96f 	bl	8009d24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	9202      	str	r2, [sp, #8]
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	2302      	movs	r3, #2
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	460a      	mov	r2, r1
 800ba58:	4910      	ldr	r1, [pc, #64]	; (800ba9c <xTimerCreateTimerTask+0x84>)
 800ba5a:	4811      	ldr	r0, [pc, #68]	; (800baa0 <xTimerCreateTimerTask+0x88>)
 800ba5c:	f7fe ff16 	bl	800a88c <xTaskCreateStatic>
 800ba60:	4603      	mov	r3, r0
 800ba62:	4a10      	ldr	r2, [pc, #64]	; (800baa4 <xTimerCreateTimerTask+0x8c>)
 800ba64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <xTimerCreateTimerTask+0x8c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	613b      	str	r3, [r7, #16]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba8e:	697b      	ldr	r3, [r7, #20]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20000e24 	.word	0x20000e24
 800ba9c:	0800f5a8 	.word	0x0800f5a8
 800baa0:	0800bbc5 	.word	0x0800bbc5
 800baa4:	20000e28 	.word	0x20000e28

0800baa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	; 0x28
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10a      	bne.n	800bad6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	623b      	str	r3, [r7, #32]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bad6:	4b1a      	ldr	r3, [pc, #104]	; (800bb40 <xTimerGenericCommand+0x98>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d02a      	beq.n	800bb34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	2b05      	cmp	r3, #5
 800baee:	dc18      	bgt.n	800bb22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800baf0:	f7ff fcea 	bl	800b4c8 <xTaskGetSchedulerState>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d109      	bne.n	800bb0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bafa:	4b11      	ldr	r3, [pc, #68]	; (800bb40 <xTimerGenericCommand+0x98>)
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f107 0110 	add.w	r1, r7, #16
 800bb02:	2300      	movs	r3, #0
 800bb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb06:	f7fe fadd 	bl	800a0c4 <xQueueGenericSend>
 800bb0a:	6278      	str	r0, [r7, #36]	; 0x24
 800bb0c:	e012      	b.n	800bb34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <xTimerGenericCommand+0x98>)
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	f107 0110 	add.w	r1, r7, #16
 800bb16:	2300      	movs	r3, #0
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f7fe fad3 	bl	800a0c4 <xQueueGenericSend>
 800bb1e:	6278      	str	r0, [r7, #36]	; 0x24
 800bb20:	e008      	b.n	800bb34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb22:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <xTimerGenericCommand+0x98>)
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	f107 0110 	add.w	r1, r7, #16
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	f7fe fbc7 	bl	800a2c0 <xQueueGenericSendFromISR>
 800bb32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3728      	adds	r7, #40	; 0x28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20000e24 	.word	0x20000e24

0800bb44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb4e:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <prvProcessExpiredTimer+0x7c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe f985 	bl	8009e6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d122      	bne.n	800bbb0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	18d1      	adds	r1, r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	6978      	ldr	r0, [r7, #20]
 800bb78:	f000 f8c8 	bl	800bd0c <prvInsertTimerInActiveList>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d016      	beq.n	800bbb0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb82:	2300      	movs	r3, #0
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	f7ff ff8b 	bl	800baa8 <xTimerGenericCommand>
 800bb92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10a      	bne.n	800bbb0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	60fb      	str	r3, [r7, #12]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	6978      	ldr	r0, [r7, #20]
 800bbb6:	4798      	blx	r3
}
 800bbb8:	bf00      	nop
 800bbba:	3718      	adds	r7, #24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000e1c 	.word	0x20000e1c

0800bbc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbcc:	f107 0308 	add.w	r3, r7, #8
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 f857 	bl	800bc84 <prvGetNextExpireTime>
 800bbd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 f803 	bl	800bbe8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbe2:	f000 f8d5 	bl	800bd90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbe6:	e7f1      	b.n	800bbcc <prvTimerTask+0x8>

0800bbe8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbf2:	f7ff f87d 	bl	800acf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f866 	bl	800bccc <prvSampleTimeNow>
 800bc00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d130      	bne.n	800bc6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10a      	bne.n	800bc24 <prvProcessTimerOrBlockTask+0x3c>
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d806      	bhi.n	800bc24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc16:	f7ff f879 	bl	800ad0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ff91 	bl	800bb44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc22:	e024      	b.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d008      	beq.n	800bc3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc2a:	4b13      	ldr	r3, [pc, #76]	; (800bc78 <prvProcessTimerOrBlockTask+0x90>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bf0c      	ite	eq
 800bc34:	2301      	moveq	r3, #1
 800bc36:	2300      	movne	r3, #0
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <prvProcessTimerOrBlockTask+0x94>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f7fe fdeb 	bl	800a824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc4e:	f7ff f85d 	bl	800ad0c <xTaskResumeAll>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc58:	4b09      	ldr	r3, [pc, #36]	; (800bc80 <prvProcessTimerOrBlockTask+0x98>)
 800bc5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	f3bf 8f6f 	isb	sy
}
 800bc68:	e001      	b.n	800bc6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc6a:	f7ff f84f 	bl	800ad0c <xTaskResumeAll>
}
 800bc6e:	bf00      	nop
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000e20 	.word	0x20000e20
 800bc7c:	20000e24 	.word	0x20000e24
 800bc80:	e000ed04 	.word	0xe000ed04

0800bc84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc8c:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <prvGetNextExpireTime+0x44>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d105      	bne.n	800bcb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcaa:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <prvGetNextExpireTime+0x44>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	e001      	b.n	800bcba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20000e1c 	.word	0x20000e1c

0800bccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcd4:	f7ff f8b8 	bl	800ae48 <xTaskGetTickCount>
 800bcd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <prvSampleTimeNow+0x3c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d205      	bcs.n	800bcf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bce4:	f000 f908 	bl	800bef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	e002      	b.n	800bcf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcf6:	4a04      	ldr	r2, [pc, #16]	; (800bd08 <prvSampleTimeNow+0x3c>)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000e2c 	.word	0x20000e2c

0800bd0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d812      	bhi.n	800bd58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	1ad2      	subs	r2, r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d302      	bcc.n	800bd46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	e01b      	b.n	800bd7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <prvInsertTimerInActiveList+0x7c>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fe f852 	bl	8009dfa <vListInsert>
 800bd56:	e012      	b.n	800bd7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d206      	bcs.n	800bd6e <prvInsertTimerInActiveList+0x62>
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d302      	bcc.n	800bd6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	617b      	str	r3, [r7, #20]
 800bd6c:	e007      	b.n	800bd7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd6e:	4b07      	ldr	r3, [pc, #28]	; (800bd8c <prvInsertTimerInActiveList+0x80>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3304      	adds	r3, #4
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f7fe f83e 	bl	8009dfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd7e:	697b      	ldr	r3, [r7, #20]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000e20 	.word	0x20000e20
 800bd8c:	20000e1c 	.word	0x20000e1c

0800bd90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08e      	sub	sp, #56	; 0x38
 800bd94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd96:	e09d      	b.n	800bed4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	da18      	bge.n	800bdd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd9e:	1d3b      	adds	r3, r7, #4
 800bda0:	3304      	adds	r3, #4
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10a      	bne.n	800bdc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	61fb      	str	r3, [r7, #28]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc6:	6850      	ldr	r0, [r2, #4]
 800bdc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdca:	6892      	ldr	r2, [r2, #8]
 800bdcc:	4611      	mov	r1, r2
 800bdce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	db7d      	blt.n	800bed2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d004      	beq.n	800bdec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	3304      	adds	r3, #4
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe f840 	bl	8009e6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdec:	463b      	mov	r3, r7
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ff6c 	bl	800bccc <prvSampleTimeNow>
 800bdf4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b09      	cmp	r3, #9
 800bdfa:	d86b      	bhi.n	800bed4 <prvProcessReceivedCommands+0x144>
 800bdfc:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <prvProcessReceivedCommands+0x74>)
 800bdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be02:	bf00      	nop
 800be04:	0800be2d 	.word	0x0800be2d
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be2d 	.word	0x0800be2d
 800be10:	0800bed5 	.word	0x0800bed5
 800be14:	0800be89 	.word	0x0800be89
 800be18:	0800bec1 	.word	0x0800bec1
 800be1c:	0800be2d 	.word	0x0800be2d
 800be20:	0800be2d 	.word	0x0800be2d
 800be24:	0800bed5 	.word	0x0800bed5
 800be28:	0800be89 	.word	0x0800be89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	18d1      	adds	r1, r2, r3
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3a:	f7ff ff67 	bl	800bd0c <prvInsertTimerInActiveList>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d047      	beq.n	800bed4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be4a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d13f      	bne.n	800bed4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	441a      	add	r2, r3
 800be5c:	2300      	movs	r3, #0
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	2300      	movs	r3, #0
 800be62:	2100      	movs	r1, #0
 800be64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be66:	f7ff fe1f 	bl	800baa8 <xTimerGenericCommand>
 800be6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d130      	bne.n	800bed4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	61bb      	str	r3, [r7, #24]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	617b      	str	r3, [r7, #20]
}
 800bea8:	bf00      	nop
 800beaa:	e7fe      	b.n	800beaa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	699a      	ldr	r2, [r3, #24]
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	18d1      	adds	r1, r2, r3
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beba:	f7ff ff27 	bl	800bd0c <prvInsertTimerInActiveList>
					break;
 800bebe:	e009      	b.n	800bed4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d104      	bne.n	800bed4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800beca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800becc:	f000 fbc8 	bl	800c660 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bed0:	e000      	b.n	800bed4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bed2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <prvProcessReceivedCommands+0x164>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	1d39      	adds	r1, r7, #4
 800beda:	2200      	movs	r2, #0
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fa87 	bl	800a3f0 <xQueueReceive>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f47f af57 	bne.w	800bd98 <prvProcessReceivedCommands+0x8>
	}
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	3730      	adds	r7, #48	; 0x30
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	20000e24 	.word	0x20000e24

0800bef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800befe:	e045      	b.n	800bf8c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf00:	4b2c      	ldr	r3, [pc, #176]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf0a:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fd ffa7 	bl	8009e6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d12e      	bne.n	800bf8c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4413      	add	r3, r2
 800bf36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d90e      	bls.n	800bf5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf4c:	4b19      	ldr	r3, [pc, #100]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fd ff4f 	bl	8009dfa <vListInsert>
 800bf5c:	e016      	b.n	800bf8c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf5e:	2300      	movs	r3, #0
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	2100      	movs	r1, #0
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fd9d 	bl	800baa8 <xTimerGenericCommand>
 800bf6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <prvSwitchTimerLists+0x94>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	603b      	str	r3, [r7, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf8c:	4b09      	ldr	r3, [pc, #36]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1b4      	bne.n	800bf00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf96:	4b07      	ldr	r3, [pc, #28]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf9c:	4b06      	ldr	r3, [pc, #24]	; (800bfb8 <prvSwitchTimerLists+0xc0>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a04      	ldr	r2, [pc, #16]	; (800bfb4 <prvSwitchTimerLists+0xbc>)
 800bfa2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfa4:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <prvSwitchTimerLists+0xc0>)
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	6013      	str	r3, [r2, #0]
}
 800bfaa:	bf00      	nop
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000e1c 	.word	0x20000e1c
 800bfb8:	20000e20 	.word	0x20000e20

0800bfbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfc2:	f000 f967 	bl	800c294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfc6:	4b15      	ldr	r3, [pc, #84]	; (800c01c <prvCheckForValidListAndQueue+0x60>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d120      	bne.n	800c010 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfce:	4814      	ldr	r0, [pc, #80]	; (800c020 <prvCheckForValidListAndQueue+0x64>)
 800bfd0:	f7fd fec2 	bl	8009d58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfd4:	4813      	ldr	r0, [pc, #76]	; (800c024 <prvCheckForValidListAndQueue+0x68>)
 800bfd6:	f7fd febf 	bl	8009d58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bfda:	4b13      	ldr	r3, [pc, #76]	; (800c028 <prvCheckForValidListAndQueue+0x6c>)
 800bfdc:	4a10      	ldr	r2, [pc, #64]	; (800c020 <prvCheckForValidListAndQueue+0x64>)
 800bfde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfe0:	4b12      	ldr	r3, [pc, #72]	; (800c02c <prvCheckForValidListAndQueue+0x70>)
 800bfe2:	4a10      	ldr	r2, [pc, #64]	; (800c024 <prvCheckForValidListAndQueue+0x68>)
 800bfe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	4b11      	ldr	r3, [pc, #68]	; (800c030 <prvCheckForValidListAndQueue+0x74>)
 800bfec:	4a11      	ldr	r2, [pc, #68]	; (800c034 <prvCheckForValidListAndQueue+0x78>)
 800bfee:	2110      	movs	r1, #16
 800bff0:	200a      	movs	r0, #10
 800bff2:	f7fd ffcd 	bl	8009f90 <xQueueGenericCreateStatic>
 800bff6:	4603      	mov	r3, r0
 800bff8:	4a08      	ldr	r2, [pc, #32]	; (800c01c <prvCheckForValidListAndQueue+0x60>)
 800bffa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <prvCheckForValidListAndQueue+0x60>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d005      	beq.n	800c010 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <prvCheckForValidListAndQueue+0x60>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	490b      	ldr	r1, [pc, #44]	; (800c038 <prvCheckForValidListAndQueue+0x7c>)
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fbe0 	bl	800a7d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c010:	f000 f970 	bl	800c2f4 <vPortExitCritical>
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000e24 	.word	0x20000e24
 800c020:	20000df4 	.word	0x20000df4
 800c024:	20000e08 	.word	0x20000e08
 800c028:	20000e1c 	.word	0x20000e1c
 800c02c:	20000e20 	.word	0x20000e20
 800c030:	20000ed0 	.word	0x20000ed0
 800c034:	20000e30 	.word	0x20000e30
 800c038:	0800f5b0 	.word	0x0800f5b0

0800c03c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3b04      	subs	r3, #4
 800c04c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3b04      	subs	r3, #4
 800c05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f023 0201 	bic.w	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3b04      	subs	r3, #4
 800c06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c06c:	4a0c      	ldr	r2, [pc, #48]	; (800c0a0 <pxPortInitialiseStack+0x64>)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3b14      	subs	r3, #20
 800c076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3b04      	subs	r3, #4
 800c082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f06f 0202 	mvn.w	r2, #2
 800c08a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3b20      	subs	r3, #32
 800c090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c092:	68fb      	ldr	r3, [r7, #12]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	0800c0a5 	.word	0x0800c0a5

0800c0a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <prvTaskExitError+0x54>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b6:	d00a      	beq.n	800c0ce <prvTaskExitError+0x2a>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	60fb      	str	r3, [r7, #12]
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <prvTaskExitError+0x28>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	60bb      	str	r3, [r7, #8]
}
 800c0e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0e2:	bf00      	nop
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d0fc      	beq.n	800c0e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	20000018 	.word	0x20000018
 800c0fc:	00000000 	.word	0x00000000

0800c100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <pxCurrentTCBConst2>)
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	6808      	ldr	r0, [r1, #0]
 800c106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10a:	f380 8809 	msr	PSP, r0
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f04f 0000 	mov.w	r0, #0
 800c116:	f380 8811 	msr	BASEPRI, r0
 800c11a:	4770      	bx	lr
 800c11c:	f3af 8000 	nop.w

0800c120 <pxCurrentTCBConst2>:
 800c120:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop

0800c128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c128:	4808      	ldr	r0, [pc, #32]	; (800c14c <prvPortStartFirstTask+0x24>)
 800c12a:	6800      	ldr	r0, [r0, #0]
 800c12c:	6800      	ldr	r0, [r0, #0]
 800c12e:	f380 8808 	msr	MSP, r0
 800c132:	f04f 0000 	mov.w	r0, #0
 800c136:	f380 8814 	msr	CONTROL, r0
 800c13a:	b662      	cpsie	i
 800c13c:	b661      	cpsie	f
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	df00      	svc	0
 800c148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c14a:	bf00      	nop
 800c14c:	e000ed08 	.word	0xe000ed08

0800c150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c156:	4b46      	ldr	r3, [pc, #280]	; (800c270 <xPortStartScheduler+0x120>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a46      	ldr	r2, [pc, #280]	; (800c274 <xPortStartScheduler+0x124>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d10a      	bne.n	800c176 <xPortStartScheduler+0x26>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	613b      	str	r3, [r7, #16]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c176:	4b3e      	ldr	r3, [pc, #248]	; (800c270 <xPortStartScheduler+0x120>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a3f      	ldr	r2, [pc, #252]	; (800c278 <xPortStartScheduler+0x128>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d10a      	bne.n	800c196 <xPortStartScheduler+0x46>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c196:	4b39      	ldr	r3, [pc, #228]	; (800c27c <xPortStartScheduler+0x12c>)
 800c198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	22ff      	movs	r2, #255	; 0xff
 800c1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	4b31      	ldr	r3, [pc, #196]	; (800c280 <xPortStartScheduler+0x130>)
 800c1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1be:	4b31      	ldr	r3, [pc, #196]	; (800c284 <xPortStartScheduler+0x134>)
 800c1c0:	2207      	movs	r2, #7
 800c1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1c4:	e009      	b.n	800c1da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c1c6:	4b2f      	ldr	r3, [pc, #188]	; (800c284 <xPortStartScheduler+0x134>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	4a2d      	ldr	r2, [pc, #180]	; (800c284 <xPortStartScheduler+0x134>)
 800c1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1da:	78fb      	ldrb	r3, [r7, #3]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1e2:	2b80      	cmp	r3, #128	; 0x80
 800c1e4:	d0ef      	beq.n	800c1c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1e6:	4b27      	ldr	r3, [pc, #156]	; (800c284 <xPortStartScheduler+0x134>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f1c3 0307 	rsb	r3, r3, #7
 800c1ee:	2b04      	cmp	r3, #4
 800c1f0:	d00a      	beq.n	800c208 <xPortStartScheduler+0xb8>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	60bb      	str	r3, [r7, #8]
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c208:	4b1e      	ldr	r3, [pc, #120]	; (800c284 <xPortStartScheduler+0x134>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	4a1d      	ldr	r2, [pc, #116]	; (800c284 <xPortStartScheduler+0x134>)
 800c210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c212:	4b1c      	ldr	r3, [pc, #112]	; (800c284 <xPortStartScheduler+0x134>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c21a:	4a1a      	ldr	r2, [pc, #104]	; (800c284 <xPortStartScheduler+0x134>)
 800c21c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	b2da      	uxtb	r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c226:	4b18      	ldr	r3, [pc, #96]	; (800c288 <xPortStartScheduler+0x138>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a17      	ldr	r2, [pc, #92]	; (800c288 <xPortStartScheduler+0x138>)
 800c22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <xPortStartScheduler+0x138>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a14      	ldr	r2, [pc, #80]	; (800c288 <xPortStartScheduler+0x138>)
 800c238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c23c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c23e:	f000 f8dd 	bl	800c3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c242:	4b12      	ldr	r3, [pc, #72]	; (800c28c <xPortStartScheduler+0x13c>)
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c248:	f000 f8fc 	bl	800c444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c24c:	4b10      	ldr	r3, [pc, #64]	; (800c290 <xPortStartScheduler+0x140>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0f      	ldr	r2, [pc, #60]	; (800c290 <xPortStartScheduler+0x140>)
 800c252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c258:	f7ff ff66 	bl	800c128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c25c:	f7fe fec2 	bl	800afe4 <vTaskSwitchContext>
	prvTaskExitError();
 800c260:	f7ff ff20 	bl	800c0a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	e000ed00 	.word	0xe000ed00
 800c274:	410fc271 	.word	0x410fc271
 800c278:	410fc270 	.word	0x410fc270
 800c27c:	e000e400 	.word	0xe000e400
 800c280:	20000f20 	.word	0x20000f20
 800c284:	20000f24 	.word	0x20000f24
 800c288:	e000ed20 	.word	0xe000ed20
 800c28c:	20000018 	.word	0x20000018
 800c290:	e000ef34 	.word	0xe000ef34

0800c294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	607b      	str	r3, [r7, #4]
}
 800c2ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ae:	4b0f      	ldr	r3, [pc, #60]	; (800c2ec <vPortEnterCritical+0x58>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	4a0d      	ldr	r2, [pc, #52]	; (800c2ec <vPortEnterCritical+0x58>)
 800c2b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2b8:	4b0c      	ldr	r3, [pc, #48]	; (800c2ec <vPortEnterCritical+0x58>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d10f      	bne.n	800c2e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2c0:	4b0b      	ldr	r3, [pc, #44]	; (800c2f0 <vPortEnterCritical+0x5c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	603b      	str	r3, [r7, #0]
}
 800c2dc:	bf00      	nop
 800c2de:	e7fe      	b.n	800c2de <vPortEnterCritical+0x4a>
	}
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	20000018 	.word	0x20000018
 800c2f0:	e000ed04 	.word	0xe000ed04

0800c2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2fa:	4b12      	ldr	r3, [pc, #72]	; (800c344 <vPortExitCritical+0x50>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <vPortExitCritical+0x24>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	607b      	str	r3, [r7, #4]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c318:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <vPortExitCritical+0x50>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	4a09      	ldr	r2, [pc, #36]	; (800c344 <vPortExitCritical+0x50>)
 800c320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c322:	4b08      	ldr	r3, [pc, #32]	; (800c344 <vPortExitCritical+0x50>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <vPortExitCritical+0x42>
 800c32a:	2300      	movs	r3, #0
 800c32c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	f383 8811 	msr	BASEPRI, r3
}
 800c334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c336:	bf00      	nop
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20000018 	.word	0x20000018
	...

0800c350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c350:	f3ef 8009 	mrs	r0, PSP
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <pxCurrentTCBConst>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	f01e 0f10 	tst.w	lr, #16
 800c360:	bf08      	it	eq
 800c362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	6010      	str	r0, [r2, #0]
 800c36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c374:	f380 8811 	msr	BASEPRI, r0
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f7fe fe30 	bl	800afe4 <vTaskSwitchContext>
 800c384:	f04f 0000 	mov.w	r0, #0
 800c388:	f380 8811 	msr	BASEPRI, r0
 800c38c:	bc09      	pop	{r0, r3}
 800c38e:	6819      	ldr	r1, [r3, #0]
 800c390:	6808      	ldr	r0, [r1, #0]
 800c392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c396:	f01e 0f10 	tst.w	lr, #16
 800c39a:	bf08      	it	eq
 800c39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3a0:	f380 8809 	msr	PSP, r0
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w

0800c3b0 <pxCurrentTCBConst>:
 800c3b0:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3b4:	bf00      	nop
 800c3b6:	bf00      	nop

0800c3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3d2:	f7fe fd49 	bl	800ae68 <xTaskIncrementTick>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3dc:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <SysTick_Handler+0x40>)
 800c3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f383 8811 	msr	BASEPRI, r3
}
 800c3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	e000ed04 	.word	0xe000ed04

0800c3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <vPortSetupTimerInterrupt+0x34>)
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c406:	4b0b      	ldr	r3, [pc, #44]	; (800c434 <vPortSetupTimerInterrupt+0x38>)
 800c408:	2200      	movs	r2, #0
 800c40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c40c:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <vPortSetupTimerInterrupt+0x3c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a0a      	ldr	r2, [pc, #40]	; (800c43c <vPortSetupTimerInterrupt+0x40>)
 800c412:	fba2 2303 	umull	r2, r3, r2, r3
 800c416:	099b      	lsrs	r3, r3, #6
 800c418:	4a09      	ldr	r2, [pc, #36]	; (800c440 <vPortSetupTimerInterrupt+0x44>)
 800c41a:	3b01      	subs	r3, #1
 800c41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c41e:	4b04      	ldr	r3, [pc, #16]	; (800c430 <vPortSetupTimerInterrupt+0x34>)
 800c420:	2207      	movs	r2, #7
 800c422:	601a      	str	r2, [r3, #0]
}
 800c424:	bf00      	nop
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	e000e010 	.word	0xe000e010
 800c434:	e000e018 	.word	0xe000e018
 800c438:	2000000c 	.word	0x2000000c
 800c43c:	10624dd3 	.word	0x10624dd3
 800c440:	e000e014 	.word	0xe000e014

0800c444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c454 <vPortEnableVFP+0x10>
 800c448:	6801      	ldr	r1, [r0, #0]
 800c44a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c44e:	6001      	str	r1, [r0, #0]
 800c450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c452:	bf00      	nop
 800c454:	e000ed88 	.word	0xe000ed88

0800c458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c45e:	f3ef 8305 	mrs	r3, IPSR
 800c462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b0f      	cmp	r3, #15
 800c468:	d914      	bls.n	800c494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c46a:	4a17      	ldr	r2, [pc, #92]	; (800c4c8 <vPortValidateInterruptPriority+0x70>)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	4413      	add	r3, r2
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c474:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <vPortValidateInterruptPriority+0x74>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	7afa      	ldrb	r2, [r7, #11]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d20a      	bcs.n	800c494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	607b      	str	r3, [r7, #4]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <vPortValidateInterruptPriority+0x78>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <vPortValidateInterruptPriority+0x7c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d90a      	bls.n	800c4ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	603b      	str	r3, [r7, #0]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <vPortValidateInterruptPriority+0x60>
	}
 800c4ba:	bf00      	nop
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	e000e3f0 	.word	0xe000e3f0
 800c4cc:	20000f20 	.word	0x20000f20
 800c4d0:	e000ed0c 	.word	0xe000ed0c
 800c4d4:	20000f24 	.word	0x20000f24

0800c4d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	; 0x28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4e4:	f7fe fc04 	bl	800acf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4e8:	4b58      	ldr	r3, [pc, #352]	; (800c64c <pvPortMalloc+0x174>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4f0:	f000 f910 	bl	800c714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4f4:	4b56      	ldr	r3, [pc, #344]	; (800c650 <pvPortMalloc+0x178>)
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f040 808e 	bne.w	800c61e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01d      	beq.n	800c544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c508:	2208      	movs	r2, #8
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4413      	add	r3, r2
 800c50e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d014      	beq.n	800c544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f023 0307 	bic.w	r3, r3, #7
 800c520:	3308      	adds	r3, #8
 800c522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f003 0307 	and.w	r3, r3, #7
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00a      	beq.n	800c544 <pvPortMalloc+0x6c>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	617b      	str	r3, [r7, #20]
}
 800c540:	bf00      	nop
 800c542:	e7fe      	b.n	800c542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d069      	beq.n	800c61e <pvPortMalloc+0x146>
 800c54a:	4b42      	ldr	r3, [pc, #264]	; (800c654 <pvPortMalloc+0x17c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	429a      	cmp	r2, r3
 800c552:	d864      	bhi.n	800c61e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c554:	4b40      	ldr	r3, [pc, #256]	; (800c658 <pvPortMalloc+0x180>)
 800c556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <pvPortMalloc+0x180>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c55e:	e004      	b.n	800c56a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d903      	bls.n	800c57c <pvPortMalloc+0xa4>
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1f1      	bne.n	800c560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c57c:	4b33      	ldr	r3, [pc, #204]	; (800c64c <pvPortMalloc+0x174>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c582:	429a      	cmp	r2, r3
 800c584:	d04b      	beq.n	800c61e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2208      	movs	r2, #8
 800c58c:	4413      	add	r3, r2
 800c58e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	1ad2      	subs	r2, r2, r3
 800c5a0:	2308      	movs	r3, #8
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d91f      	bls.n	800c5e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	613b      	str	r3, [r7, #16]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	1ad2      	subs	r2, r2, r3
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5e2:	69b8      	ldr	r0, [r7, #24]
 800c5e4:	f000 f8f8 	bl	800c7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5e8:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <pvPortMalloc+0x17c>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	4a18      	ldr	r2, [pc, #96]	; (800c654 <pvPortMalloc+0x17c>)
 800c5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5f6:	4b17      	ldr	r3, [pc, #92]	; (800c654 <pvPortMalloc+0x17c>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	4b18      	ldr	r3, [pc, #96]	; (800c65c <pvPortMalloc+0x184>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d203      	bcs.n	800c60a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c602:	4b14      	ldr	r3, [pc, #80]	; (800c654 <pvPortMalloc+0x17c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a15      	ldr	r2, [pc, #84]	; (800c65c <pvPortMalloc+0x184>)
 800c608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	4b10      	ldr	r3, [pc, #64]	; (800c650 <pvPortMalloc+0x178>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	431a      	orrs	r2, r3
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c61e:	f7fe fb75 	bl	800ad0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	f003 0307 	and.w	r3, r3, #7
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00a      	beq.n	800c642 <pvPortMalloc+0x16a>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60fb      	str	r3, [r7, #12]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <pvPortMalloc+0x168>
	return pvReturn;
 800c642:	69fb      	ldr	r3, [r7, #28]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3728      	adds	r7, #40	; 0x28
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20001b30 	.word	0x20001b30
 800c650:	20001b3c 	.word	0x20001b3c
 800c654:	20001b34 	.word	0x20001b34
 800c658:	20001b28 	.word	0x20001b28
 800c65c:	20001b38 	.word	0x20001b38

0800c660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d048      	beq.n	800c704 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c672:	2308      	movs	r3, #8
 800c674:	425b      	negs	r3, r3
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	4413      	add	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	685a      	ldr	r2, [r3, #4]
 800c684:	4b21      	ldr	r3, [pc, #132]	; (800c70c <vPortFree+0xac>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4013      	ands	r3, r2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <vPortFree+0x44>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00a      	beq.n	800c6c2 <vPortFree+0x62>
	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	60bb      	str	r3, [r7, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	4b11      	ldr	r3, [pc, #68]	; (800c70c <vPortFree+0xac>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d019      	beq.n	800c704 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d115      	bne.n	800c704 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <vPortFree+0xac>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6e8:	f7fe fb02 	bl	800acf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <vPortFree+0xb0>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	4a06      	ldr	r2, [pc, #24]	; (800c710 <vPortFree+0xb0>)
 800c6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f000 f86c 	bl	800c7d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c700:	f7fe fb04 	bl	800ad0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c704:	bf00      	nop
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20001b3c 	.word	0x20001b3c
 800c710:	20001b34 	.word	0x20001b34

0800c714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c71a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c720:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <prvHeapInit+0xac>)
 800c722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00c      	beq.n	800c748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3307      	adds	r3, #7
 800c732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f023 0307 	bic.w	r3, r3, #7
 800c73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <prvHeapInit+0xac>)
 800c744:	4413      	add	r3, r2
 800c746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c74c:	4a1d      	ldr	r2, [pc, #116]	; (800c7c4 <prvHeapInit+0xb0>)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c752:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <prvHeapInit+0xb0>)
 800c754:	2200      	movs	r2, #0
 800c756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	4413      	add	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c760:	2208      	movs	r2, #8
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 0307 	bic.w	r3, r3, #7
 800c76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <prvHeapInit+0xb4>)
 800c774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <prvHeapInit+0xb4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2200      	movs	r2, #0
 800c77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c77e:	4b12      	ldr	r3, [pc, #72]	; (800c7c8 <prvHeapInit+0xb4>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c794:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <prvHeapInit+0xb4>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	; (800c7cc <prvHeapInit+0xb8>)
 800c7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <prvHeapInit+0xbc>)
 800c7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <prvHeapInit+0xc0>)
 800c7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	20000f28 	.word	0x20000f28
 800c7c4:	20001b28 	.word	0x20001b28
 800c7c8:	20001b30 	.word	0x20001b30
 800c7cc:	20001b38 	.word	0x20001b38
 800c7d0:	20001b34 	.word	0x20001b34
 800c7d4:	20001b3c 	.word	0x20001b3c

0800c7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7e0:	4b28      	ldr	r3, [pc, #160]	; (800c884 <prvInsertBlockIntoFreeList+0xac>)
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e002      	b.n	800c7ec <prvInsertBlockIntoFreeList+0x14>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d8f7      	bhi.n	800c7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	4413      	add	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d108      	bne.n	800c81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	441a      	add	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d118      	bne.n	800c860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	4b15      	ldr	r3, [pc, #84]	; (800c888 <prvInsertBlockIntoFreeList+0xb0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	429a      	cmp	r2, r3
 800c838:	d00d      	beq.n	800c856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	441a      	add	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e008      	b.n	800c868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <prvInsertBlockIntoFreeList+0xb0>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e003      	b.n	800c868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d002      	beq.n	800c876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	20001b28 	.word	0x20001b28
 800c888:	20001b30 	.word	0x20001b30

0800c88c <__errno>:
 800c88c:	4b01      	ldr	r3, [pc, #4]	; (800c894 <__errno+0x8>)
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	2000001c 	.word	0x2000001c

0800c898 <__libc_init_array>:
 800c898:	b570      	push	{r4, r5, r6, lr}
 800c89a:	4d0d      	ldr	r5, [pc, #52]	; (800c8d0 <__libc_init_array+0x38>)
 800c89c:	4c0d      	ldr	r4, [pc, #52]	; (800c8d4 <__libc_init_array+0x3c>)
 800c89e:	1b64      	subs	r4, r4, r5
 800c8a0:	10a4      	asrs	r4, r4, #2
 800c8a2:	2600      	movs	r6, #0
 800c8a4:	42a6      	cmp	r6, r4
 800c8a6:	d109      	bne.n	800c8bc <__libc_init_array+0x24>
 800c8a8:	4d0b      	ldr	r5, [pc, #44]	; (800c8d8 <__libc_init_array+0x40>)
 800c8aa:	4c0c      	ldr	r4, [pc, #48]	; (800c8dc <__libc_init_array+0x44>)
 800c8ac:	f002 fe3e 	bl	800f52c <_init>
 800c8b0:	1b64      	subs	r4, r4, r5
 800c8b2:	10a4      	asrs	r4, r4, #2
 800c8b4:	2600      	movs	r6, #0
 800c8b6:	42a6      	cmp	r6, r4
 800c8b8:	d105      	bne.n	800c8c6 <__libc_init_array+0x2e>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c0:	4798      	blx	r3
 800c8c2:	3601      	adds	r6, #1
 800c8c4:	e7ee      	b.n	800c8a4 <__libc_init_array+0xc>
 800c8c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ca:	4798      	blx	r3
 800c8cc:	3601      	adds	r6, #1
 800c8ce:	e7f2      	b.n	800c8b6 <__libc_init_array+0x1e>
 800c8d0:	0800fa64 	.word	0x0800fa64
 800c8d4:	0800fa64 	.word	0x0800fa64
 800c8d8:	0800fa64 	.word	0x0800fa64
 800c8dc:	0800fa68 	.word	0x0800fa68

0800c8e0 <memcpy>:
 800c8e0:	440a      	add	r2, r1
 800c8e2:	4291      	cmp	r1, r2
 800c8e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8e8:	d100      	bne.n	800c8ec <memcpy+0xc>
 800c8ea:	4770      	bx	lr
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	d1f9      	bne.n	800c8ee <memcpy+0xe>
 800c8fa:	bd10      	pop	{r4, pc}

0800c8fc <memset>:
 800c8fc:	4402      	add	r2, r0
 800c8fe:	4603      	mov	r3, r0
 800c900:	4293      	cmp	r3, r2
 800c902:	d100      	bne.n	800c906 <memset+0xa>
 800c904:	4770      	bx	lr
 800c906:	f803 1b01 	strb.w	r1, [r3], #1
 800c90a:	e7f9      	b.n	800c900 <memset+0x4>

0800c90c <__cvt>:
 800c90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c910:	ec55 4b10 	vmov	r4, r5, d0
 800c914:	2d00      	cmp	r5, #0
 800c916:	460e      	mov	r6, r1
 800c918:	4619      	mov	r1, r3
 800c91a:	462b      	mov	r3, r5
 800c91c:	bfbb      	ittet	lt
 800c91e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c922:	461d      	movlt	r5, r3
 800c924:	2300      	movge	r3, #0
 800c926:	232d      	movlt	r3, #45	; 0x2d
 800c928:	700b      	strb	r3, [r1, #0]
 800c92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c930:	4691      	mov	r9, r2
 800c932:	f023 0820 	bic.w	r8, r3, #32
 800c936:	bfbc      	itt	lt
 800c938:	4622      	movlt	r2, r4
 800c93a:	4614      	movlt	r4, r2
 800c93c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c940:	d005      	beq.n	800c94e <__cvt+0x42>
 800c942:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c946:	d100      	bne.n	800c94a <__cvt+0x3e>
 800c948:	3601      	adds	r6, #1
 800c94a:	2102      	movs	r1, #2
 800c94c:	e000      	b.n	800c950 <__cvt+0x44>
 800c94e:	2103      	movs	r1, #3
 800c950:	ab03      	add	r3, sp, #12
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	ab02      	add	r3, sp, #8
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	ec45 4b10 	vmov	d0, r4, r5
 800c95c:	4653      	mov	r3, sl
 800c95e:	4632      	mov	r2, r6
 800c960:	f000 fec6 	bl	800d6f0 <_dtoa_r>
 800c964:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c968:	4607      	mov	r7, r0
 800c96a:	d102      	bne.n	800c972 <__cvt+0x66>
 800c96c:	f019 0f01 	tst.w	r9, #1
 800c970:	d022      	beq.n	800c9b8 <__cvt+0xac>
 800c972:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c976:	eb07 0906 	add.w	r9, r7, r6
 800c97a:	d110      	bne.n	800c99e <__cvt+0x92>
 800c97c:	783b      	ldrb	r3, [r7, #0]
 800c97e:	2b30      	cmp	r3, #48	; 0x30
 800c980:	d10a      	bne.n	800c998 <__cvt+0x8c>
 800c982:	2200      	movs	r2, #0
 800c984:	2300      	movs	r3, #0
 800c986:	4620      	mov	r0, r4
 800c988:	4629      	mov	r1, r5
 800c98a:	f7f4 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c98e:	b918      	cbnz	r0, 800c998 <__cvt+0x8c>
 800c990:	f1c6 0601 	rsb	r6, r6, #1
 800c994:	f8ca 6000 	str.w	r6, [sl]
 800c998:	f8da 3000 	ldr.w	r3, [sl]
 800c99c:	4499      	add	r9, r3
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7f4 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9aa:	b108      	cbz	r0, 800c9b0 <__cvt+0xa4>
 800c9ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9b0:	2230      	movs	r2, #48	; 0x30
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	454b      	cmp	r3, r9
 800c9b6:	d307      	bcc.n	800c9c8 <__cvt+0xbc>
 800c9b8:	9b03      	ldr	r3, [sp, #12]
 800c9ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9bc:	1bdb      	subs	r3, r3, r7
 800c9be:	4638      	mov	r0, r7
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	b004      	add	sp, #16
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	1c59      	adds	r1, r3, #1
 800c9ca:	9103      	str	r1, [sp, #12]
 800c9cc:	701a      	strb	r2, [r3, #0]
 800c9ce:	e7f0      	b.n	800c9b2 <__cvt+0xa6>

0800c9d0 <__exponent>:
 800c9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	bfb8      	it	lt
 800c9d8:	4249      	neglt	r1, r1
 800c9da:	f803 2b02 	strb.w	r2, [r3], #2
 800c9de:	bfb4      	ite	lt
 800c9e0:	222d      	movlt	r2, #45	; 0x2d
 800c9e2:	222b      	movge	r2, #43	; 0x2b
 800c9e4:	2909      	cmp	r1, #9
 800c9e6:	7042      	strb	r2, [r0, #1]
 800c9e8:	dd2a      	ble.n	800ca40 <__exponent+0x70>
 800c9ea:	f10d 0407 	add.w	r4, sp, #7
 800c9ee:	46a4      	mov	ip, r4
 800c9f0:	270a      	movs	r7, #10
 800c9f2:	46a6      	mov	lr, r4
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9fa:	fb07 1516 	mls	r5, r7, r6, r1
 800c9fe:	3530      	adds	r5, #48	; 0x30
 800ca00:	2a63      	cmp	r2, #99	; 0x63
 800ca02:	f104 34ff 	add.w	r4, r4, #4294967295
 800ca06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	dcf1      	bgt.n	800c9f2 <__exponent+0x22>
 800ca0e:	3130      	adds	r1, #48	; 0x30
 800ca10:	f1ae 0502 	sub.w	r5, lr, #2
 800ca14:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ca18:	1c44      	adds	r4, r0, #1
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	4561      	cmp	r1, ip
 800ca1e:	d30a      	bcc.n	800ca36 <__exponent+0x66>
 800ca20:	f10d 0209 	add.w	r2, sp, #9
 800ca24:	eba2 020e 	sub.w	r2, r2, lr
 800ca28:	4565      	cmp	r5, ip
 800ca2a:	bf88      	it	hi
 800ca2c:	2200      	movhi	r2, #0
 800ca2e:	4413      	add	r3, r2
 800ca30:	1a18      	subs	r0, r3, r0
 800ca32:	b003      	add	sp, #12
 800ca34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ca3e:	e7ed      	b.n	800ca1c <__exponent+0x4c>
 800ca40:	2330      	movs	r3, #48	; 0x30
 800ca42:	3130      	adds	r1, #48	; 0x30
 800ca44:	7083      	strb	r3, [r0, #2]
 800ca46:	70c1      	strb	r1, [r0, #3]
 800ca48:	1d03      	adds	r3, r0, #4
 800ca4a:	e7f1      	b.n	800ca30 <__exponent+0x60>

0800ca4c <_printf_float>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	ed2d 8b02 	vpush	{d8}
 800ca54:	b08d      	sub	sp, #52	; 0x34
 800ca56:	460c      	mov	r4, r1
 800ca58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca5c:	4616      	mov	r6, r2
 800ca5e:	461f      	mov	r7, r3
 800ca60:	4605      	mov	r5, r0
 800ca62:	f001 fde9 	bl	800e638 <_localeconv_r>
 800ca66:	f8d0 a000 	ldr.w	sl, [r0]
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	f7f3 fbb0 	bl	80001d0 <strlen>
 800ca70:	2300      	movs	r3, #0
 800ca72:	930a      	str	r3, [sp, #40]	; 0x28
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	9305      	str	r3, [sp, #20]
 800ca78:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca80:	3307      	adds	r3, #7
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	f103 0208 	add.w	r2, r3, #8
 800ca8a:	f8c8 2000 	str.w	r2, [r8]
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca9e:	9307      	str	r3, [sp, #28]
 800caa0:	f8cd 8018 	str.w	r8, [sp, #24]
 800caa4:	ee08 0a10 	vmov	s16, r0
 800caa8:	4b9f      	ldr	r3, [pc, #636]	; (800cd28 <_printf_float+0x2dc>)
 800caaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caae:	f04f 32ff 	mov.w	r2, #4294967295
 800cab2:	f7f4 f83b 	bl	8000b2c <__aeabi_dcmpun>
 800cab6:	bb88      	cbnz	r0, 800cb1c <_printf_float+0xd0>
 800cab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cabc:	4b9a      	ldr	r3, [pc, #616]	; (800cd28 <_printf_float+0x2dc>)
 800cabe:	f04f 32ff 	mov.w	r2, #4294967295
 800cac2:	f7f4 f815 	bl	8000af0 <__aeabi_dcmple>
 800cac6:	bb48      	cbnz	r0, 800cb1c <_printf_float+0xd0>
 800cac8:	2200      	movs	r2, #0
 800caca:	2300      	movs	r3, #0
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f4 f804 	bl	8000adc <__aeabi_dcmplt>
 800cad4:	b110      	cbz	r0, 800cadc <_printf_float+0x90>
 800cad6:	232d      	movs	r3, #45	; 0x2d
 800cad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cadc:	4b93      	ldr	r3, [pc, #588]	; (800cd2c <_printf_float+0x2e0>)
 800cade:	4894      	ldr	r0, [pc, #592]	; (800cd30 <_printf_float+0x2e4>)
 800cae0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cae4:	bf94      	ite	ls
 800cae6:	4698      	movls	r8, r3
 800cae8:	4680      	movhi	r8, r0
 800caea:	2303      	movs	r3, #3
 800caec:	6123      	str	r3, [r4, #16]
 800caee:	9b05      	ldr	r3, [sp, #20]
 800caf0:	f023 0204 	bic.w	r2, r3, #4
 800caf4:	6022      	str	r2, [r4, #0]
 800caf6:	f04f 0900 	mov.w	r9, #0
 800cafa:	9700      	str	r7, [sp, #0]
 800cafc:	4633      	mov	r3, r6
 800cafe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb00:	4621      	mov	r1, r4
 800cb02:	4628      	mov	r0, r5
 800cb04:	f000 f9d8 	bl	800ceb8 <_printf_common>
 800cb08:	3001      	adds	r0, #1
 800cb0a:	f040 8090 	bne.w	800cc2e <_printf_float+0x1e2>
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	b00d      	add	sp, #52	; 0x34
 800cb14:	ecbd 8b02 	vpop	{d8}
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1c:	4642      	mov	r2, r8
 800cb1e:	464b      	mov	r3, r9
 800cb20:	4640      	mov	r0, r8
 800cb22:	4649      	mov	r1, r9
 800cb24:	f7f4 f802 	bl	8000b2c <__aeabi_dcmpun>
 800cb28:	b140      	cbz	r0, 800cb3c <_printf_float+0xf0>
 800cb2a:	464b      	mov	r3, r9
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfbc      	itt	lt
 800cb30:	232d      	movlt	r3, #45	; 0x2d
 800cb32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb36:	487f      	ldr	r0, [pc, #508]	; (800cd34 <_printf_float+0x2e8>)
 800cb38:	4b7f      	ldr	r3, [pc, #508]	; (800cd38 <_printf_float+0x2ec>)
 800cb3a:	e7d1      	b.n	800cae0 <_printf_float+0x94>
 800cb3c:	6863      	ldr	r3, [r4, #4]
 800cb3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb42:	9206      	str	r2, [sp, #24]
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	d13f      	bne.n	800cbc8 <_printf_float+0x17c>
 800cb48:	2306      	movs	r3, #6
 800cb4a:	6063      	str	r3, [r4, #4]
 800cb4c:	9b05      	ldr	r3, [sp, #20]
 800cb4e:	6861      	ldr	r1, [r4, #4]
 800cb50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb54:	2300      	movs	r3, #0
 800cb56:	9303      	str	r3, [sp, #12]
 800cb58:	ab0a      	add	r3, sp, #40	; 0x28
 800cb5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb5e:	ab09      	add	r3, sp, #36	; 0x24
 800cb60:	ec49 8b10 	vmov	d0, r8, r9
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	6022      	str	r2, [r4, #0]
 800cb68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	f7ff fecd 	bl	800c90c <__cvt>
 800cb72:	9b06      	ldr	r3, [sp, #24]
 800cb74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb76:	2b47      	cmp	r3, #71	; 0x47
 800cb78:	4680      	mov	r8, r0
 800cb7a:	d108      	bne.n	800cb8e <_printf_float+0x142>
 800cb7c:	1cc8      	adds	r0, r1, #3
 800cb7e:	db02      	blt.n	800cb86 <_printf_float+0x13a>
 800cb80:	6863      	ldr	r3, [r4, #4]
 800cb82:	4299      	cmp	r1, r3
 800cb84:	dd41      	ble.n	800cc0a <_printf_float+0x1be>
 800cb86:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb8a:	fa5f fb8b 	uxtb.w	fp, fp
 800cb8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb92:	d820      	bhi.n	800cbd6 <_printf_float+0x18a>
 800cb94:	3901      	subs	r1, #1
 800cb96:	465a      	mov	r2, fp
 800cb98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb9c:	9109      	str	r1, [sp, #36]	; 0x24
 800cb9e:	f7ff ff17 	bl	800c9d0 <__exponent>
 800cba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cba4:	1813      	adds	r3, r2, r0
 800cba6:	2a01      	cmp	r2, #1
 800cba8:	4681      	mov	r9, r0
 800cbaa:	6123      	str	r3, [r4, #16]
 800cbac:	dc02      	bgt.n	800cbb4 <_printf_float+0x168>
 800cbae:	6822      	ldr	r2, [r4, #0]
 800cbb0:	07d2      	lsls	r2, r2, #31
 800cbb2:	d501      	bpl.n	800cbb8 <_printf_float+0x16c>
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d09c      	beq.n	800cafa <_printf_float+0xae>
 800cbc0:	232d      	movs	r3, #45	; 0x2d
 800cbc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbc6:	e798      	b.n	800cafa <_printf_float+0xae>
 800cbc8:	9a06      	ldr	r2, [sp, #24]
 800cbca:	2a47      	cmp	r2, #71	; 0x47
 800cbcc:	d1be      	bne.n	800cb4c <_printf_float+0x100>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1bc      	bne.n	800cb4c <_printf_float+0x100>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e7b9      	b.n	800cb4a <_printf_float+0xfe>
 800cbd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbda:	d118      	bne.n	800cc0e <_printf_float+0x1c2>
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	6863      	ldr	r3, [r4, #4]
 800cbe0:	dd0b      	ble.n	800cbfa <_printf_float+0x1ae>
 800cbe2:	6121      	str	r1, [r4, #16]
 800cbe4:	b913      	cbnz	r3, 800cbec <_printf_float+0x1a0>
 800cbe6:	6822      	ldr	r2, [r4, #0]
 800cbe8:	07d0      	lsls	r0, r2, #31
 800cbea:	d502      	bpl.n	800cbf2 <_printf_float+0x1a6>
 800cbec:	3301      	adds	r3, #1
 800cbee:	440b      	add	r3, r1
 800cbf0:	6123      	str	r3, [r4, #16]
 800cbf2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbf4:	f04f 0900 	mov.w	r9, #0
 800cbf8:	e7de      	b.n	800cbb8 <_printf_float+0x16c>
 800cbfa:	b913      	cbnz	r3, 800cc02 <_printf_float+0x1b6>
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	07d2      	lsls	r2, r2, #31
 800cc00:	d501      	bpl.n	800cc06 <_printf_float+0x1ba>
 800cc02:	3302      	adds	r3, #2
 800cc04:	e7f4      	b.n	800cbf0 <_printf_float+0x1a4>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e7f2      	b.n	800cbf0 <_printf_float+0x1a4>
 800cc0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc10:	4299      	cmp	r1, r3
 800cc12:	db05      	blt.n	800cc20 <_printf_float+0x1d4>
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	6121      	str	r1, [r4, #16]
 800cc18:	07d8      	lsls	r0, r3, #31
 800cc1a:	d5ea      	bpl.n	800cbf2 <_printf_float+0x1a6>
 800cc1c:	1c4b      	adds	r3, r1, #1
 800cc1e:	e7e7      	b.n	800cbf0 <_printf_float+0x1a4>
 800cc20:	2900      	cmp	r1, #0
 800cc22:	bfd4      	ite	le
 800cc24:	f1c1 0202 	rsble	r2, r1, #2
 800cc28:	2201      	movgt	r2, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	e7e0      	b.n	800cbf0 <_printf_float+0x1a4>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	055a      	lsls	r2, r3, #21
 800cc32:	d407      	bmi.n	800cc44 <_printf_float+0x1f8>
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	4642      	mov	r2, r8
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	47b8      	blx	r7
 800cc3e:	3001      	adds	r0, #1
 800cc40:	d12c      	bne.n	800cc9c <_printf_float+0x250>
 800cc42:	e764      	b.n	800cb0e <_printf_float+0xc2>
 800cc44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc48:	f240 80e0 	bls.w	800ce0c <_printf_float+0x3c0>
 800cc4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	f7f3 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d034      	beq.n	800ccc6 <_printf_float+0x27a>
 800cc5c:	4a37      	ldr	r2, [pc, #220]	; (800cd3c <_printf_float+0x2f0>)
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4631      	mov	r1, r6
 800cc62:	4628      	mov	r0, r5
 800cc64:	47b8      	blx	r7
 800cc66:	3001      	adds	r0, #1
 800cc68:	f43f af51 	beq.w	800cb0e <_printf_float+0xc2>
 800cc6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc70:	429a      	cmp	r2, r3
 800cc72:	db02      	blt.n	800cc7a <_printf_float+0x22e>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	07d8      	lsls	r0, r3, #31
 800cc78:	d510      	bpl.n	800cc9c <_printf_float+0x250>
 800cc7a:	ee18 3a10 	vmov	r3, s16
 800cc7e:	4652      	mov	r2, sl
 800cc80:	4631      	mov	r1, r6
 800cc82:	4628      	mov	r0, r5
 800cc84:	47b8      	blx	r7
 800cc86:	3001      	adds	r0, #1
 800cc88:	f43f af41 	beq.w	800cb0e <_printf_float+0xc2>
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	f104 091a 	add.w	r9, r4, #26
 800cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc96:	3b01      	subs	r3, #1
 800cc98:	4543      	cmp	r3, r8
 800cc9a:	dc09      	bgt.n	800ccb0 <_printf_float+0x264>
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	079b      	lsls	r3, r3, #30
 800cca0:	f100 8105 	bmi.w	800ceae <_printf_float+0x462>
 800cca4:	68e0      	ldr	r0, [r4, #12]
 800cca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca8:	4298      	cmp	r0, r3
 800ccaa:	bfb8      	it	lt
 800ccac:	4618      	movlt	r0, r3
 800ccae:	e730      	b.n	800cb12 <_printf_float+0xc6>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	464a      	mov	r2, r9
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	f43f af27 	beq.w	800cb0e <_printf_float+0xc2>
 800ccc0:	f108 0801 	add.w	r8, r8, #1
 800ccc4:	e7e6      	b.n	800cc94 <_printf_float+0x248>
 800ccc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc39      	bgt.n	800cd40 <_printf_float+0x2f4>
 800cccc:	4a1b      	ldr	r2, [pc, #108]	; (800cd3c <_printf_float+0x2f0>)
 800ccce:	2301      	movs	r3, #1
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	47b8      	blx	r7
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	f43f af19 	beq.w	800cb0e <_printf_float+0xc2>
 800ccdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cce0:	4313      	orrs	r3, r2
 800cce2:	d102      	bne.n	800ccea <_printf_float+0x29e>
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	07d9      	lsls	r1, r3, #31
 800cce8:	d5d8      	bpl.n	800cc9c <_printf_float+0x250>
 800ccea:	ee18 3a10 	vmov	r3, s16
 800ccee:	4652      	mov	r2, sl
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b8      	blx	r7
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	f43f af09 	beq.w	800cb0e <_printf_float+0xc2>
 800ccfc:	f04f 0900 	mov.w	r9, #0
 800cd00:	f104 0a1a 	add.w	sl, r4, #26
 800cd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd06:	425b      	negs	r3, r3
 800cd08:	454b      	cmp	r3, r9
 800cd0a:	dc01      	bgt.n	800cd10 <_printf_float+0x2c4>
 800cd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd0e:	e792      	b.n	800cc36 <_printf_float+0x1ea>
 800cd10:	2301      	movs	r3, #1
 800cd12:	4652      	mov	r2, sl
 800cd14:	4631      	mov	r1, r6
 800cd16:	4628      	mov	r0, r5
 800cd18:	47b8      	blx	r7
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	f43f aef7 	beq.w	800cb0e <_printf_float+0xc2>
 800cd20:	f109 0901 	add.w	r9, r9, #1
 800cd24:	e7ee      	b.n	800cd04 <_printf_float+0x2b8>
 800cd26:	bf00      	nop
 800cd28:	7fefffff 	.word	0x7fefffff
 800cd2c:	0800f684 	.word	0x0800f684
 800cd30:	0800f688 	.word	0x0800f688
 800cd34:	0800f690 	.word	0x0800f690
 800cd38:	0800f68c 	.word	0x0800f68c
 800cd3c:	0800f694 	.word	0x0800f694
 800cd40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd44:	429a      	cmp	r2, r3
 800cd46:	bfa8      	it	ge
 800cd48:	461a      	movge	r2, r3
 800cd4a:	2a00      	cmp	r2, #0
 800cd4c:	4691      	mov	r9, r2
 800cd4e:	dc37      	bgt.n	800cdc0 <_printf_float+0x374>
 800cd50:	f04f 0b00 	mov.w	fp, #0
 800cd54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd58:	f104 021a 	add.w	r2, r4, #26
 800cd5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd5e:	9305      	str	r3, [sp, #20]
 800cd60:	eba3 0309 	sub.w	r3, r3, r9
 800cd64:	455b      	cmp	r3, fp
 800cd66:	dc33      	bgt.n	800cdd0 <_printf_float+0x384>
 800cd68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	db3b      	blt.n	800cde8 <_printf_float+0x39c>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	07da      	lsls	r2, r3, #31
 800cd74:	d438      	bmi.n	800cde8 <_printf_float+0x39c>
 800cd76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd78:	9b05      	ldr	r3, [sp, #20]
 800cd7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	eba2 0901 	sub.w	r9, r2, r1
 800cd82:	4599      	cmp	r9, r3
 800cd84:	bfa8      	it	ge
 800cd86:	4699      	movge	r9, r3
 800cd88:	f1b9 0f00 	cmp.w	r9, #0
 800cd8c:	dc35      	bgt.n	800cdfa <_printf_float+0x3ae>
 800cd8e:	f04f 0800 	mov.w	r8, #0
 800cd92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd96:	f104 0a1a 	add.w	sl, r4, #26
 800cd9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	eba3 0309 	sub.w	r3, r3, r9
 800cda4:	4543      	cmp	r3, r8
 800cda6:	f77f af79 	ble.w	800cc9c <_printf_float+0x250>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	4652      	mov	r2, sl
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b8      	blx	r7
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	f43f aeaa 	beq.w	800cb0e <_printf_float+0xc2>
 800cdba:	f108 0801 	add.w	r8, r8, #1
 800cdbe:	e7ec      	b.n	800cd9a <_printf_float+0x34e>
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4642      	mov	r2, r8
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b8      	blx	r7
 800cdca:	3001      	adds	r0, #1
 800cdcc:	d1c0      	bne.n	800cd50 <_printf_float+0x304>
 800cdce:	e69e      	b.n	800cb0e <_printf_float+0xc2>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	9205      	str	r2, [sp, #20]
 800cdd8:	47b8      	blx	r7
 800cdda:	3001      	adds	r0, #1
 800cddc:	f43f ae97 	beq.w	800cb0e <_printf_float+0xc2>
 800cde0:	9a05      	ldr	r2, [sp, #20]
 800cde2:	f10b 0b01 	add.w	fp, fp, #1
 800cde6:	e7b9      	b.n	800cd5c <_printf_float+0x310>
 800cde8:	ee18 3a10 	vmov	r3, s16
 800cdec:	4652      	mov	r2, sl
 800cdee:	4631      	mov	r1, r6
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b8      	blx	r7
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d1be      	bne.n	800cd76 <_printf_float+0x32a>
 800cdf8:	e689      	b.n	800cb0e <_printf_float+0xc2>
 800cdfa:	9a05      	ldr	r2, [sp, #20]
 800cdfc:	464b      	mov	r3, r9
 800cdfe:	4442      	add	r2, r8
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	47b8      	blx	r7
 800ce06:	3001      	adds	r0, #1
 800ce08:	d1c1      	bne.n	800cd8e <_printf_float+0x342>
 800ce0a:	e680      	b.n	800cb0e <_printf_float+0xc2>
 800ce0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce0e:	2a01      	cmp	r2, #1
 800ce10:	dc01      	bgt.n	800ce16 <_printf_float+0x3ca>
 800ce12:	07db      	lsls	r3, r3, #31
 800ce14:	d538      	bpl.n	800ce88 <_printf_float+0x43c>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4642      	mov	r2, r8
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f ae74 	beq.w	800cb0e <_printf_float+0xc2>
 800ce26:	ee18 3a10 	vmov	r3, s16
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b8      	blx	r7
 800ce32:	3001      	adds	r0, #1
 800ce34:	f43f ae6b 	beq.w	800cb0e <_printf_float+0xc2>
 800ce38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f7f3 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce44:	b9d8      	cbnz	r0, 800ce7e <_printf_float+0x432>
 800ce46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce48:	f108 0201 	add.w	r2, r8, #1
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	d10e      	bne.n	800ce76 <_printf_float+0x42a>
 800ce58:	e659      	b.n	800cb0e <_printf_float+0xc2>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	4652      	mov	r2, sl
 800ce5e:	4631      	mov	r1, r6
 800ce60:	4628      	mov	r0, r5
 800ce62:	47b8      	blx	r7
 800ce64:	3001      	adds	r0, #1
 800ce66:	f43f ae52 	beq.w	800cb0e <_printf_float+0xc2>
 800ce6a:	f108 0801 	add.w	r8, r8, #1
 800ce6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce70:	3b01      	subs	r3, #1
 800ce72:	4543      	cmp	r3, r8
 800ce74:	dcf1      	bgt.n	800ce5a <_printf_float+0x40e>
 800ce76:	464b      	mov	r3, r9
 800ce78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce7c:	e6dc      	b.n	800cc38 <_printf_float+0x1ec>
 800ce7e:	f04f 0800 	mov.w	r8, #0
 800ce82:	f104 0a1a 	add.w	sl, r4, #26
 800ce86:	e7f2      	b.n	800ce6e <_printf_float+0x422>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	e7df      	b.n	800ce4e <_printf_float+0x402>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	464a      	mov	r2, r9
 800ce92:	4631      	mov	r1, r6
 800ce94:	4628      	mov	r0, r5
 800ce96:	47b8      	blx	r7
 800ce98:	3001      	adds	r0, #1
 800ce9a:	f43f ae38 	beq.w	800cb0e <_printf_float+0xc2>
 800ce9e:	f108 0801 	add.w	r8, r8, #1
 800cea2:	68e3      	ldr	r3, [r4, #12]
 800cea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cea6:	1a5b      	subs	r3, r3, r1
 800cea8:	4543      	cmp	r3, r8
 800ceaa:	dcf0      	bgt.n	800ce8e <_printf_float+0x442>
 800ceac:	e6fa      	b.n	800cca4 <_printf_float+0x258>
 800ceae:	f04f 0800 	mov.w	r8, #0
 800ceb2:	f104 0919 	add.w	r9, r4, #25
 800ceb6:	e7f4      	b.n	800cea2 <_printf_float+0x456>

0800ceb8 <_printf_common>:
 800ceb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cebc:	4616      	mov	r6, r2
 800cebe:	4699      	mov	r9, r3
 800cec0:	688a      	ldr	r2, [r1, #8]
 800cec2:	690b      	ldr	r3, [r1, #16]
 800cec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	bfb8      	it	lt
 800cecc:	4613      	movlt	r3, r2
 800cece:	6033      	str	r3, [r6, #0]
 800ced0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ced4:	4607      	mov	r7, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	b10a      	cbz	r2, 800cede <_printf_common+0x26>
 800ceda:	3301      	adds	r3, #1
 800cedc:	6033      	str	r3, [r6, #0]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	0699      	lsls	r1, r3, #26
 800cee2:	bf42      	ittt	mi
 800cee4:	6833      	ldrmi	r3, [r6, #0]
 800cee6:	3302      	addmi	r3, #2
 800cee8:	6033      	strmi	r3, [r6, #0]
 800ceea:	6825      	ldr	r5, [r4, #0]
 800ceec:	f015 0506 	ands.w	r5, r5, #6
 800cef0:	d106      	bne.n	800cf00 <_printf_common+0x48>
 800cef2:	f104 0a19 	add.w	sl, r4, #25
 800cef6:	68e3      	ldr	r3, [r4, #12]
 800cef8:	6832      	ldr	r2, [r6, #0]
 800cefa:	1a9b      	subs	r3, r3, r2
 800cefc:	42ab      	cmp	r3, r5
 800cefe:	dc26      	bgt.n	800cf4e <_printf_common+0x96>
 800cf00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf04:	1e13      	subs	r3, r2, #0
 800cf06:	6822      	ldr	r2, [r4, #0]
 800cf08:	bf18      	it	ne
 800cf0a:	2301      	movne	r3, #1
 800cf0c:	0692      	lsls	r2, r2, #26
 800cf0e:	d42b      	bmi.n	800cf68 <_printf_common+0xb0>
 800cf10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf14:	4649      	mov	r1, r9
 800cf16:	4638      	mov	r0, r7
 800cf18:	47c0      	blx	r8
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d01e      	beq.n	800cf5c <_printf_common+0xa4>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	68e5      	ldr	r5, [r4, #12]
 800cf22:	6832      	ldr	r2, [r6, #0]
 800cf24:	f003 0306 	and.w	r3, r3, #6
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	bf08      	it	eq
 800cf2c:	1aad      	subeq	r5, r5, r2
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	6922      	ldr	r2, [r4, #16]
 800cf32:	bf0c      	ite	eq
 800cf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf38:	2500      	movne	r5, #0
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	bfc4      	itt	gt
 800cf3e:	1a9b      	subgt	r3, r3, r2
 800cf40:	18ed      	addgt	r5, r5, r3
 800cf42:	2600      	movs	r6, #0
 800cf44:	341a      	adds	r4, #26
 800cf46:	42b5      	cmp	r5, r6
 800cf48:	d11a      	bne.n	800cf80 <_printf_common+0xc8>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e008      	b.n	800cf60 <_printf_common+0xa8>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4652      	mov	r2, sl
 800cf52:	4649      	mov	r1, r9
 800cf54:	4638      	mov	r0, r7
 800cf56:	47c0      	blx	r8
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d103      	bne.n	800cf64 <_printf_common+0xac>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf64:	3501      	adds	r5, #1
 800cf66:	e7c6      	b.n	800cef6 <_printf_common+0x3e>
 800cf68:	18e1      	adds	r1, r4, r3
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	2030      	movs	r0, #48	; 0x30
 800cf6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf72:	4422      	add	r2, r4
 800cf74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	e7c7      	b.n	800cf10 <_printf_common+0x58>
 800cf80:	2301      	movs	r3, #1
 800cf82:	4622      	mov	r2, r4
 800cf84:	4649      	mov	r1, r9
 800cf86:	4638      	mov	r0, r7
 800cf88:	47c0      	blx	r8
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d0e6      	beq.n	800cf5c <_printf_common+0xa4>
 800cf8e:	3601      	adds	r6, #1
 800cf90:	e7d9      	b.n	800cf46 <_printf_common+0x8e>
	...

0800cf94 <_printf_i>:
 800cf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf98:	460c      	mov	r4, r1
 800cf9a:	4691      	mov	r9, r2
 800cf9c:	7e27      	ldrb	r7, [r4, #24]
 800cf9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cfa0:	2f78      	cmp	r7, #120	; 0x78
 800cfa2:	4680      	mov	r8, r0
 800cfa4:	469a      	mov	sl, r3
 800cfa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfaa:	d807      	bhi.n	800cfbc <_printf_i+0x28>
 800cfac:	2f62      	cmp	r7, #98	; 0x62
 800cfae:	d80a      	bhi.n	800cfc6 <_printf_i+0x32>
 800cfb0:	2f00      	cmp	r7, #0
 800cfb2:	f000 80d8 	beq.w	800d166 <_printf_i+0x1d2>
 800cfb6:	2f58      	cmp	r7, #88	; 0x58
 800cfb8:	f000 80a3 	beq.w	800d102 <_printf_i+0x16e>
 800cfbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cfc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfc4:	e03a      	b.n	800d03c <_printf_i+0xa8>
 800cfc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfca:	2b15      	cmp	r3, #21
 800cfcc:	d8f6      	bhi.n	800cfbc <_printf_i+0x28>
 800cfce:	a001      	add	r0, pc, #4	; (adr r0, 800cfd4 <_printf_i+0x40>)
 800cfd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cfd4:	0800d02d 	.word	0x0800d02d
 800cfd8:	0800d041 	.word	0x0800d041
 800cfdc:	0800cfbd 	.word	0x0800cfbd
 800cfe0:	0800cfbd 	.word	0x0800cfbd
 800cfe4:	0800cfbd 	.word	0x0800cfbd
 800cfe8:	0800cfbd 	.word	0x0800cfbd
 800cfec:	0800d041 	.word	0x0800d041
 800cff0:	0800cfbd 	.word	0x0800cfbd
 800cff4:	0800cfbd 	.word	0x0800cfbd
 800cff8:	0800cfbd 	.word	0x0800cfbd
 800cffc:	0800cfbd 	.word	0x0800cfbd
 800d000:	0800d14d 	.word	0x0800d14d
 800d004:	0800d071 	.word	0x0800d071
 800d008:	0800d12f 	.word	0x0800d12f
 800d00c:	0800cfbd 	.word	0x0800cfbd
 800d010:	0800cfbd 	.word	0x0800cfbd
 800d014:	0800d16f 	.word	0x0800d16f
 800d018:	0800cfbd 	.word	0x0800cfbd
 800d01c:	0800d071 	.word	0x0800d071
 800d020:	0800cfbd 	.word	0x0800cfbd
 800d024:	0800cfbd 	.word	0x0800cfbd
 800d028:	0800d137 	.word	0x0800d137
 800d02c:	680b      	ldr	r3, [r1, #0]
 800d02e:	1d1a      	adds	r2, r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	600a      	str	r2, [r1, #0]
 800d034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d03c:	2301      	movs	r3, #1
 800d03e:	e0a3      	b.n	800d188 <_printf_i+0x1f4>
 800d040:	6825      	ldr	r5, [r4, #0]
 800d042:	6808      	ldr	r0, [r1, #0]
 800d044:	062e      	lsls	r6, r5, #24
 800d046:	f100 0304 	add.w	r3, r0, #4
 800d04a:	d50a      	bpl.n	800d062 <_printf_i+0xce>
 800d04c:	6805      	ldr	r5, [r0, #0]
 800d04e:	600b      	str	r3, [r1, #0]
 800d050:	2d00      	cmp	r5, #0
 800d052:	da03      	bge.n	800d05c <_printf_i+0xc8>
 800d054:	232d      	movs	r3, #45	; 0x2d
 800d056:	426d      	negs	r5, r5
 800d058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d05c:	485e      	ldr	r0, [pc, #376]	; (800d1d8 <_printf_i+0x244>)
 800d05e:	230a      	movs	r3, #10
 800d060:	e019      	b.n	800d096 <_printf_i+0x102>
 800d062:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d066:	6805      	ldr	r5, [r0, #0]
 800d068:	600b      	str	r3, [r1, #0]
 800d06a:	bf18      	it	ne
 800d06c:	b22d      	sxthne	r5, r5
 800d06e:	e7ef      	b.n	800d050 <_printf_i+0xbc>
 800d070:	680b      	ldr	r3, [r1, #0]
 800d072:	6825      	ldr	r5, [r4, #0]
 800d074:	1d18      	adds	r0, r3, #4
 800d076:	6008      	str	r0, [r1, #0]
 800d078:	0628      	lsls	r0, r5, #24
 800d07a:	d501      	bpl.n	800d080 <_printf_i+0xec>
 800d07c:	681d      	ldr	r5, [r3, #0]
 800d07e:	e002      	b.n	800d086 <_printf_i+0xf2>
 800d080:	0669      	lsls	r1, r5, #25
 800d082:	d5fb      	bpl.n	800d07c <_printf_i+0xe8>
 800d084:	881d      	ldrh	r5, [r3, #0]
 800d086:	4854      	ldr	r0, [pc, #336]	; (800d1d8 <_printf_i+0x244>)
 800d088:	2f6f      	cmp	r7, #111	; 0x6f
 800d08a:	bf0c      	ite	eq
 800d08c:	2308      	moveq	r3, #8
 800d08e:	230a      	movne	r3, #10
 800d090:	2100      	movs	r1, #0
 800d092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d096:	6866      	ldr	r6, [r4, #4]
 800d098:	60a6      	str	r6, [r4, #8]
 800d09a:	2e00      	cmp	r6, #0
 800d09c:	bfa2      	ittt	ge
 800d09e:	6821      	ldrge	r1, [r4, #0]
 800d0a0:	f021 0104 	bicge.w	r1, r1, #4
 800d0a4:	6021      	strge	r1, [r4, #0]
 800d0a6:	b90d      	cbnz	r5, 800d0ac <_printf_i+0x118>
 800d0a8:	2e00      	cmp	r6, #0
 800d0aa:	d04d      	beq.n	800d148 <_printf_i+0x1b4>
 800d0ac:	4616      	mov	r6, r2
 800d0ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0b2:	fb03 5711 	mls	r7, r3, r1, r5
 800d0b6:	5dc7      	ldrb	r7, [r0, r7]
 800d0b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0bc:	462f      	mov	r7, r5
 800d0be:	42bb      	cmp	r3, r7
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	d9f4      	bls.n	800d0ae <_printf_i+0x11a>
 800d0c4:	2b08      	cmp	r3, #8
 800d0c6:	d10b      	bne.n	800d0e0 <_printf_i+0x14c>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	07df      	lsls	r7, r3, #31
 800d0cc:	d508      	bpl.n	800d0e0 <_printf_i+0x14c>
 800d0ce:	6923      	ldr	r3, [r4, #16]
 800d0d0:	6861      	ldr	r1, [r4, #4]
 800d0d2:	4299      	cmp	r1, r3
 800d0d4:	bfde      	ittt	le
 800d0d6:	2330      	movle	r3, #48	; 0x30
 800d0d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0e0:	1b92      	subs	r2, r2, r6
 800d0e2:	6122      	str	r2, [r4, #16]
 800d0e4:	f8cd a000 	str.w	sl, [sp]
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	aa03      	add	r2, sp, #12
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	f7ff fee2 	bl	800ceb8 <_printf_common>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d14c      	bne.n	800d192 <_printf_i+0x1fe>
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	b004      	add	sp, #16
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	4835      	ldr	r0, [pc, #212]	; (800d1d8 <_printf_i+0x244>)
 800d104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	680e      	ldr	r6, [r1, #0]
 800d10c:	061f      	lsls	r7, r3, #24
 800d10e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d112:	600e      	str	r6, [r1, #0]
 800d114:	d514      	bpl.n	800d140 <_printf_i+0x1ac>
 800d116:	07d9      	lsls	r1, r3, #31
 800d118:	bf44      	itt	mi
 800d11a:	f043 0320 	orrmi.w	r3, r3, #32
 800d11e:	6023      	strmi	r3, [r4, #0]
 800d120:	b91d      	cbnz	r5, 800d12a <_printf_i+0x196>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	f023 0320 	bic.w	r3, r3, #32
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	2310      	movs	r3, #16
 800d12c:	e7b0      	b.n	800d090 <_printf_i+0xfc>
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	f043 0320 	orr.w	r3, r3, #32
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	2378      	movs	r3, #120	; 0x78
 800d138:	4828      	ldr	r0, [pc, #160]	; (800d1dc <_printf_i+0x248>)
 800d13a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d13e:	e7e3      	b.n	800d108 <_printf_i+0x174>
 800d140:	065e      	lsls	r6, r3, #25
 800d142:	bf48      	it	mi
 800d144:	b2ad      	uxthmi	r5, r5
 800d146:	e7e6      	b.n	800d116 <_printf_i+0x182>
 800d148:	4616      	mov	r6, r2
 800d14a:	e7bb      	b.n	800d0c4 <_printf_i+0x130>
 800d14c:	680b      	ldr	r3, [r1, #0]
 800d14e:	6826      	ldr	r6, [r4, #0]
 800d150:	6960      	ldr	r0, [r4, #20]
 800d152:	1d1d      	adds	r5, r3, #4
 800d154:	600d      	str	r5, [r1, #0]
 800d156:	0635      	lsls	r5, r6, #24
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	d501      	bpl.n	800d160 <_printf_i+0x1cc>
 800d15c:	6018      	str	r0, [r3, #0]
 800d15e:	e002      	b.n	800d166 <_printf_i+0x1d2>
 800d160:	0671      	lsls	r1, r6, #25
 800d162:	d5fb      	bpl.n	800d15c <_printf_i+0x1c8>
 800d164:	8018      	strh	r0, [r3, #0]
 800d166:	2300      	movs	r3, #0
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	4616      	mov	r6, r2
 800d16c:	e7ba      	b.n	800d0e4 <_printf_i+0x150>
 800d16e:	680b      	ldr	r3, [r1, #0]
 800d170:	1d1a      	adds	r2, r3, #4
 800d172:	600a      	str	r2, [r1, #0]
 800d174:	681e      	ldr	r6, [r3, #0]
 800d176:	6862      	ldr	r2, [r4, #4]
 800d178:	2100      	movs	r1, #0
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7f3 f830 	bl	80001e0 <memchr>
 800d180:	b108      	cbz	r0, 800d186 <_printf_i+0x1f2>
 800d182:	1b80      	subs	r0, r0, r6
 800d184:	6060      	str	r0, [r4, #4]
 800d186:	6863      	ldr	r3, [r4, #4]
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	2300      	movs	r3, #0
 800d18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d190:	e7a8      	b.n	800d0e4 <_printf_i+0x150>
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	4632      	mov	r2, r6
 800d196:	4649      	mov	r1, r9
 800d198:	4640      	mov	r0, r8
 800d19a:	47d0      	blx	sl
 800d19c:	3001      	adds	r0, #1
 800d19e:	d0ab      	beq.n	800d0f8 <_printf_i+0x164>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	079b      	lsls	r3, r3, #30
 800d1a4:	d413      	bmi.n	800d1ce <_printf_i+0x23a>
 800d1a6:	68e0      	ldr	r0, [r4, #12]
 800d1a8:	9b03      	ldr	r3, [sp, #12]
 800d1aa:	4298      	cmp	r0, r3
 800d1ac:	bfb8      	it	lt
 800d1ae:	4618      	movlt	r0, r3
 800d1b0:	e7a4      	b.n	800d0fc <_printf_i+0x168>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	47d0      	blx	sl
 800d1bc:	3001      	adds	r0, #1
 800d1be:	d09b      	beq.n	800d0f8 <_printf_i+0x164>
 800d1c0:	3501      	adds	r5, #1
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	9903      	ldr	r1, [sp, #12]
 800d1c6:	1a5b      	subs	r3, r3, r1
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	dcf2      	bgt.n	800d1b2 <_printf_i+0x21e>
 800d1cc:	e7eb      	b.n	800d1a6 <_printf_i+0x212>
 800d1ce:	2500      	movs	r5, #0
 800d1d0:	f104 0619 	add.w	r6, r4, #25
 800d1d4:	e7f5      	b.n	800d1c2 <_printf_i+0x22e>
 800d1d6:	bf00      	nop
 800d1d8:	0800f696 	.word	0x0800f696
 800d1dc:	0800f6a7 	.word	0x0800f6a7

0800d1e0 <_puts_r>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	460e      	mov	r6, r1
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	b118      	cbz	r0, 800d1f0 <_puts_r+0x10>
 800d1e8:	6983      	ldr	r3, [r0, #24]
 800d1ea:	b90b      	cbnz	r3, 800d1f0 <_puts_r+0x10>
 800d1ec:	f001 f986 	bl	800e4fc <__sinit>
 800d1f0:	69ab      	ldr	r3, [r5, #24]
 800d1f2:	68ac      	ldr	r4, [r5, #8]
 800d1f4:	b913      	cbnz	r3, 800d1fc <_puts_r+0x1c>
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f001 f980 	bl	800e4fc <__sinit>
 800d1fc:	4b2c      	ldr	r3, [pc, #176]	; (800d2b0 <_puts_r+0xd0>)
 800d1fe:	429c      	cmp	r4, r3
 800d200:	d120      	bne.n	800d244 <_puts_r+0x64>
 800d202:	686c      	ldr	r4, [r5, #4]
 800d204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d206:	07db      	lsls	r3, r3, #31
 800d208:	d405      	bmi.n	800d216 <_puts_r+0x36>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	0598      	lsls	r0, r3, #22
 800d20e:	d402      	bmi.n	800d216 <_puts_r+0x36>
 800d210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d212:	f001 fa16 	bl	800e642 <__retarget_lock_acquire_recursive>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	0719      	lsls	r1, r3, #28
 800d21a:	d51d      	bpl.n	800d258 <_puts_r+0x78>
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	b1db      	cbz	r3, 800d258 <_puts_r+0x78>
 800d220:	3e01      	subs	r6, #1
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d228:	3b01      	subs	r3, #1
 800d22a:	60a3      	str	r3, [r4, #8]
 800d22c:	bb39      	cbnz	r1, 800d27e <_puts_r+0x9e>
 800d22e:	2b00      	cmp	r3, #0
 800d230:	da38      	bge.n	800d2a4 <_puts_r+0xc4>
 800d232:	4622      	mov	r2, r4
 800d234:	210a      	movs	r1, #10
 800d236:	4628      	mov	r0, r5
 800d238:	f000 f90e 	bl	800d458 <__swbuf_r>
 800d23c:	3001      	adds	r0, #1
 800d23e:	d011      	beq.n	800d264 <_puts_r+0x84>
 800d240:	250a      	movs	r5, #10
 800d242:	e011      	b.n	800d268 <_puts_r+0x88>
 800d244:	4b1b      	ldr	r3, [pc, #108]	; (800d2b4 <_puts_r+0xd4>)
 800d246:	429c      	cmp	r4, r3
 800d248:	d101      	bne.n	800d24e <_puts_r+0x6e>
 800d24a:	68ac      	ldr	r4, [r5, #8]
 800d24c:	e7da      	b.n	800d204 <_puts_r+0x24>
 800d24e:	4b1a      	ldr	r3, [pc, #104]	; (800d2b8 <_puts_r+0xd8>)
 800d250:	429c      	cmp	r4, r3
 800d252:	bf08      	it	eq
 800d254:	68ec      	ldreq	r4, [r5, #12]
 800d256:	e7d5      	b.n	800d204 <_puts_r+0x24>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 f94e 	bl	800d4fc <__swsetup_r>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0dd      	beq.n	800d220 <_puts_r+0x40>
 800d264:	f04f 35ff 	mov.w	r5, #4294967295
 800d268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d26a:	07da      	lsls	r2, r3, #31
 800d26c:	d405      	bmi.n	800d27a <_puts_r+0x9a>
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	059b      	lsls	r3, r3, #22
 800d272:	d402      	bmi.n	800d27a <_puts_r+0x9a>
 800d274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d276:	f001 f9e5 	bl	800e644 <__retarget_lock_release_recursive>
 800d27a:	4628      	mov	r0, r5
 800d27c:	bd70      	pop	{r4, r5, r6, pc}
 800d27e:	2b00      	cmp	r3, #0
 800d280:	da04      	bge.n	800d28c <_puts_r+0xac>
 800d282:	69a2      	ldr	r2, [r4, #24]
 800d284:	429a      	cmp	r2, r3
 800d286:	dc06      	bgt.n	800d296 <_puts_r+0xb6>
 800d288:	290a      	cmp	r1, #10
 800d28a:	d004      	beq.n	800d296 <_puts_r+0xb6>
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	7019      	strb	r1, [r3, #0]
 800d294:	e7c5      	b.n	800d222 <_puts_r+0x42>
 800d296:	4622      	mov	r2, r4
 800d298:	4628      	mov	r0, r5
 800d29a:	f000 f8dd 	bl	800d458 <__swbuf_r>
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d1bf      	bne.n	800d222 <_puts_r+0x42>
 800d2a2:	e7df      	b.n	800d264 <_puts_r+0x84>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	250a      	movs	r5, #10
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	6022      	str	r2, [r4, #0]
 800d2ac:	701d      	strb	r5, [r3, #0]
 800d2ae:	e7db      	b.n	800d268 <_puts_r+0x88>
 800d2b0:	0800f76c 	.word	0x0800f76c
 800d2b4:	0800f78c 	.word	0x0800f78c
 800d2b8:	0800f74c 	.word	0x0800f74c

0800d2bc <puts>:
 800d2bc:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <puts+0xc>)
 800d2be:	4601      	mov	r1, r0
 800d2c0:	6818      	ldr	r0, [r3, #0]
 800d2c2:	f7ff bf8d 	b.w	800d1e0 <_puts_r>
 800d2c6:	bf00      	nop
 800d2c8:	2000001c 	.word	0x2000001c

0800d2cc <setvbuf>:
 800d2cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2d0:	461d      	mov	r5, r3
 800d2d2:	4b5d      	ldr	r3, [pc, #372]	; (800d448 <setvbuf+0x17c>)
 800d2d4:	681f      	ldr	r7, [r3, #0]
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	460e      	mov	r6, r1
 800d2da:	4690      	mov	r8, r2
 800d2dc:	b127      	cbz	r7, 800d2e8 <setvbuf+0x1c>
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	b913      	cbnz	r3, 800d2e8 <setvbuf+0x1c>
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	f001 f90a 	bl	800e4fc <__sinit>
 800d2e8:	4b58      	ldr	r3, [pc, #352]	; (800d44c <setvbuf+0x180>)
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	d167      	bne.n	800d3be <setvbuf+0xf2>
 800d2ee:	687c      	ldr	r4, [r7, #4]
 800d2f0:	f1b8 0f02 	cmp.w	r8, #2
 800d2f4:	d006      	beq.n	800d304 <setvbuf+0x38>
 800d2f6:	f1b8 0f01 	cmp.w	r8, #1
 800d2fa:	f200 809f 	bhi.w	800d43c <setvbuf+0x170>
 800d2fe:	2d00      	cmp	r5, #0
 800d300:	f2c0 809c 	blt.w	800d43c <setvbuf+0x170>
 800d304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d306:	07db      	lsls	r3, r3, #31
 800d308:	d405      	bmi.n	800d316 <setvbuf+0x4a>
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	0598      	lsls	r0, r3, #22
 800d30e:	d402      	bmi.n	800d316 <setvbuf+0x4a>
 800d310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d312:	f001 f996 	bl	800e642 <__retarget_lock_acquire_recursive>
 800d316:	4621      	mov	r1, r4
 800d318:	4638      	mov	r0, r7
 800d31a:	f001 f85b 	bl	800e3d4 <_fflush_r>
 800d31e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d320:	b141      	cbz	r1, 800d334 <setvbuf+0x68>
 800d322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d326:	4299      	cmp	r1, r3
 800d328:	d002      	beq.n	800d330 <setvbuf+0x64>
 800d32a:	4638      	mov	r0, r7
 800d32c:	f001 fd86 	bl	800ee3c <_free_r>
 800d330:	2300      	movs	r3, #0
 800d332:	6363      	str	r3, [r4, #52]	; 0x34
 800d334:	2300      	movs	r3, #0
 800d336:	61a3      	str	r3, [r4, #24]
 800d338:	6063      	str	r3, [r4, #4]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	0619      	lsls	r1, r3, #24
 800d33e:	d503      	bpl.n	800d348 <setvbuf+0x7c>
 800d340:	6921      	ldr	r1, [r4, #16]
 800d342:	4638      	mov	r0, r7
 800d344:	f001 fd7a 	bl	800ee3c <_free_r>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d34e:	f023 0303 	bic.w	r3, r3, #3
 800d352:	f1b8 0f02 	cmp.w	r8, #2
 800d356:	81a3      	strh	r3, [r4, #12]
 800d358:	d06c      	beq.n	800d434 <setvbuf+0x168>
 800d35a:	ab01      	add	r3, sp, #4
 800d35c:	466a      	mov	r2, sp
 800d35e:	4621      	mov	r1, r4
 800d360:	4638      	mov	r0, r7
 800d362:	f001 f970 	bl	800e646 <__swhatbuf_r>
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	4318      	orrs	r0, r3
 800d36a:	81a0      	strh	r0, [r4, #12]
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	d130      	bne.n	800d3d2 <setvbuf+0x106>
 800d370:	9d00      	ldr	r5, [sp, #0]
 800d372:	4628      	mov	r0, r5
 800d374:	f001 f9cc 	bl	800e710 <malloc>
 800d378:	4606      	mov	r6, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d155      	bne.n	800d42a <setvbuf+0x15e>
 800d37e:	f8dd 9000 	ldr.w	r9, [sp]
 800d382:	45a9      	cmp	r9, r5
 800d384:	d14a      	bne.n	800d41c <setvbuf+0x150>
 800d386:	f04f 35ff 	mov.w	r5, #4294967295
 800d38a:	2200      	movs	r2, #0
 800d38c:	60a2      	str	r2, [r4, #8]
 800d38e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d392:	6022      	str	r2, [r4, #0]
 800d394:	6122      	str	r2, [r4, #16]
 800d396:	2201      	movs	r2, #1
 800d398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d39c:	6162      	str	r2, [r4, #20]
 800d39e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3a0:	f043 0302 	orr.w	r3, r3, #2
 800d3a4:	07d2      	lsls	r2, r2, #31
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	d405      	bmi.n	800d3b6 <setvbuf+0xea>
 800d3aa:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d3ae:	d102      	bne.n	800d3b6 <setvbuf+0xea>
 800d3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3b2:	f001 f947 	bl	800e644 <__retarget_lock_release_recursive>
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	b003      	add	sp, #12
 800d3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3be:	4b24      	ldr	r3, [pc, #144]	; (800d450 <setvbuf+0x184>)
 800d3c0:	429c      	cmp	r4, r3
 800d3c2:	d101      	bne.n	800d3c8 <setvbuf+0xfc>
 800d3c4:	68bc      	ldr	r4, [r7, #8]
 800d3c6:	e793      	b.n	800d2f0 <setvbuf+0x24>
 800d3c8:	4b22      	ldr	r3, [pc, #136]	; (800d454 <setvbuf+0x188>)
 800d3ca:	429c      	cmp	r4, r3
 800d3cc:	bf08      	it	eq
 800d3ce:	68fc      	ldreq	r4, [r7, #12]
 800d3d0:	e78e      	b.n	800d2f0 <setvbuf+0x24>
 800d3d2:	2e00      	cmp	r6, #0
 800d3d4:	d0cd      	beq.n	800d372 <setvbuf+0xa6>
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	b913      	cbnz	r3, 800d3e0 <setvbuf+0x114>
 800d3da:	4638      	mov	r0, r7
 800d3dc:	f001 f88e 	bl	800e4fc <__sinit>
 800d3e0:	f1b8 0f01 	cmp.w	r8, #1
 800d3e4:	bf08      	it	eq
 800d3e6:	89a3      	ldrheq	r3, [r4, #12]
 800d3e8:	6026      	str	r6, [r4, #0]
 800d3ea:	bf04      	itt	eq
 800d3ec:	f043 0301 	orreq.w	r3, r3, #1
 800d3f0:	81a3      	strheq	r3, [r4, #12]
 800d3f2:	89a2      	ldrh	r2, [r4, #12]
 800d3f4:	f012 0308 	ands.w	r3, r2, #8
 800d3f8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d3fc:	d01c      	beq.n	800d438 <setvbuf+0x16c>
 800d3fe:	07d3      	lsls	r3, r2, #31
 800d400:	bf41      	itttt	mi
 800d402:	2300      	movmi	r3, #0
 800d404:	426d      	negmi	r5, r5
 800d406:	60a3      	strmi	r3, [r4, #8]
 800d408:	61a5      	strmi	r5, [r4, #24]
 800d40a:	bf58      	it	pl
 800d40c:	60a5      	strpl	r5, [r4, #8]
 800d40e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d410:	f015 0501 	ands.w	r5, r5, #1
 800d414:	d115      	bne.n	800d442 <setvbuf+0x176>
 800d416:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d41a:	e7c8      	b.n	800d3ae <setvbuf+0xe2>
 800d41c:	4648      	mov	r0, r9
 800d41e:	f001 f977 	bl	800e710 <malloc>
 800d422:	4606      	mov	r6, r0
 800d424:	2800      	cmp	r0, #0
 800d426:	d0ae      	beq.n	800d386 <setvbuf+0xba>
 800d428:	464d      	mov	r5, r9
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	e7d0      	b.n	800d3d6 <setvbuf+0x10a>
 800d434:	2500      	movs	r5, #0
 800d436:	e7a8      	b.n	800d38a <setvbuf+0xbe>
 800d438:	60a3      	str	r3, [r4, #8]
 800d43a:	e7e8      	b.n	800d40e <setvbuf+0x142>
 800d43c:	f04f 35ff 	mov.w	r5, #4294967295
 800d440:	e7b9      	b.n	800d3b6 <setvbuf+0xea>
 800d442:	2500      	movs	r5, #0
 800d444:	e7b7      	b.n	800d3b6 <setvbuf+0xea>
 800d446:	bf00      	nop
 800d448:	2000001c 	.word	0x2000001c
 800d44c:	0800f76c 	.word	0x0800f76c
 800d450:	0800f78c 	.word	0x0800f78c
 800d454:	0800f74c 	.word	0x0800f74c

0800d458 <__swbuf_r>:
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	460e      	mov	r6, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	4605      	mov	r5, r0
 800d460:	b118      	cbz	r0, 800d46a <__swbuf_r+0x12>
 800d462:	6983      	ldr	r3, [r0, #24]
 800d464:	b90b      	cbnz	r3, 800d46a <__swbuf_r+0x12>
 800d466:	f001 f849 	bl	800e4fc <__sinit>
 800d46a:	4b21      	ldr	r3, [pc, #132]	; (800d4f0 <__swbuf_r+0x98>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	d12b      	bne.n	800d4c8 <__swbuf_r+0x70>
 800d470:	686c      	ldr	r4, [r5, #4]
 800d472:	69a3      	ldr	r3, [r4, #24]
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	071a      	lsls	r2, r3, #28
 800d47a:	d52f      	bpl.n	800d4dc <__swbuf_r+0x84>
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	b36b      	cbz	r3, 800d4dc <__swbuf_r+0x84>
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	1ac0      	subs	r0, r0, r3
 800d486:	6963      	ldr	r3, [r4, #20]
 800d488:	b2f6      	uxtb	r6, r6
 800d48a:	4283      	cmp	r3, r0
 800d48c:	4637      	mov	r7, r6
 800d48e:	dc04      	bgt.n	800d49a <__swbuf_r+0x42>
 800d490:	4621      	mov	r1, r4
 800d492:	4628      	mov	r0, r5
 800d494:	f000 ff9e 	bl	800e3d4 <_fflush_r>
 800d498:	bb30      	cbnz	r0, 800d4e8 <__swbuf_r+0x90>
 800d49a:	68a3      	ldr	r3, [r4, #8]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	6022      	str	r2, [r4, #0]
 800d4a6:	701e      	strb	r6, [r3, #0]
 800d4a8:	6963      	ldr	r3, [r4, #20]
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	4283      	cmp	r3, r0
 800d4ae:	d004      	beq.n	800d4ba <__swbuf_r+0x62>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	07db      	lsls	r3, r3, #31
 800d4b4:	d506      	bpl.n	800d4c4 <__swbuf_r+0x6c>
 800d4b6:	2e0a      	cmp	r6, #10
 800d4b8:	d104      	bne.n	800d4c4 <__swbuf_r+0x6c>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 ff89 	bl	800e3d4 <_fflush_r>
 800d4c2:	b988      	cbnz	r0, 800d4e8 <__swbuf_r+0x90>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <__swbuf_r+0x9c>)
 800d4ca:	429c      	cmp	r4, r3
 800d4cc:	d101      	bne.n	800d4d2 <__swbuf_r+0x7a>
 800d4ce:	68ac      	ldr	r4, [r5, #8]
 800d4d0:	e7cf      	b.n	800d472 <__swbuf_r+0x1a>
 800d4d2:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <__swbuf_r+0xa0>)
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	bf08      	it	eq
 800d4d8:	68ec      	ldreq	r4, [r5, #12]
 800d4da:	e7ca      	b.n	800d472 <__swbuf_r+0x1a>
 800d4dc:	4621      	mov	r1, r4
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f80c 	bl	800d4fc <__swsetup_r>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0cb      	beq.n	800d480 <__swbuf_r+0x28>
 800d4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4ec:	e7ea      	b.n	800d4c4 <__swbuf_r+0x6c>
 800d4ee:	bf00      	nop
 800d4f0:	0800f76c 	.word	0x0800f76c
 800d4f4:	0800f78c 	.word	0x0800f78c
 800d4f8:	0800f74c 	.word	0x0800f74c

0800d4fc <__swsetup_r>:
 800d4fc:	4b32      	ldr	r3, [pc, #200]	; (800d5c8 <__swsetup_r+0xcc>)
 800d4fe:	b570      	push	{r4, r5, r6, lr}
 800d500:	681d      	ldr	r5, [r3, #0]
 800d502:	4606      	mov	r6, r0
 800d504:	460c      	mov	r4, r1
 800d506:	b125      	cbz	r5, 800d512 <__swsetup_r+0x16>
 800d508:	69ab      	ldr	r3, [r5, #24]
 800d50a:	b913      	cbnz	r3, 800d512 <__swsetup_r+0x16>
 800d50c:	4628      	mov	r0, r5
 800d50e:	f000 fff5 	bl	800e4fc <__sinit>
 800d512:	4b2e      	ldr	r3, [pc, #184]	; (800d5cc <__swsetup_r+0xd0>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d10f      	bne.n	800d538 <__swsetup_r+0x3c>
 800d518:	686c      	ldr	r4, [r5, #4]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d520:	0719      	lsls	r1, r3, #28
 800d522:	d42c      	bmi.n	800d57e <__swsetup_r+0x82>
 800d524:	06dd      	lsls	r5, r3, #27
 800d526:	d411      	bmi.n	800d54c <__swsetup_r+0x50>
 800d528:	2309      	movs	r3, #9
 800d52a:	6033      	str	r3, [r6, #0]
 800d52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d530:	81a3      	strh	r3, [r4, #12]
 800d532:	f04f 30ff 	mov.w	r0, #4294967295
 800d536:	e03e      	b.n	800d5b6 <__swsetup_r+0xba>
 800d538:	4b25      	ldr	r3, [pc, #148]	; (800d5d0 <__swsetup_r+0xd4>)
 800d53a:	429c      	cmp	r4, r3
 800d53c:	d101      	bne.n	800d542 <__swsetup_r+0x46>
 800d53e:	68ac      	ldr	r4, [r5, #8]
 800d540:	e7eb      	b.n	800d51a <__swsetup_r+0x1e>
 800d542:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <__swsetup_r+0xd8>)
 800d544:	429c      	cmp	r4, r3
 800d546:	bf08      	it	eq
 800d548:	68ec      	ldreq	r4, [r5, #12]
 800d54a:	e7e6      	b.n	800d51a <__swsetup_r+0x1e>
 800d54c:	0758      	lsls	r0, r3, #29
 800d54e:	d512      	bpl.n	800d576 <__swsetup_r+0x7a>
 800d550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d552:	b141      	cbz	r1, 800d566 <__swsetup_r+0x6a>
 800d554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d558:	4299      	cmp	r1, r3
 800d55a:	d002      	beq.n	800d562 <__swsetup_r+0x66>
 800d55c:	4630      	mov	r0, r6
 800d55e:	f001 fc6d 	bl	800ee3c <_free_r>
 800d562:	2300      	movs	r3, #0
 800d564:	6363      	str	r3, [r4, #52]	; 0x34
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	2300      	movs	r3, #0
 800d570:	6063      	str	r3, [r4, #4]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f043 0308 	orr.w	r3, r3, #8
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	b94b      	cbnz	r3, 800d596 <__swsetup_r+0x9a>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d58c:	d003      	beq.n	800d596 <__swsetup_r+0x9a>
 800d58e:	4621      	mov	r1, r4
 800d590:	4630      	mov	r0, r6
 800d592:	f001 f87d 	bl	800e690 <__smakebuf_r>
 800d596:	89a0      	ldrh	r0, [r4, #12]
 800d598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d59c:	f010 0301 	ands.w	r3, r0, #1
 800d5a0:	d00a      	beq.n	800d5b8 <__swsetup_r+0xbc>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	6963      	ldr	r3, [r4, #20]
 800d5a8:	425b      	negs	r3, r3
 800d5aa:	61a3      	str	r3, [r4, #24]
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	b943      	cbnz	r3, 800d5c2 <__swsetup_r+0xc6>
 800d5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5b4:	d1ba      	bne.n	800d52c <__swsetup_r+0x30>
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	0781      	lsls	r1, r0, #30
 800d5ba:	bf58      	it	pl
 800d5bc:	6963      	ldrpl	r3, [r4, #20]
 800d5be:	60a3      	str	r3, [r4, #8]
 800d5c0:	e7f4      	b.n	800d5ac <__swsetup_r+0xb0>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e7f7      	b.n	800d5b6 <__swsetup_r+0xba>
 800d5c6:	bf00      	nop
 800d5c8:	2000001c 	.word	0x2000001c
 800d5cc:	0800f76c 	.word	0x0800f76c
 800d5d0:	0800f78c 	.word	0x0800f78c
 800d5d4:	0800f74c 	.word	0x0800f74c

0800d5d8 <quorem>:
 800d5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	6903      	ldr	r3, [r0, #16]
 800d5de:	690c      	ldr	r4, [r1, #16]
 800d5e0:	42a3      	cmp	r3, r4
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	f2c0 8081 	blt.w	800d6ea <quorem+0x112>
 800d5e8:	3c01      	subs	r4, #1
 800d5ea:	f101 0814 	add.w	r8, r1, #20
 800d5ee:	f100 0514 	add.w	r5, r0, #20
 800d5f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d5fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d600:	3301      	adds	r3, #1
 800d602:	429a      	cmp	r2, r3
 800d604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d60c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d610:	d331      	bcc.n	800d676 <quorem+0x9e>
 800d612:	f04f 0e00 	mov.w	lr, #0
 800d616:	4640      	mov	r0, r8
 800d618:	46ac      	mov	ip, r5
 800d61a:	46f2      	mov	sl, lr
 800d61c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d620:	b293      	uxth	r3, r2
 800d622:	fb06 e303 	mla	r3, r6, r3, lr
 800d626:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	ebaa 0303 	sub.w	r3, sl, r3
 800d630:	0c12      	lsrs	r2, r2, #16
 800d632:	f8dc a000 	ldr.w	sl, [ip]
 800d636:	fb06 e202 	mla	r2, r6, r2, lr
 800d63a:	fa13 f38a 	uxtah	r3, r3, sl
 800d63e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d642:	fa1f fa82 	uxth.w	sl, r2
 800d646:	f8dc 2000 	ldr.w	r2, [ip]
 800d64a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d64e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d652:	b29b      	uxth	r3, r3
 800d654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d658:	4581      	cmp	r9, r0
 800d65a:	f84c 3b04 	str.w	r3, [ip], #4
 800d65e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d662:	d2db      	bcs.n	800d61c <quorem+0x44>
 800d664:	f855 300b 	ldr.w	r3, [r5, fp]
 800d668:	b92b      	cbnz	r3, 800d676 <quorem+0x9e>
 800d66a:	9b01      	ldr	r3, [sp, #4]
 800d66c:	3b04      	subs	r3, #4
 800d66e:	429d      	cmp	r5, r3
 800d670:	461a      	mov	r2, r3
 800d672:	d32e      	bcc.n	800d6d2 <quorem+0xfa>
 800d674:	613c      	str	r4, [r7, #16]
 800d676:	4638      	mov	r0, r7
 800d678:	f001 fad0 	bl	800ec1c <__mcmp>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	db24      	blt.n	800d6ca <quorem+0xf2>
 800d680:	3601      	adds	r6, #1
 800d682:	4628      	mov	r0, r5
 800d684:	f04f 0c00 	mov.w	ip, #0
 800d688:	f858 2b04 	ldr.w	r2, [r8], #4
 800d68c:	f8d0 e000 	ldr.w	lr, [r0]
 800d690:	b293      	uxth	r3, r2
 800d692:	ebac 0303 	sub.w	r3, ip, r3
 800d696:	0c12      	lsrs	r2, r2, #16
 800d698:	fa13 f38e 	uxtah	r3, r3, lr
 800d69c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6aa:	45c1      	cmp	r9, r8
 800d6ac:	f840 3b04 	str.w	r3, [r0], #4
 800d6b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6b4:	d2e8      	bcs.n	800d688 <quorem+0xb0>
 800d6b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6be:	b922      	cbnz	r2, 800d6ca <quorem+0xf2>
 800d6c0:	3b04      	subs	r3, #4
 800d6c2:	429d      	cmp	r5, r3
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	d30a      	bcc.n	800d6de <quorem+0x106>
 800d6c8:	613c      	str	r4, [r7, #16]
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	b003      	add	sp, #12
 800d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d2:	6812      	ldr	r2, [r2, #0]
 800d6d4:	3b04      	subs	r3, #4
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	d1cc      	bne.n	800d674 <quorem+0x9c>
 800d6da:	3c01      	subs	r4, #1
 800d6dc:	e7c7      	b.n	800d66e <quorem+0x96>
 800d6de:	6812      	ldr	r2, [r2, #0]
 800d6e0:	3b04      	subs	r3, #4
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	d1f0      	bne.n	800d6c8 <quorem+0xf0>
 800d6e6:	3c01      	subs	r4, #1
 800d6e8:	e7eb      	b.n	800d6c2 <quorem+0xea>
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	e7ee      	b.n	800d6cc <quorem+0xf4>
	...

0800d6f0 <_dtoa_r>:
 800d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	ed2d 8b02 	vpush	{d8}
 800d6f8:	ec57 6b10 	vmov	r6, r7, d0
 800d6fc:	b095      	sub	sp, #84	; 0x54
 800d6fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d700:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d704:	9105      	str	r1, [sp, #20]
 800d706:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d70a:	4604      	mov	r4, r0
 800d70c:	9209      	str	r2, [sp, #36]	; 0x24
 800d70e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d710:	b975      	cbnz	r5, 800d730 <_dtoa_r+0x40>
 800d712:	2010      	movs	r0, #16
 800d714:	f000 fffc 	bl	800e710 <malloc>
 800d718:	4602      	mov	r2, r0
 800d71a:	6260      	str	r0, [r4, #36]	; 0x24
 800d71c:	b920      	cbnz	r0, 800d728 <_dtoa_r+0x38>
 800d71e:	4bb2      	ldr	r3, [pc, #712]	; (800d9e8 <_dtoa_r+0x2f8>)
 800d720:	21ea      	movs	r1, #234	; 0xea
 800d722:	48b2      	ldr	r0, [pc, #712]	; (800d9ec <_dtoa_r+0x2fc>)
 800d724:	f001 fc9a 	bl	800f05c <__assert_func>
 800d728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d72c:	6005      	str	r5, [r0, #0]
 800d72e:	60c5      	str	r5, [r0, #12]
 800d730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d732:	6819      	ldr	r1, [r3, #0]
 800d734:	b151      	cbz	r1, 800d74c <_dtoa_r+0x5c>
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	604a      	str	r2, [r1, #4]
 800d73a:	2301      	movs	r3, #1
 800d73c:	4093      	lsls	r3, r2
 800d73e:	608b      	str	r3, [r1, #8]
 800d740:	4620      	mov	r0, r4
 800d742:	f001 f82d 	bl	800e7a0 <_Bfree>
 800d746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d748:	2200      	movs	r2, #0
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	1e3b      	subs	r3, r7, #0
 800d74e:	bfb9      	ittee	lt
 800d750:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d754:	9303      	strlt	r3, [sp, #12]
 800d756:	2300      	movge	r3, #0
 800d758:	f8c8 3000 	strge.w	r3, [r8]
 800d75c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d760:	4ba3      	ldr	r3, [pc, #652]	; (800d9f0 <_dtoa_r+0x300>)
 800d762:	bfbc      	itt	lt
 800d764:	2201      	movlt	r2, #1
 800d766:	f8c8 2000 	strlt.w	r2, [r8]
 800d76a:	ea33 0309 	bics.w	r3, r3, r9
 800d76e:	d11b      	bne.n	800d7a8 <_dtoa_r+0xb8>
 800d770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d772:	f242 730f 	movw	r3, #9999	; 0x270f
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d77c:	4333      	orrs	r3, r6
 800d77e:	f000 857a 	beq.w	800e276 <_dtoa_r+0xb86>
 800d782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d784:	b963      	cbnz	r3, 800d7a0 <_dtoa_r+0xb0>
 800d786:	4b9b      	ldr	r3, [pc, #620]	; (800d9f4 <_dtoa_r+0x304>)
 800d788:	e024      	b.n	800d7d4 <_dtoa_r+0xe4>
 800d78a:	4b9b      	ldr	r3, [pc, #620]	; (800d9f8 <_dtoa_r+0x308>)
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	3308      	adds	r3, #8
 800d790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	9800      	ldr	r0, [sp, #0]
 800d796:	b015      	add	sp, #84	; 0x54
 800d798:	ecbd 8b02 	vpop	{d8}
 800d79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a0:	4b94      	ldr	r3, [pc, #592]	; (800d9f4 <_dtoa_r+0x304>)
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	3303      	adds	r3, #3
 800d7a6:	e7f3      	b.n	800d790 <_dtoa_r+0xa0>
 800d7a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	ec51 0b17 	vmov	r0, r1, d7
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d7b8:	f7f3 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7bc:	4680      	mov	r8, r0
 800d7be:	b158      	cbz	r0, 800d7d8 <_dtoa_r+0xe8>
 800d7c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 8551 	beq.w	800e270 <_dtoa_r+0xb80>
 800d7ce:	488b      	ldr	r0, [pc, #556]	; (800d9fc <_dtoa_r+0x30c>)
 800d7d0:	6018      	str	r0, [r3, #0]
 800d7d2:	1e43      	subs	r3, r0, #1
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	e7dd      	b.n	800d794 <_dtoa_r+0xa4>
 800d7d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d7dc:	aa12      	add	r2, sp, #72	; 0x48
 800d7de:	a913      	add	r1, sp, #76	; 0x4c
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f001 fabf 	bl	800ed64 <__d2b>
 800d7e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7ea:	4683      	mov	fp, r0
 800d7ec:	2d00      	cmp	r5, #0
 800d7ee:	d07c      	beq.n	800d8ea <_dtoa_r+0x1fa>
 800d7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d7f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d7fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d80a:	4b7d      	ldr	r3, [pc, #500]	; (800da00 <_dtoa_r+0x310>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	4630      	mov	r0, r6
 800d810:	4639      	mov	r1, r7
 800d812:	f7f2 fd39 	bl	8000288 <__aeabi_dsub>
 800d816:	a36e      	add	r3, pc, #440	; (adr r3, 800d9d0 <_dtoa_r+0x2e0>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f7f2 feec 	bl	80005f8 <__aeabi_dmul>
 800d820:	a36d      	add	r3, pc, #436	; (adr r3, 800d9d8 <_dtoa_r+0x2e8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 fd31 	bl	800028c <__adddf3>
 800d82a:	4606      	mov	r6, r0
 800d82c:	4628      	mov	r0, r5
 800d82e:	460f      	mov	r7, r1
 800d830:	f7f2 fe78 	bl	8000524 <__aeabi_i2d>
 800d834:	a36a      	add	r3, pc, #424	; (adr r3, 800d9e0 <_dtoa_r+0x2f0>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	f7f2 fedd 	bl	80005f8 <__aeabi_dmul>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	4630      	mov	r0, r6
 800d844:	4639      	mov	r1, r7
 800d846:	f7f2 fd21 	bl	800028c <__adddf3>
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	f7f3 f983 	bl	8000b58 <__aeabi_d2iz>
 800d852:	2200      	movs	r2, #0
 800d854:	4682      	mov	sl, r0
 800d856:	2300      	movs	r3, #0
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f3 f93e 	bl	8000adc <__aeabi_dcmplt>
 800d860:	b148      	cbz	r0, 800d876 <_dtoa_r+0x186>
 800d862:	4650      	mov	r0, sl
 800d864:	f7f2 fe5e 	bl	8000524 <__aeabi_i2d>
 800d868:	4632      	mov	r2, r6
 800d86a:	463b      	mov	r3, r7
 800d86c:	f7f3 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d870:	b908      	cbnz	r0, 800d876 <_dtoa_r+0x186>
 800d872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d876:	f1ba 0f16 	cmp.w	sl, #22
 800d87a:	d854      	bhi.n	800d926 <_dtoa_r+0x236>
 800d87c:	4b61      	ldr	r3, [pc, #388]	; (800da04 <_dtoa_r+0x314>)
 800d87e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d88a:	f7f3 f927 	bl	8000adc <__aeabi_dcmplt>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d04b      	beq.n	800d92a <_dtoa_r+0x23a>
 800d892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d896:	2300      	movs	r3, #0
 800d898:	930e      	str	r3, [sp, #56]	; 0x38
 800d89a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d89c:	1b5d      	subs	r5, r3, r5
 800d89e:	1e6b      	subs	r3, r5, #1
 800d8a0:	9304      	str	r3, [sp, #16]
 800d8a2:	bf43      	ittte	mi
 800d8a4:	2300      	movmi	r3, #0
 800d8a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800d8aa:	9304      	strmi	r3, [sp, #16]
 800d8ac:	f04f 0800 	movpl.w	r8, #0
 800d8b0:	f1ba 0f00 	cmp.w	sl, #0
 800d8b4:	db3b      	blt.n	800d92e <_dtoa_r+0x23e>
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d8bc:	4453      	add	r3, sl
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9306      	str	r3, [sp, #24]
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	2b09      	cmp	r3, #9
 800d8c8:	d869      	bhi.n	800d99e <_dtoa_r+0x2ae>
 800d8ca:	2b05      	cmp	r3, #5
 800d8cc:	bfc4      	itt	gt
 800d8ce:	3b04      	subgt	r3, #4
 800d8d0:	9305      	strgt	r3, [sp, #20]
 800d8d2:	9b05      	ldr	r3, [sp, #20]
 800d8d4:	f1a3 0302 	sub.w	r3, r3, #2
 800d8d8:	bfcc      	ite	gt
 800d8da:	2500      	movgt	r5, #0
 800d8dc:	2501      	movle	r5, #1
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d869      	bhi.n	800d9b6 <_dtoa_r+0x2c6>
 800d8e2:	e8df f003 	tbb	[pc, r3]
 800d8e6:	4e2c      	.short	0x4e2c
 800d8e8:	5a4c      	.short	0x5a4c
 800d8ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d8ee:	441d      	add	r5, r3
 800d8f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d8f4:	2b20      	cmp	r3, #32
 800d8f6:	bfc1      	itttt	gt
 800d8f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d8fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d900:	fa09 f303 	lslgt.w	r3, r9, r3
 800d904:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d908:	bfda      	itte	le
 800d90a:	f1c3 0320 	rsble	r3, r3, #32
 800d90e:	fa06 f003 	lslle.w	r0, r6, r3
 800d912:	4318      	orrgt	r0, r3
 800d914:	f7f2 fdf6 	bl	8000504 <__aeabi_ui2d>
 800d918:	2301      	movs	r3, #1
 800d91a:	4606      	mov	r6, r0
 800d91c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d920:	3d01      	subs	r5, #1
 800d922:	9310      	str	r3, [sp, #64]	; 0x40
 800d924:	e771      	b.n	800d80a <_dtoa_r+0x11a>
 800d926:	2301      	movs	r3, #1
 800d928:	e7b6      	b.n	800d898 <_dtoa_r+0x1a8>
 800d92a:	900e      	str	r0, [sp, #56]	; 0x38
 800d92c:	e7b5      	b.n	800d89a <_dtoa_r+0x1aa>
 800d92e:	f1ca 0300 	rsb	r3, sl, #0
 800d932:	9306      	str	r3, [sp, #24]
 800d934:	2300      	movs	r3, #0
 800d936:	eba8 080a 	sub.w	r8, r8, sl
 800d93a:	930d      	str	r3, [sp, #52]	; 0x34
 800d93c:	e7c2      	b.n	800d8c4 <_dtoa_r+0x1d4>
 800d93e:	2300      	movs	r3, #0
 800d940:	9308      	str	r3, [sp, #32]
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	dc39      	bgt.n	800d9bc <_dtoa_r+0x2cc>
 800d948:	f04f 0901 	mov.w	r9, #1
 800d94c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d950:	464b      	mov	r3, r9
 800d952:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d956:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d958:	2200      	movs	r2, #0
 800d95a:	6042      	str	r2, [r0, #4]
 800d95c:	2204      	movs	r2, #4
 800d95e:	f102 0614 	add.w	r6, r2, #20
 800d962:	429e      	cmp	r6, r3
 800d964:	6841      	ldr	r1, [r0, #4]
 800d966:	d92f      	bls.n	800d9c8 <_dtoa_r+0x2d8>
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fed9 	bl	800e720 <_Balloc>
 800d96e:	9000      	str	r0, [sp, #0]
 800d970:	2800      	cmp	r0, #0
 800d972:	d14b      	bne.n	800da0c <_dtoa_r+0x31c>
 800d974:	4b24      	ldr	r3, [pc, #144]	; (800da08 <_dtoa_r+0x318>)
 800d976:	4602      	mov	r2, r0
 800d978:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d97c:	e6d1      	b.n	800d722 <_dtoa_r+0x32>
 800d97e:	2301      	movs	r3, #1
 800d980:	e7de      	b.n	800d940 <_dtoa_r+0x250>
 800d982:	2300      	movs	r3, #0
 800d984:	9308      	str	r3, [sp, #32]
 800d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d988:	eb0a 0903 	add.w	r9, sl, r3
 800d98c:	f109 0301 	add.w	r3, r9, #1
 800d990:	2b01      	cmp	r3, #1
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	bfb8      	it	lt
 800d996:	2301      	movlt	r3, #1
 800d998:	e7dd      	b.n	800d956 <_dtoa_r+0x266>
 800d99a:	2301      	movs	r3, #1
 800d99c:	e7f2      	b.n	800d984 <_dtoa_r+0x294>
 800d99e:	2501      	movs	r5, #1
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	9305      	str	r3, [sp, #20]
 800d9a4:	9508      	str	r5, [sp, #32]
 800d9a6:	f04f 39ff 	mov.w	r9, #4294967295
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9b0:	2312      	movs	r3, #18
 800d9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d9b4:	e7cf      	b.n	800d956 <_dtoa_r+0x266>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	9308      	str	r3, [sp, #32]
 800d9ba:	e7f4      	b.n	800d9a6 <_dtoa_r+0x2b6>
 800d9bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d9c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9c4:	464b      	mov	r3, r9
 800d9c6:	e7c6      	b.n	800d956 <_dtoa_r+0x266>
 800d9c8:	3101      	adds	r1, #1
 800d9ca:	6041      	str	r1, [r0, #4]
 800d9cc:	0052      	lsls	r2, r2, #1
 800d9ce:	e7c6      	b.n	800d95e <_dtoa_r+0x26e>
 800d9d0:	636f4361 	.word	0x636f4361
 800d9d4:	3fd287a7 	.word	0x3fd287a7
 800d9d8:	8b60c8b3 	.word	0x8b60c8b3
 800d9dc:	3fc68a28 	.word	0x3fc68a28
 800d9e0:	509f79fb 	.word	0x509f79fb
 800d9e4:	3fd34413 	.word	0x3fd34413
 800d9e8:	0800f6c5 	.word	0x0800f6c5
 800d9ec:	0800f6dc 	.word	0x0800f6dc
 800d9f0:	7ff00000 	.word	0x7ff00000
 800d9f4:	0800f6c1 	.word	0x0800f6c1
 800d9f8:	0800f6b8 	.word	0x0800f6b8
 800d9fc:	0800f695 	.word	0x0800f695
 800da00:	3ff80000 	.word	0x3ff80000
 800da04:	0800f838 	.word	0x0800f838
 800da08:	0800f73b 	.word	0x0800f73b
 800da0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da0e:	9a00      	ldr	r2, [sp, #0]
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	9b01      	ldr	r3, [sp, #4]
 800da14:	2b0e      	cmp	r3, #14
 800da16:	f200 80ad 	bhi.w	800db74 <_dtoa_r+0x484>
 800da1a:	2d00      	cmp	r5, #0
 800da1c:	f000 80aa 	beq.w	800db74 <_dtoa_r+0x484>
 800da20:	f1ba 0f00 	cmp.w	sl, #0
 800da24:	dd36      	ble.n	800da94 <_dtoa_r+0x3a4>
 800da26:	4ac3      	ldr	r2, [pc, #780]	; (800dd34 <_dtoa_r+0x644>)
 800da28:	f00a 030f 	and.w	r3, sl, #15
 800da2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da30:	ed93 7b00 	vldr	d7, [r3]
 800da34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800da38:	ea4f 172a 	mov.w	r7, sl, asr #4
 800da3c:	eeb0 8a47 	vmov.f32	s16, s14
 800da40:	eef0 8a67 	vmov.f32	s17, s15
 800da44:	d016      	beq.n	800da74 <_dtoa_r+0x384>
 800da46:	4bbc      	ldr	r3, [pc, #752]	; (800dd38 <_dtoa_r+0x648>)
 800da48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da50:	f7f2 fefc 	bl	800084c <__aeabi_ddiv>
 800da54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da58:	f007 070f 	and.w	r7, r7, #15
 800da5c:	2503      	movs	r5, #3
 800da5e:	4eb6      	ldr	r6, [pc, #728]	; (800dd38 <_dtoa_r+0x648>)
 800da60:	b957      	cbnz	r7, 800da78 <_dtoa_r+0x388>
 800da62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da66:	ec53 2b18 	vmov	r2, r3, d8
 800da6a:	f7f2 feef 	bl	800084c <__aeabi_ddiv>
 800da6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da72:	e029      	b.n	800dac8 <_dtoa_r+0x3d8>
 800da74:	2502      	movs	r5, #2
 800da76:	e7f2      	b.n	800da5e <_dtoa_r+0x36e>
 800da78:	07f9      	lsls	r1, r7, #31
 800da7a:	d508      	bpl.n	800da8e <_dtoa_r+0x39e>
 800da7c:	ec51 0b18 	vmov	r0, r1, d8
 800da80:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da84:	f7f2 fdb8 	bl	80005f8 <__aeabi_dmul>
 800da88:	ec41 0b18 	vmov	d8, r0, r1
 800da8c:	3501      	adds	r5, #1
 800da8e:	107f      	asrs	r7, r7, #1
 800da90:	3608      	adds	r6, #8
 800da92:	e7e5      	b.n	800da60 <_dtoa_r+0x370>
 800da94:	f000 80a6 	beq.w	800dbe4 <_dtoa_r+0x4f4>
 800da98:	f1ca 0600 	rsb	r6, sl, #0
 800da9c:	4ba5      	ldr	r3, [pc, #660]	; (800dd34 <_dtoa_r+0x644>)
 800da9e:	4fa6      	ldr	r7, [pc, #664]	; (800dd38 <_dtoa_r+0x648>)
 800daa0:	f006 020f 	and.w	r2, r6, #15
 800daa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dab0:	f7f2 fda2 	bl	80005f8 <__aeabi_dmul>
 800dab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dab8:	1136      	asrs	r6, r6, #4
 800daba:	2300      	movs	r3, #0
 800dabc:	2502      	movs	r5, #2
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	f040 8085 	bne.w	800dbce <_dtoa_r+0x4de>
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1d2      	bne.n	800da6e <_dtoa_r+0x37e>
 800dac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 808c 	beq.w	800dbe8 <_dtoa_r+0x4f8>
 800dad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dad4:	4b99      	ldr	r3, [pc, #612]	; (800dd3c <_dtoa_r+0x64c>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	4630      	mov	r0, r6
 800dada:	4639      	mov	r1, r7
 800dadc:	f7f2 fffe 	bl	8000adc <__aeabi_dcmplt>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	f000 8081 	beq.w	800dbe8 <_dtoa_r+0x4f8>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d07d      	beq.n	800dbe8 <_dtoa_r+0x4f8>
 800daec:	f1b9 0f00 	cmp.w	r9, #0
 800daf0:	dd3c      	ble.n	800db6c <_dtoa_r+0x47c>
 800daf2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800daf6:	9307      	str	r3, [sp, #28]
 800daf8:	2200      	movs	r2, #0
 800dafa:	4b91      	ldr	r3, [pc, #580]	; (800dd40 <_dtoa_r+0x650>)
 800dafc:	4630      	mov	r0, r6
 800dafe:	4639      	mov	r1, r7
 800db00:	f7f2 fd7a 	bl	80005f8 <__aeabi_dmul>
 800db04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db08:	3501      	adds	r5, #1
 800db0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800db0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db12:	4628      	mov	r0, r5
 800db14:	f7f2 fd06 	bl	8000524 <__aeabi_i2d>
 800db18:	4632      	mov	r2, r6
 800db1a:	463b      	mov	r3, r7
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	4b88      	ldr	r3, [pc, #544]	; (800dd44 <_dtoa_r+0x654>)
 800db22:	2200      	movs	r2, #0
 800db24:	f7f2 fbb2 	bl	800028c <__adddf3>
 800db28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800db2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db30:	9303      	str	r3, [sp, #12]
 800db32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db34:	2b00      	cmp	r3, #0
 800db36:	d15c      	bne.n	800dbf2 <_dtoa_r+0x502>
 800db38:	4b83      	ldr	r3, [pc, #524]	; (800dd48 <_dtoa_r+0x658>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	4630      	mov	r0, r6
 800db3e:	4639      	mov	r1, r7
 800db40:	f7f2 fba2 	bl	8000288 <__aeabi_dsub>
 800db44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db48:	4606      	mov	r6, r0
 800db4a:	460f      	mov	r7, r1
 800db4c:	f7f2 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 800db50:	2800      	cmp	r0, #0
 800db52:	f040 8296 	bne.w	800e082 <_dtoa_r+0x992>
 800db56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800db5a:	4630      	mov	r0, r6
 800db5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db60:	4639      	mov	r1, r7
 800db62:	f7f2 ffbb 	bl	8000adc <__aeabi_dcmplt>
 800db66:	2800      	cmp	r0, #0
 800db68:	f040 8288 	bne.w	800e07c <_dtoa_r+0x98c>
 800db6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db76:	2b00      	cmp	r3, #0
 800db78:	f2c0 8158 	blt.w	800de2c <_dtoa_r+0x73c>
 800db7c:	f1ba 0f0e 	cmp.w	sl, #14
 800db80:	f300 8154 	bgt.w	800de2c <_dtoa_r+0x73c>
 800db84:	4b6b      	ldr	r3, [pc, #428]	; (800dd34 <_dtoa_r+0x644>)
 800db86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db90:	2b00      	cmp	r3, #0
 800db92:	f280 80e3 	bge.w	800dd5c <_dtoa_r+0x66c>
 800db96:	9b01      	ldr	r3, [sp, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f300 80df 	bgt.w	800dd5c <_dtoa_r+0x66c>
 800db9e:	f040 826d 	bne.w	800e07c <_dtoa_r+0x98c>
 800dba2:	4b69      	ldr	r3, [pc, #420]	; (800dd48 <_dtoa_r+0x658>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	4640      	mov	r0, r8
 800dba8:	4649      	mov	r1, r9
 800dbaa:	f7f2 fd25 	bl	80005f8 <__aeabi_dmul>
 800dbae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbb2:	f7f2 ffa7 	bl	8000b04 <__aeabi_dcmpge>
 800dbb6:	9e01      	ldr	r6, [sp, #4]
 800dbb8:	4637      	mov	r7, r6
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f040 8243 	bne.w	800e046 <_dtoa_r+0x956>
 800dbc0:	9d00      	ldr	r5, [sp, #0]
 800dbc2:	2331      	movs	r3, #49	; 0x31
 800dbc4:	f805 3b01 	strb.w	r3, [r5], #1
 800dbc8:	f10a 0a01 	add.w	sl, sl, #1
 800dbcc:	e23f      	b.n	800e04e <_dtoa_r+0x95e>
 800dbce:	07f2      	lsls	r2, r6, #31
 800dbd0:	d505      	bpl.n	800dbde <_dtoa_r+0x4ee>
 800dbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbd6:	f7f2 fd0f 	bl	80005f8 <__aeabi_dmul>
 800dbda:	3501      	adds	r5, #1
 800dbdc:	2301      	movs	r3, #1
 800dbde:	1076      	asrs	r6, r6, #1
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	e76c      	b.n	800dabe <_dtoa_r+0x3ce>
 800dbe4:	2502      	movs	r5, #2
 800dbe6:	e76f      	b.n	800dac8 <_dtoa_r+0x3d8>
 800dbe8:	9b01      	ldr	r3, [sp, #4]
 800dbea:	f8cd a01c 	str.w	sl, [sp, #28]
 800dbee:	930c      	str	r3, [sp, #48]	; 0x30
 800dbf0:	e78d      	b.n	800db0e <_dtoa_r+0x41e>
 800dbf2:	9900      	ldr	r1, [sp, #0]
 800dbf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dbf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbf8:	4b4e      	ldr	r3, [pc, #312]	; (800dd34 <_dtoa_r+0x644>)
 800dbfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbfe:	4401      	add	r1, r0
 800dc00:	9102      	str	r1, [sp, #8]
 800dc02:	9908      	ldr	r1, [sp, #32]
 800dc04:	eeb0 8a47 	vmov.f32	s16, s14
 800dc08:	eef0 8a67 	vmov.f32	s17, s15
 800dc0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc14:	2900      	cmp	r1, #0
 800dc16:	d045      	beq.n	800dca4 <_dtoa_r+0x5b4>
 800dc18:	494c      	ldr	r1, [pc, #304]	; (800dd4c <_dtoa_r+0x65c>)
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f7f2 fe16 	bl	800084c <__aeabi_ddiv>
 800dc20:	ec53 2b18 	vmov	r2, r3, d8
 800dc24:	f7f2 fb30 	bl	8000288 <__aeabi_dsub>
 800dc28:	9d00      	ldr	r5, [sp, #0]
 800dc2a:	ec41 0b18 	vmov	d8, r0, r1
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4630      	mov	r0, r6
 800dc32:	f7f2 ff91 	bl	8000b58 <__aeabi_d2iz>
 800dc36:	900c      	str	r0, [sp, #48]	; 0x30
 800dc38:	f7f2 fc74 	bl	8000524 <__aeabi_i2d>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 fb20 	bl	8000288 <__aeabi_dsub>
 800dc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc4a:	3330      	adds	r3, #48	; 0x30
 800dc4c:	f805 3b01 	strb.w	r3, [r5], #1
 800dc50:	ec53 2b18 	vmov	r2, r3, d8
 800dc54:	4606      	mov	r6, r0
 800dc56:	460f      	mov	r7, r1
 800dc58:	f7f2 ff40 	bl	8000adc <__aeabi_dcmplt>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d165      	bne.n	800dd2c <_dtoa_r+0x63c>
 800dc60:	4632      	mov	r2, r6
 800dc62:	463b      	mov	r3, r7
 800dc64:	4935      	ldr	r1, [pc, #212]	; (800dd3c <_dtoa_r+0x64c>)
 800dc66:	2000      	movs	r0, #0
 800dc68:	f7f2 fb0e 	bl	8000288 <__aeabi_dsub>
 800dc6c:	ec53 2b18 	vmov	r2, r3, d8
 800dc70:	f7f2 ff34 	bl	8000adc <__aeabi_dcmplt>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	f040 80b9 	bne.w	800ddec <_dtoa_r+0x6fc>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	429d      	cmp	r5, r3
 800dc7e:	f43f af75 	beq.w	800db6c <_dtoa_r+0x47c>
 800dc82:	4b2f      	ldr	r3, [pc, #188]	; (800dd40 <_dtoa_r+0x650>)
 800dc84:	ec51 0b18 	vmov	r0, r1, d8
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f7f2 fcb5 	bl	80005f8 <__aeabi_dmul>
 800dc8e:	4b2c      	ldr	r3, [pc, #176]	; (800dd40 <_dtoa_r+0x650>)
 800dc90:	ec41 0b18 	vmov	d8, r0, r1
 800dc94:	2200      	movs	r2, #0
 800dc96:	4630      	mov	r0, r6
 800dc98:	4639      	mov	r1, r7
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460f      	mov	r7, r1
 800dca2:	e7c4      	b.n	800dc2e <_dtoa_r+0x53e>
 800dca4:	ec51 0b17 	vmov	r0, r1, d7
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	9d00      	ldr	r5, [sp, #0]
 800dcb0:	930c      	str	r3, [sp, #48]	; 0x30
 800dcb2:	ec41 0b18 	vmov	d8, r0, r1
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7f2 ff4d 	bl	8000b58 <__aeabi_d2iz>
 800dcbe:	9011      	str	r0, [sp, #68]	; 0x44
 800dcc0:	f7f2 fc30 	bl	8000524 <__aeabi_i2d>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 fadc 	bl	8000288 <__aeabi_dsub>
 800dcd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcd2:	3330      	adds	r3, #48	; 0x30
 800dcd4:	f805 3b01 	strb.w	r3, [r5], #1
 800dcd8:	9b02      	ldr	r3, [sp, #8]
 800dcda:	429d      	cmp	r5, r3
 800dcdc:	4606      	mov	r6, r0
 800dcde:	460f      	mov	r7, r1
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	d134      	bne.n	800dd50 <_dtoa_r+0x660>
 800dce6:	4b19      	ldr	r3, [pc, #100]	; (800dd4c <_dtoa_r+0x65c>)
 800dce8:	ec51 0b18 	vmov	r0, r1, d8
 800dcec:	f7f2 face 	bl	800028c <__adddf3>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d175      	bne.n	800ddec <_dtoa_r+0x6fc>
 800dd00:	ec53 2b18 	vmov	r2, r3, d8
 800dd04:	4911      	ldr	r1, [pc, #68]	; (800dd4c <_dtoa_r+0x65c>)
 800dd06:	2000      	movs	r0, #0
 800dd08:	f7f2 fabe 	bl	8000288 <__aeabi_dsub>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4630      	mov	r0, r6
 800dd12:	4639      	mov	r1, r7
 800dd14:	f7f2 fee2 	bl	8000adc <__aeabi_dcmplt>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	f43f af27 	beq.w	800db6c <_dtoa_r+0x47c>
 800dd1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd20:	1e6b      	subs	r3, r5, #1
 800dd22:	930c      	str	r3, [sp, #48]	; 0x30
 800dd24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd28:	2b30      	cmp	r3, #48	; 0x30
 800dd2a:	d0f8      	beq.n	800dd1e <_dtoa_r+0x62e>
 800dd2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dd30:	e04a      	b.n	800ddc8 <_dtoa_r+0x6d8>
 800dd32:	bf00      	nop
 800dd34:	0800f838 	.word	0x0800f838
 800dd38:	0800f810 	.word	0x0800f810
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	40240000 	.word	0x40240000
 800dd44:	401c0000 	.word	0x401c0000
 800dd48:	40140000 	.word	0x40140000
 800dd4c:	3fe00000 	.word	0x3fe00000
 800dd50:	4baf      	ldr	r3, [pc, #700]	; (800e010 <_dtoa_r+0x920>)
 800dd52:	f7f2 fc51 	bl	80005f8 <__aeabi_dmul>
 800dd56:	4606      	mov	r6, r0
 800dd58:	460f      	mov	r7, r1
 800dd5a:	e7ac      	b.n	800dcb6 <_dtoa_r+0x5c6>
 800dd5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd60:	9d00      	ldr	r5, [sp, #0]
 800dd62:	4642      	mov	r2, r8
 800dd64:	464b      	mov	r3, r9
 800dd66:	4630      	mov	r0, r6
 800dd68:	4639      	mov	r1, r7
 800dd6a:	f7f2 fd6f 	bl	800084c <__aeabi_ddiv>
 800dd6e:	f7f2 fef3 	bl	8000b58 <__aeabi_d2iz>
 800dd72:	9002      	str	r0, [sp, #8]
 800dd74:	f7f2 fbd6 	bl	8000524 <__aeabi_i2d>
 800dd78:	4642      	mov	r2, r8
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	f7f2 fc3c 	bl	80005f8 <__aeabi_dmul>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4630      	mov	r0, r6
 800dd86:	4639      	mov	r1, r7
 800dd88:	f7f2 fa7e 	bl	8000288 <__aeabi_dsub>
 800dd8c:	9e02      	ldr	r6, [sp, #8]
 800dd8e:	9f01      	ldr	r7, [sp, #4]
 800dd90:	3630      	adds	r6, #48	; 0x30
 800dd92:	f805 6b01 	strb.w	r6, [r5], #1
 800dd96:	9e00      	ldr	r6, [sp, #0]
 800dd98:	1bae      	subs	r6, r5, r6
 800dd9a:	42b7      	cmp	r7, r6
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	d137      	bne.n	800de12 <_dtoa_r+0x722>
 800dda2:	f7f2 fa73 	bl	800028c <__adddf3>
 800dda6:	4642      	mov	r2, r8
 800dda8:	464b      	mov	r3, r9
 800ddaa:	4606      	mov	r6, r0
 800ddac:	460f      	mov	r7, r1
 800ddae:	f7f2 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 800ddb2:	b9c8      	cbnz	r0, 800dde8 <_dtoa_r+0x6f8>
 800ddb4:	4642      	mov	r2, r8
 800ddb6:	464b      	mov	r3, r9
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f7f2 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddc0:	b110      	cbz	r0, 800ddc8 <_dtoa_r+0x6d8>
 800ddc2:	9b02      	ldr	r3, [sp, #8]
 800ddc4:	07d9      	lsls	r1, r3, #31
 800ddc6:	d40f      	bmi.n	800dde8 <_dtoa_r+0x6f8>
 800ddc8:	4620      	mov	r0, r4
 800ddca:	4659      	mov	r1, fp
 800ddcc:	f000 fce8 	bl	800e7a0 <_Bfree>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	702b      	strb	r3, [r5, #0]
 800ddd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddd6:	f10a 0001 	add.w	r0, sl, #1
 800ddda:	6018      	str	r0, [r3, #0]
 800dddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f43f acd8 	beq.w	800d794 <_dtoa_r+0xa4>
 800dde4:	601d      	str	r5, [r3, #0]
 800dde6:	e4d5      	b.n	800d794 <_dtoa_r+0xa4>
 800dde8:	f8cd a01c 	str.w	sl, [sp, #28]
 800ddec:	462b      	mov	r3, r5
 800ddee:	461d      	mov	r5, r3
 800ddf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddf4:	2a39      	cmp	r2, #57	; 0x39
 800ddf6:	d108      	bne.n	800de0a <_dtoa_r+0x71a>
 800ddf8:	9a00      	ldr	r2, [sp, #0]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d1f7      	bne.n	800ddee <_dtoa_r+0x6fe>
 800ddfe:	9a07      	ldr	r2, [sp, #28]
 800de00:	9900      	ldr	r1, [sp, #0]
 800de02:	3201      	adds	r2, #1
 800de04:	9207      	str	r2, [sp, #28]
 800de06:	2230      	movs	r2, #48	; 0x30
 800de08:	700a      	strb	r2, [r1, #0]
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	3201      	adds	r2, #1
 800de0e:	701a      	strb	r2, [r3, #0]
 800de10:	e78c      	b.n	800dd2c <_dtoa_r+0x63c>
 800de12:	4b7f      	ldr	r3, [pc, #508]	; (800e010 <_dtoa_r+0x920>)
 800de14:	2200      	movs	r2, #0
 800de16:	f7f2 fbef 	bl	80005f8 <__aeabi_dmul>
 800de1a:	2200      	movs	r2, #0
 800de1c:	2300      	movs	r3, #0
 800de1e:	4606      	mov	r6, r0
 800de20:	460f      	mov	r7, r1
 800de22:	f7f2 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 800de26:	2800      	cmp	r0, #0
 800de28:	d09b      	beq.n	800dd62 <_dtoa_r+0x672>
 800de2a:	e7cd      	b.n	800ddc8 <_dtoa_r+0x6d8>
 800de2c:	9a08      	ldr	r2, [sp, #32]
 800de2e:	2a00      	cmp	r2, #0
 800de30:	f000 80c4 	beq.w	800dfbc <_dtoa_r+0x8cc>
 800de34:	9a05      	ldr	r2, [sp, #20]
 800de36:	2a01      	cmp	r2, #1
 800de38:	f300 80a8 	bgt.w	800df8c <_dtoa_r+0x89c>
 800de3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de3e:	2a00      	cmp	r2, #0
 800de40:	f000 80a0 	beq.w	800df84 <_dtoa_r+0x894>
 800de44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de48:	9e06      	ldr	r6, [sp, #24]
 800de4a:	4645      	mov	r5, r8
 800de4c:	9a04      	ldr	r2, [sp, #16]
 800de4e:	2101      	movs	r1, #1
 800de50:	441a      	add	r2, r3
 800de52:	4620      	mov	r0, r4
 800de54:	4498      	add	r8, r3
 800de56:	9204      	str	r2, [sp, #16]
 800de58:	f000 fd5e 	bl	800e918 <__i2b>
 800de5c:	4607      	mov	r7, r0
 800de5e:	2d00      	cmp	r5, #0
 800de60:	dd0b      	ble.n	800de7a <_dtoa_r+0x78a>
 800de62:	9b04      	ldr	r3, [sp, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	dd08      	ble.n	800de7a <_dtoa_r+0x78a>
 800de68:	42ab      	cmp	r3, r5
 800de6a:	9a04      	ldr	r2, [sp, #16]
 800de6c:	bfa8      	it	ge
 800de6e:	462b      	movge	r3, r5
 800de70:	eba8 0803 	sub.w	r8, r8, r3
 800de74:	1aed      	subs	r5, r5, r3
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	9b06      	ldr	r3, [sp, #24]
 800de7c:	b1fb      	cbz	r3, 800debe <_dtoa_r+0x7ce>
 800de7e:	9b08      	ldr	r3, [sp, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 809f 	beq.w	800dfc4 <_dtoa_r+0x8d4>
 800de86:	2e00      	cmp	r6, #0
 800de88:	dd11      	ble.n	800deae <_dtoa_r+0x7be>
 800de8a:	4639      	mov	r1, r7
 800de8c:	4632      	mov	r2, r6
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 fdfe 	bl	800ea90 <__pow5mult>
 800de94:	465a      	mov	r2, fp
 800de96:	4601      	mov	r1, r0
 800de98:	4607      	mov	r7, r0
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 fd52 	bl	800e944 <__multiply>
 800dea0:	4659      	mov	r1, fp
 800dea2:	9007      	str	r0, [sp, #28]
 800dea4:	4620      	mov	r0, r4
 800dea6:	f000 fc7b 	bl	800e7a0 <_Bfree>
 800deaa:	9b07      	ldr	r3, [sp, #28]
 800deac:	469b      	mov	fp, r3
 800deae:	9b06      	ldr	r3, [sp, #24]
 800deb0:	1b9a      	subs	r2, r3, r6
 800deb2:	d004      	beq.n	800debe <_dtoa_r+0x7ce>
 800deb4:	4659      	mov	r1, fp
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 fdea 	bl	800ea90 <__pow5mult>
 800debc:	4683      	mov	fp, r0
 800debe:	2101      	movs	r1, #1
 800dec0:	4620      	mov	r0, r4
 800dec2:	f000 fd29 	bl	800e918 <__i2b>
 800dec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec8:	2b00      	cmp	r3, #0
 800deca:	4606      	mov	r6, r0
 800decc:	dd7c      	ble.n	800dfc8 <_dtoa_r+0x8d8>
 800dece:	461a      	mov	r2, r3
 800ded0:	4601      	mov	r1, r0
 800ded2:	4620      	mov	r0, r4
 800ded4:	f000 fddc 	bl	800ea90 <__pow5mult>
 800ded8:	9b05      	ldr	r3, [sp, #20]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	4606      	mov	r6, r0
 800dede:	dd76      	ble.n	800dfce <_dtoa_r+0x8de>
 800dee0:	2300      	movs	r3, #0
 800dee2:	9306      	str	r3, [sp, #24]
 800dee4:	6933      	ldr	r3, [r6, #16]
 800dee6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800deea:	6918      	ldr	r0, [r3, #16]
 800deec:	f000 fcc4 	bl	800e878 <__hi0bits>
 800def0:	f1c0 0020 	rsb	r0, r0, #32
 800def4:	9b04      	ldr	r3, [sp, #16]
 800def6:	4418      	add	r0, r3
 800def8:	f010 001f 	ands.w	r0, r0, #31
 800defc:	f000 8086 	beq.w	800e00c <_dtoa_r+0x91c>
 800df00:	f1c0 0320 	rsb	r3, r0, #32
 800df04:	2b04      	cmp	r3, #4
 800df06:	dd7f      	ble.n	800e008 <_dtoa_r+0x918>
 800df08:	f1c0 001c 	rsb	r0, r0, #28
 800df0c:	9b04      	ldr	r3, [sp, #16]
 800df0e:	4403      	add	r3, r0
 800df10:	4480      	add	r8, r0
 800df12:	4405      	add	r5, r0
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	f1b8 0f00 	cmp.w	r8, #0
 800df1a:	dd05      	ble.n	800df28 <_dtoa_r+0x838>
 800df1c:	4659      	mov	r1, fp
 800df1e:	4642      	mov	r2, r8
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fe0f 	bl	800eb44 <__lshift>
 800df26:	4683      	mov	fp, r0
 800df28:	9b04      	ldr	r3, [sp, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dd05      	ble.n	800df3a <_dtoa_r+0x84a>
 800df2e:	4631      	mov	r1, r6
 800df30:	461a      	mov	r2, r3
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fe06 	bl	800eb44 <__lshift>
 800df38:	4606      	mov	r6, r0
 800df3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d069      	beq.n	800e014 <_dtoa_r+0x924>
 800df40:	4631      	mov	r1, r6
 800df42:	4658      	mov	r0, fp
 800df44:	f000 fe6a 	bl	800ec1c <__mcmp>
 800df48:	2800      	cmp	r0, #0
 800df4a:	da63      	bge.n	800e014 <_dtoa_r+0x924>
 800df4c:	2300      	movs	r3, #0
 800df4e:	4659      	mov	r1, fp
 800df50:	220a      	movs	r2, #10
 800df52:	4620      	mov	r0, r4
 800df54:	f000 fc46 	bl	800e7e4 <__multadd>
 800df58:	9b08      	ldr	r3, [sp, #32]
 800df5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df5e:	4683      	mov	fp, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 818f 	beq.w	800e284 <_dtoa_r+0xb94>
 800df66:	4639      	mov	r1, r7
 800df68:	2300      	movs	r3, #0
 800df6a:	220a      	movs	r2, #10
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 fc39 	bl	800e7e4 <__multadd>
 800df72:	f1b9 0f00 	cmp.w	r9, #0
 800df76:	4607      	mov	r7, r0
 800df78:	f300 808e 	bgt.w	800e098 <_dtoa_r+0x9a8>
 800df7c:	9b05      	ldr	r3, [sp, #20]
 800df7e:	2b02      	cmp	r3, #2
 800df80:	dc50      	bgt.n	800e024 <_dtoa_r+0x934>
 800df82:	e089      	b.n	800e098 <_dtoa_r+0x9a8>
 800df84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df8a:	e75d      	b.n	800de48 <_dtoa_r+0x758>
 800df8c:	9b01      	ldr	r3, [sp, #4]
 800df8e:	1e5e      	subs	r6, r3, #1
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	42b3      	cmp	r3, r6
 800df94:	bfbf      	itttt	lt
 800df96:	9b06      	ldrlt	r3, [sp, #24]
 800df98:	9606      	strlt	r6, [sp, #24]
 800df9a:	1af2      	sublt	r2, r6, r3
 800df9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800df9e:	bfb6      	itet	lt
 800dfa0:	189b      	addlt	r3, r3, r2
 800dfa2:	1b9e      	subge	r6, r3, r6
 800dfa4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dfa6:	9b01      	ldr	r3, [sp, #4]
 800dfa8:	bfb8      	it	lt
 800dfaa:	2600      	movlt	r6, #0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	bfb5      	itete	lt
 800dfb0:	eba8 0503 	sublt.w	r5, r8, r3
 800dfb4:	9b01      	ldrge	r3, [sp, #4]
 800dfb6:	2300      	movlt	r3, #0
 800dfb8:	4645      	movge	r5, r8
 800dfba:	e747      	b.n	800de4c <_dtoa_r+0x75c>
 800dfbc:	9e06      	ldr	r6, [sp, #24]
 800dfbe:	9f08      	ldr	r7, [sp, #32]
 800dfc0:	4645      	mov	r5, r8
 800dfc2:	e74c      	b.n	800de5e <_dtoa_r+0x76e>
 800dfc4:	9a06      	ldr	r2, [sp, #24]
 800dfc6:	e775      	b.n	800deb4 <_dtoa_r+0x7c4>
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	dc18      	bgt.n	800e000 <_dtoa_r+0x910>
 800dfce:	9b02      	ldr	r3, [sp, #8]
 800dfd0:	b9b3      	cbnz	r3, 800e000 <_dtoa_r+0x910>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfd8:	b9a3      	cbnz	r3, 800e004 <_dtoa_r+0x914>
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfe0:	0d1b      	lsrs	r3, r3, #20
 800dfe2:	051b      	lsls	r3, r3, #20
 800dfe4:	b12b      	cbz	r3, 800dff2 <_dtoa_r+0x902>
 800dfe6:	9b04      	ldr	r3, [sp, #16]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	f108 0801 	add.w	r8, r8, #1
 800dff0:	2301      	movs	r3, #1
 800dff2:	9306      	str	r3, [sp, #24]
 800dff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f47f af74 	bne.w	800dee4 <_dtoa_r+0x7f4>
 800dffc:	2001      	movs	r0, #1
 800dffe:	e779      	b.n	800def4 <_dtoa_r+0x804>
 800e000:	2300      	movs	r3, #0
 800e002:	e7f6      	b.n	800dff2 <_dtoa_r+0x902>
 800e004:	9b02      	ldr	r3, [sp, #8]
 800e006:	e7f4      	b.n	800dff2 <_dtoa_r+0x902>
 800e008:	d085      	beq.n	800df16 <_dtoa_r+0x826>
 800e00a:	4618      	mov	r0, r3
 800e00c:	301c      	adds	r0, #28
 800e00e:	e77d      	b.n	800df0c <_dtoa_r+0x81c>
 800e010:	40240000 	.word	0x40240000
 800e014:	9b01      	ldr	r3, [sp, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	dc38      	bgt.n	800e08c <_dtoa_r+0x99c>
 800e01a:	9b05      	ldr	r3, [sp, #20]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	dd35      	ble.n	800e08c <_dtoa_r+0x99c>
 800e020:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	d10d      	bne.n	800e046 <_dtoa_r+0x956>
 800e02a:	4631      	mov	r1, r6
 800e02c:	464b      	mov	r3, r9
 800e02e:	2205      	movs	r2, #5
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fbd7 	bl	800e7e4 <__multadd>
 800e036:	4601      	mov	r1, r0
 800e038:	4606      	mov	r6, r0
 800e03a:	4658      	mov	r0, fp
 800e03c:	f000 fdee 	bl	800ec1c <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	f73f adbd 	bgt.w	800dbc0 <_dtoa_r+0x4d0>
 800e046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e048:	9d00      	ldr	r5, [sp, #0]
 800e04a:	ea6f 0a03 	mvn.w	sl, r3
 800e04e:	f04f 0800 	mov.w	r8, #0
 800e052:	4631      	mov	r1, r6
 800e054:	4620      	mov	r0, r4
 800e056:	f000 fba3 	bl	800e7a0 <_Bfree>
 800e05a:	2f00      	cmp	r7, #0
 800e05c:	f43f aeb4 	beq.w	800ddc8 <_dtoa_r+0x6d8>
 800e060:	f1b8 0f00 	cmp.w	r8, #0
 800e064:	d005      	beq.n	800e072 <_dtoa_r+0x982>
 800e066:	45b8      	cmp	r8, r7
 800e068:	d003      	beq.n	800e072 <_dtoa_r+0x982>
 800e06a:	4641      	mov	r1, r8
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 fb97 	bl	800e7a0 <_Bfree>
 800e072:	4639      	mov	r1, r7
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fb93 	bl	800e7a0 <_Bfree>
 800e07a:	e6a5      	b.n	800ddc8 <_dtoa_r+0x6d8>
 800e07c:	2600      	movs	r6, #0
 800e07e:	4637      	mov	r7, r6
 800e080:	e7e1      	b.n	800e046 <_dtoa_r+0x956>
 800e082:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e084:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e088:	4637      	mov	r7, r6
 800e08a:	e599      	b.n	800dbc0 <_dtoa_r+0x4d0>
 800e08c:	9b08      	ldr	r3, [sp, #32]
 800e08e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	f000 80fd 	beq.w	800e292 <_dtoa_r+0xba2>
 800e098:	2d00      	cmp	r5, #0
 800e09a:	dd05      	ble.n	800e0a8 <_dtoa_r+0x9b8>
 800e09c:	4639      	mov	r1, r7
 800e09e:	462a      	mov	r2, r5
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 fd4f 	bl	800eb44 <__lshift>
 800e0a6:	4607      	mov	r7, r0
 800e0a8:	9b06      	ldr	r3, [sp, #24]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d05c      	beq.n	800e168 <_dtoa_r+0xa78>
 800e0ae:	6879      	ldr	r1, [r7, #4]
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f000 fb35 	bl	800e720 <_Balloc>
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	b928      	cbnz	r0, 800e0c6 <_dtoa_r+0x9d6>
 800e0ba:	4b80      	ldr	r3, [pc, #512]	; (800e2bc <_dtoa_r+0xbcc>)
 800e0bc:	4602      	mov	r2, r0
 800e0be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0c2:	f7ff bb2e 	b.w	800d722 <_dtoa_r+0x32>
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	3202      	adds	r2, #2
 800e0ca:	0092      	lsls	r2, r2, #2
 800e0cc:	f107 010c 	add.w	r1, r7, #12
 800e0d0:	300c      	adds	r0, #12
 800e0d2:	f7fe fc05 	bl	800c8e0 <memcpy>
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	4629      	mov	r1, r5
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 fd32 	bl	800eb44 <__lshift>
 800e0e0:	9b00      	ldr	r3, [sp, #0]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	9b00      	ldr	r3, [sp, #0]
 800e0e8:	444b      	add	r3, r9
 800e0ea:	9307      	str	r3, [sp, #28]
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	46b8      	mov	r8, r7
 800e0f4:	9306      	str	r3, [sp, #24]
 800e0f6:	4607      	mov	r7, r0
 800e0f8:	9b01      	ldr	r3, [sp, #4]
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	3b01      	subs	r3, #1
 800e0fe:	4658      	mov	r0, fp
 800e100:	9302      	str	r3, [sp, #8]
 800e102:	f7ff fa69 	bl	800d5d8 <quorem>
 800e106:	4603      	mov	r3, r0
 800e108:	3330      	adds	r3, #48	; 0x30
 800e10a:	9004      	str	r0, [sp, #16]
 800e10c:	4641      	mov	r1, r8
 800e10e:	4658      	mov	r0, fp
 800e110:	9308      	str	r3, [sp, #32]
 800e112:	f000 fd83 	bl	800ec1c <__mcmp>
 800e116:	463a      	mov	r2, r7
 800e118:	4681      	mov	r9, r0
 800e11a:	4631      	mov	r1, r6
 800e11c:	4620      	mov	r0, r4
 800e11e:	f000 fd99 	bl	800ec54 <__mdiff>
 800e122:	68c2      	ldr	r2, [r0, #12]
 800e124:	9b08      	ldr	r3, [sp, #32]
 800e126:	4605      	mov	r5, r0
 800e128:	bb02      	cbnz	r2, 800e16c <_dtoa_r+0xa7c>
 800e12a:	4601      	mov	r1, r0
 800e12c:	4658      	mov	r0, fp
 800e12e:	f000 fd75 	bl	800ec1c <__mcmp>
 800e132:	9b08      	ldr	r3, [sp, #32]
 800e134:	4602      	mov	r2, r0
 800e136:	4629      	mov	r1, r5
 800e138:	4620      	mov	r0, r4
 800e13a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e13e:	f000 fb2f 	bl	800e7a0 <_Bfree>
 800e142:	9b05      	ldr	r3, [sp, #20]
 800e144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e146:	9d01      	ldr	r5, [sp, #4]
 800e148:	ea43 0102 	orr.w	r1, r3, r2
 800e14c:	9b06      	ldr	r3, [sp, #24]
 800e14e:	430b      	orrs	r3, r1
 800e150:	9b08      	ldr	r3, [sp, #32]
 800e152:	d10d      	bne.n	800e170 <_dtoa_r+0xa80>
 800e154:	2b39      	cmp	r3, #57	; 0x39
 800e156:	d029      	beq.n	800e1ac <_dtoa_r+0xabc>
 800e158:	f1b9 0f00 	cmp.w	r9, #0
 800e15c:	dd01      	ble.n	800e162 <_dtoa_r+0xa72>
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	3331      	adds	r3, #49	; 0x31
 800e162:	9a02      	ldr	r2, [sp, #8]
 800e164:	7013      	strb	r3, [r2, #0]
 800e166:	e774      	b.n	800e052 <_dtoa_r+0x962>
 800e168:	4638      	mov	r0, r7
 800e16a:	e7b9      	b.n	800e0e0 <_dtoa_r+0x9f0>
 800e16c:	2201      	movs	r2, #1
 800e16e:	e7e2      	b.n	800e136 <_dtoa_r+0xa46>
 800e170:	f1b9 0f00 	cmp.w	r9, #0
 800e174:	db06      	blt.n	800e184 <_dtoa_r+0xa94>
 800e176:	9905      	ldr	r1, [sp, #20]
 800e178:	ea41 0909 	orr.w	r9, r1, r9
 800e17c:	9906      	ldr	r1, [sp, #24]
 800e17e:	ea59 0101 	orrs.w	r1, r9, r1
 800e182:	d120      	bne.n	800e1c6 <_dtoa_r+0xad6>
 800e184:	2a00      	cmp	r2, #0
 800e186:	ddec      	ble.n	800e162 <_dtoa_r+0xa72>
 800e188:	4659      	mov	r1, fp
 800e18a:	2201      	movs	r2, #1
 800e18c:	4620      	mov	r0, r4
 800e18e:	9301      	str	r3, [sp, #4]
 800e190:	f000 fcd8 	bl	800eb44 <__lshift>
 800e194:	4631      	mov	r1, r6
 800e196:	4683      	mov	fp, r0
 800e198:	f000 fd40 	bl	800ec1c <__mcmp>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	9b01      	ldr	r3, [sp, #4]
 800e1a0:	dc02      	bgt.n	800e1a8 <_dtoa_r+0xab8>
 800e1a2:	d1de      	bne.n	800e162 <_dtoa_r+0xa72>
 800e1a4:	07da      	lsls	r2, r3, #31
 800e1a6:	d5dc      	bpl.n	800e162 <_dtoa_r+0xa72>
 800e1a8:	2b39      	cmp	r3, #57	; 0x39
 800e1aa:	d1d8      	bne.n	800e15e <_dtoa_r+0xa6e>
 800e1ac:	9a02      	ldr	r2, [sp, #8]
 800e1ae:	2339      	movs	r3, #57	; 0x39
 800e1b0:	7013      	strb	r3, [r2, #0]
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1bc:	2a39      	cmp	r2, #57	; 0x39
 800e1be:	d050      	beq.n	800e262 <_dtoa_r+0xb72>
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]
 800e1c4:	e745      	b.n	800e052 <_dtoa_r+0x962>
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	dd03      	ble.n	800e1d2 <_dtoa_r+0xae2>
 800e1ca:	2b39      	cmp	r3, #57	; 0x39
 800e1cc:	d0ee      	beq.n	800e1ac <_dtoa_r+0xabc>
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	e7c7      	b.n	800e162 <_dtoa_r+0xa72>
 800e1d2:	9a01      	ldr	r2, [sp, #4]
 800e1d4:	9907      	ldr	r1, [sp, #28]
 800e1d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e1da:	428a      	cmp	r2, r1
 800e1dc:	d02a      	beq.n	800e234 <_dtoa_r+0xb44>
 800e1de:	4659      	mov	r1, fp
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	220a      	movs	r2, #10
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f000 fafd 	bl	800e7e4 <__multadd>
 800e1ea:	45b8      	cmp	r8, r7
 800e1ec:	4683      	mov	fp, r0
 800e1ee:	f04f 0300 	mov.w	r3, #0
 800e1f2:	f04f 020a 	mov.w	r2, #10
 800e1f6:	4641      	mov	r1, r8
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	d107      	bne.n	800e20c <_dtoa_r+0xb1c>
 800e1fc:	f000 faf2 	bl	800e7e4 <__multadd>
 800e200:	4680      	mov	r8, r0
 800e202:	4607      	mov	r7, r0
 800e204:	9b01      	ldr	r3, [sp, #4]
 800e206:	3301      	adds	r3, #1
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	e775      	b.n	800e0f8 <_dtoa_r+0xa08>
 800e20c:	f000 faea 	bl	800e7e4 <__multadd>
 800e210:	4639      	mov	r1, r7
 800e212:	4680      	mov	r8, r0
 800e214:	2300      	movs	r3, #0
 800e216:	220a      	movs	r2, #10
 800e218:	4620      	mov	r0, r4
 800e21a:	f000 fae3 	bl	800e7e4 <__multadd>
 800e21e:	4607      	mov	r7, r0
 800e220:	e7f0      	b.n	800e204 <_dtoa_r+0xb14>
 800e222:	f1b9 0f00 	cmp.w	r9, #0
 800e226:	9a00      	ldr	r2, [sp, #0]
 800e228:	bfcc      	ite	gt
 800e22a:	464d      	movgt	r5, r9
 800e22c:	2501      	movle	r5, #1
 800e22e:	4415      	add	r5, r2
 800e230:	f04f 0800 	mov.w	r8, #0
 800e234:	4659      	mov	r1, fp
 800e236:	2201      	movs	r2, #1
 800e238:	4620      	mov	r0, r4
 800e23a:	9301      	str	r3, [sp, #4]
 800e23c:	f000 fc82 	bl	800eb44 <__lshift>
 800e240:	4631      	mov	r1, r6
 800e242:	4683      	mov	fp, r0
 800e244:	f000 fcea 	bl	800ec1c <__mcmp>
 800e248:	2800      	cmp	r0, #0
 800e24a:	dcb2      	bgt.n	800e1b2 <_dtoa_r+0xac2>
 800e24c:	d102      	bne.n	800e254 <_dtoa_r+0xb64>
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	07db      	lsls	r3, r3, #31
 800e252:	d4ae      	bmi.n	800e1b2 <_dtoa_r+0xac2>
 800e254:	462b      	mov	r3, r5
 800e256:	461d      	mov	r5, r3
 800e258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e25c:	2a30      	cmp	r2, #48	; 0x30
 800e25e:	d0fa      	beq.n	800e256 <_dtoa_r+0xb66>
 800e260:	e6f7      	b.n	800e052 <_dtoa_r+0x962>
 800e262:	9a00      	ldr	r2, [sp, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d1a5      	bne.n	800e1b4 <_dtoa_r+0xac4>
 800e268:	f10a 0a01 	add.w	sl, sl, #1
 800e26c:	2331      	movs	r3, #49	; 0x31
 800e26e:	e779      	b.n	800e164 <_dtoa_r+0xa74>
 800e270:	4b13      	ldr	r3, [pc, #76]	; (800e2c0 <_dtoa_r+0xbd0>)
 800e272:	f7ff baaf 	b.w	800d7d4 <_dtoa_r+0xe4>
 800e276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f47f aa86 	bne.w	800d78a <_dtoa_r+0x9a>
 800e27e:	4b11      	ldr	r3, [pc, #68]	; (800e2c4 <_dtoa_r+0xbd4>)
 800e280:	f7ff baa8 	b.w	800d7d4 <_dtoa_r+0xe4>
 800e284:	f1b9 0f00 	cmp.w	r9, #0
 800e288:	dc03      	bgt.n	800e292 <_dtoa_r+0xba2>
 800e28a:	9b05      	ldr	r3, [sp, #20]
 800e28c:	2b02      	cmp	r3, #2
 800e28e:	f73f aec9 	bgt.w	800e024 <_dtoa_r+0x934>
 800e292:	9d00      	ldr	r5, [sp, #0]
 800e294:	4631      	mov	r1, r6
 800e296:	4658      	mov	r0, fp
 800e298:	f7ff f99e 	bl	800d5d8 <quorem>
 800e29c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e2a0:	f805 3b01 	strb.w	r3, [r5], #1
 800e2a4:	9a00      	ldr	r2, [sp, #0]
 800e2a6:	1aaa      	subs	r2, r5, r2
 800e2a8:	4591      	cmp	r9, r2
 800e2aa:	ddba      	ble.n	800e222 <_dtoa_r+0xb32>
 800e2ac:	4659      	mov	r1, fp
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	220a      	movs	r2, #10
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 fa96 	bl	800e7e4 <__multadd>
 800e2b8:	4683      	mov	fp, r0
 800e2ba:	e7eb      	b.n	800e294 <_dtoa_r+0xba4>
 800e2bc:	0800f73b 	.word	0x0800f73b
 800e2c0:	0800f694 	.word	0x0800f694
 800e2c4:	0800f6b8 	.word	0x0800f6b8

0800e2c8 <__sflush_r>:
 800e2c8:	898a      	ldrh	r2, [r1, #12]
 800e2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	0710      	lsls	r0, r2, #28
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	d458      	bmi.n	800e388 <__sflush_r+0xc0>
 800e2d6:	684b      	ldr	r3, [r1, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	dc05      	bgt.n	800e2e8 <__sflush_r+0x20>
 800e2dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dc02      	bgt.n	800e2e8 <__sflush_r+0x20>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2ea:	2e00      	cmp	r6, #0
 800e2ec:	d0f9      	beq.n	800e2e2 <__sflush_r+0x1a>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e2f4:	682f      	ldr	r7, [r5, #0]
 800e2f6:	602b      	str	r3, [r5, #0]
 800e2f8:	d032      	beq.n	800e360 <__sflush_r+0x98>
 800e2fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e2fc:	89a3      	ldrh	r3, [r4, #12]
 800e2fe:	075a      	lsls	r2, r3, #29
 800e300:	d505      	bpl.n	800e30e <__sflush_r+0x46>
 800e302:	6863      	ldr	r3, [r4, #4]
 800e304:	1ac0      	subs	r0, r0, r3
 800e306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e308:	b10b      	cbz	r3, 800e30e <__sflush_r+0x46>
 800e30a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e30c:	1ac0      	subs	r0, r0, r3
 800e30e:	2300      	movs	r3, #0
 800e310:	4602      	mov	r2, r0
 800e312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e314:	6a21      	ldr	r1, [r4, #32]
 800e316:	4628      	mov	r0, r5
 800e318:	47b0      	blx	r6
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	d106      	bne.n	800e32e <__sflush_r+0x66>
 800e320:	6829      	ldr	r1, [r5, #0]
 800e322:	291d      	cmp	r1, #29
 800e324:	d82c      	bhi.n	800e380 <__sflush_r+0xb8>
 800e326:	4a2a      	ldr	r2, [pc, #168]	; (800e3d0 <__sflush_r+0x108>)
 800e328:	40ca      	lsrs	r2, r1
 800e32a:	07d6      	lsls	r6, r2, #31
 800e32c:	d528      	bpl.n	800e380 <__sflush_r+0xb8>
 800e32e:	2200      	movs	r2, #0
 800e330:	6062      	str	r2, [r4, #4]
 800e332:	04d9      	lsls	r1, r3, #19
 800e334:	6922      	ldr	r2, [r4, #16]
 800e336:	6022      	str	r2, [r4, #0]
 800e338:	d504      	bpl.n	800e344 <__sflush_r+0x7c>
 800e33a:	1c42      	adds	r2, r0, #1
 800e33c:	d101      	bne.n	800e342 <__sflush_r+0x7a>
 800e33e:	682b      	ldr	r3, [r5, #0]
 800e340:	b903      	cbnz	r3, 800e344 <__sflush_r+0x7c>
 800e342:	6560      	str	r0, [r4, #84]	; 0x54
 800e344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e346:	602f      	str	r7, [r5, #0]
 800e348:	2900      	cmp	r1, #0
 800e34a:	d0ca      	beq.n	800e2e2 <__sflush_r+0x1a>
 800e34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e350:	4299      	cmp	r1, r3
 800e352:	d002      	beq.n	800e35a <__sflush_r+0x92>
 800e354:	4628      	mov	r0, r5
 800e356:	f000 fd71 	bl	800ee3c <_free_r>
 800e35a:	2000      	movs	r0, #0
 800e35c:	6360      	str	r0, [r4, #52]	; 0x34
 800e35e:	e7c1      	b.n	800e2e4 <__sflush_r+0x1c>
 800e360:	6a21      	ldr	r1, [r4, #32]
 800e362:	2301      	movs	r3, #1
 800e364:	4628      	mov	r0, r5
 800e366:	47b0      	blx	r6
 800e368:	1c41      	adds	r1, r0, #1
 800e36a:	d1c7      	bne.n	800e2fc <__sflush_r+0x34>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0c4      	beq.n	800e2fc <__sflush_r+0x34>
 800e372:	2b1d      	cmp	r3, #29
 800e374:	d001      	beq.n	800e37a <__sflush_r+0xb2>
 800e376:	2b16      	cmp	r3, #22
 800e378:	d101      	bne.n	800e37e <__sflush_r+0xb6>
 800e37a:	602f      	str	r7, [r5, #0]
 800e37c:	e7b1      	b.n	800e2e2 <__sflush_r+0x1a>
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	e7ad      	b.n	800e2e4 <__sflush_r+0x1c>
 800e388:	690f      	ldr	r7, [r1, #16]
 800e38a:	2f00      	cmp	r7, #0
 800e38c:	d0a9      	beq.n	800e2e2 <__sflush_r+0x1a>
 800e38e:	0793      	lsls	r3, r2, #30
 800e390:	680e      	ldr	r6, [r1, #0]
 800e392:	bf08      	it	eq
 800e394:	694b      	ldreq	r3, [r1, #20]
 800e396:	600f      	str	r7, [r1, #0]
 800e398:	bf18      	it	ne
 800e39a:	2300      	movne	r3, #0
 800e39c:	eba6 0807 	sub.w	r8, r6, r7
 800e3a0:	608b      	str	r3, [r1, #8]
 800e3a2:	f1b8 0f00 	cmp.w	r8, #0
 800e3a6:	dd9c      	ble.n	800e2e2 <__sflush_r+0x1a>
 800e3a8:	6a21      	ldr	r1, [r4, #32]
 800e3aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3ac:	4643      	mov	r3, r8
 800e3ae:	463a      	mov	r2, r7
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	47b0      	blx	r6
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	dc06      	bgt.n	800e3c6 <__sflush_r+0xfe>
 800e3b8:	89a3      	ldrh	r3, [r4, #12]
 800e3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3be:	81a3      	strh	r3, [r4, #12]
 800e3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c4:	e78e      	b.n	800e2e4 <__sflush_r+0x1c>
 800e3c6:	4407      	add	r7, r0
 800e3c8:	eba8 0800 	sub.w	r8, r8, r0
 800e3cc:	e7e9      	b.n	800e3a2 <__sflush_r+0xda>
 800e3ce:	bf00      	nop
 800e3d0:	20400001 	.word	0x20400001

0800e3d4 <_fflush_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	690b      	ldr	r3, [r1, #16]
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	b913      	cbnz	r3, 800e3e4 <_fflush_r+0x10>
 800e3de:	2500      	movs	r5, #0
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	b118      	cbz	r0, 800e3ee <_fflush_r+0x1a>
 800e3e6:	6983      	ldr	r3, [r0, #24]
 800e3e8:	b90b      	cbnz	r3, 800e3ee <_fflush_r+0x1a>
 800e3ea:	f000 f887 	bl	800e4fc <__sinit>
 800e3ee:	4b14      	ldr	r3, [pc, #80]	; (800e440 <_fflush_r+0x6c>)
 800e3f0:	429c      	cmp	r4, r3
 800e3f2:	d11b      	bne.n	800e42c <_fflush_r+0x58>
 800e3f4:	686c      	ldr	r4, [r5, #4]
 800e3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d0ef      	beq.n	800e3de <_fflush_r+0xa>
 800e3fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e400:	07d0      	lsls	r0, r2, #31
 800e402:	d404      	bmi.n	800e40e <_fflush_r+0x3a>
 800e404:	0599      	lsls	r1, r3, #22
 800e406:	d402      	bmi.n	800e40e <_fflush_r+0x3a>
 800e408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e40a:	f000 f91a 	bl	800e642 <__retarget_lock_acquire_recursive>
 800e40e:	4628      	mov	r0, r5
 800e410:	4621      	mov	r1, r4
 800e412:	f7ff ff59 	bl	800e2c8 <__sflush_r>
 800e416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e418:	07da      	lsls	r2, r3, #31
 800e41a:	4605      	mov	r5, r0
 800e41c:	d4e0      	bmi.n	800e3e0 <_fflush_r+0xc>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	059b      	lsls	r3, r3, #22
 800e422:	d4dd      	bmi.n	800e3e0 <_fflush_r+0xc>
 800e424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e426:	f000 f90d 	bl	800e644 <__retarget_lock_release_recursive>
 800e42a:	e7d9      	b.n	800e3e0 <_fflush_r+0xc>
 800e42c:	4b05      	ldr	r3, [pc, #20]	; (800e444 <_fflush_r+0x70>)
 800e42e:	429c      	cmp	r4, r3
 800e430:	d101      	bne.n	800e436 <_fflush_r+0x62>
 800e432:	68ac      	ldr	r4, [r5, #8]
 800e434:	e7df      	b.n	800e3f6 <_fflush_r+0x22>
 800e436:	4b04      	ldr	r3, [pc, #16]	; (800e448 <_fflush_r+0x74>)
 800e438:	429c      	cmp	r4, r3
 800e43a:	bf08      	it	eq
 800e43c:	68ec      	ldreq	r4, [r5, #12]
 800e43e:	e7da      	b.n	800e3f6 <_fflush_r+0x22>
 800e440:	0800f76c 	.word	0x0800f76c
 800e444:	0800f78c 	.word	0x0800f78c
 800e448:	0800f74c 	.word	0x0800f74c

0800e44c <std>:
 800e44c:	2300      	movs	r3, #0
 800e44e:	b510      	push	{r4, lr}
 800e450:	4604      	mov	r4, r0
 800e452:	e9c0 3300 	strd	r3, r3, [r0]
 800e456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e45a:	6083      	str	r3, [r0, #8]
 800e45c:	8181      	strh	r1, [r0, #12]
 800e45e:	6643      	str	r3, [r0, #100]	; 0x64
 800e460:	81c2      	strh	r2, [r0, #14]
 800e462:	6183      	str	r3, [r0, #24]
 800e464:	4619      	mov	r1, r3
 800e466:	2208      	movs	r2, #8
 800e468:	305c      	adds	r0, #92	; 0x5c
 800e46a:	f7fe fa47 	bl	800c8fc <memset>
 800e46e:	4b05      	ldr	r3, [pc, #20]	; (800e484 <std+0x38>)
 800e470:	6263      	str	r3, [r4, #36]	; 0x24
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <std+0x3c>)
 800e474:	62a3      	str	r3, [r4, #40]	; 0x28
 800e476:	4b05      	ldr	r3, [pc, #20]	; (800e48c <std+0x40>)
 800e478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e47a:	4b05      	ldr	r3, [pc, #20]	; (800e490 <std+0x44>)
 800e47c:	6224      	str	r4, [r4, #32]
 800e47e:	6323      	str	r3, [r4, #48]	; 0x30
 800e480:	bd10      	pop	{r4, pc}
 800e482:	bf00      	nop
 800e484:	0800efb1 	.word	0x0800efb1
 800e488:	0800efd3 	.word	0x0800efd3
 800e48c:	0800f00b 	.word	0x0800f00b
 800e490:	0800f02f 	.word	0x0800f02f

0800e494 <_cleanup_r>:
 800e494:	4901      	ldr	r1, [pc, #4]	; (800e49c <_cleanup_r+0x8>)
 800e496:	f000 b8af 	b.w	800e5f8 <_fwalk_reent>
 800e49a:	bf00      	nop
 800e49c:	0800e3d5 	.word	0x0800e3d5

0800e4a0 <__sfmoreglue>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	1e4a      	subs	r2, r1, #1
 800e4a4:	2568      	movs	r5, #104	; 0x68
 800e4a6:	4355      	muls	r5, r2
 800e4a8:	460e      	mov	r6, r1
 800e4aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4ae:	f000 fd15 	bl	800eedc <_malloc_r>
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	b140      	cbz	r0, 800e4c8 <__sfmoreglue+0x28>
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	e9c0 1600 	strd	r1, r6, [r0]
 800e4bc:	300c      	adds	r0, #12
 800e4be:	60a0      	str	r0, [r4, #8]
 800e4c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4c4:	f7fe fa1a 	bl	800c8fc <memset>
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}

0800e4cc <__sfp_lock_acquire>:
 800e4cc:	4801      	ldr	r0, [pc, #4]	; (800e4d4 <__sfp_lock_acquire+0x8>)
 800e4ce:	f000 b8b8 	b.w	800e642 <__retarget_lock_acquire_recursive>
 800e4d2:	bf00      	nop
 800e4d4:	200022dc 	.word	0x200022dc

0800e4d8 <__sfp_lock_release>:
 800e4d8:	4801      	ldr	r0, [pc, #4]	; (800e4e0 <__sfp_lock_release+0x8>)
 800e4da:	f000 b8b3 	b.w	800e644 <__retarget_lock_release_recursive>
 800e4de:	bf00      	nop
 800e4e0:	200022dc 	.word	0x200022dc

0800e4e4 <__sinit_lock_acquire>:
 800e4e4:	4801      	ldr	r0, [pc, #4]	; (800e4ec <__sinit_lock_acquire+0x8>)
 800e4e6:	f000 b8ac 	b.w	800e642 <__retarget_lock_acquire_recursive>
 800e4ea:	bf00      	nop
 800e4ec:	200022d7 	.word	0x200022d7

0800e4f0 <__sinit_lock_release>:
 800e4f0:	4801      	ldr	r0, [pc, #4]	; (800e4f8 <__sinit_lock_release+0x8>)
 800e4f2:	f000 b8a7 	b.w	800e644 <__retarget_lock_release_recursive>
 800e4f6:	bf00      	nop
 800e4f8:	200022d7 	.word	0x200022d7

0800e4fc <__sinit>:
 800e4fc:	b510      	push	{r4, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	f7ff fff0 	bl	800e4e4 <__sinit_lock_acquire>
 800e504:	69a3      	ldr	r3, [r4, #24]
 800e506:	b11b      	cbz	r3, 800e510 <__sinit+0x14>
 800e508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e50c:	f7ff bff0 	b.w	800e4f0 <__sinit_lock_release>
 800e510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e514:	6523      	str	r3, [r4, #80]	; 0x50
 800e516:	4b13      	ldr	r3, [pc, #76]	; (800e564 <__sinit+0x68>)
 800e518:	4a13      	ldr	r2, [pc, #76]	; (800e568 <__sinit+0x6c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e51e:	42a3      	cmp	r3, r4
 800e520:	bf04      	itt	eq
 800e522:	2301      	moveq	r3, #1
 800e524:	61a3      	streq	r3, [r4, #24]
 800e526:	4620      	mov	r0, r4
 800e528:	f000 f820 	bl	800e56c <__sfp>
 800e52c:	6060      	str	r0, [r4, #4]
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 f81c 	bl	800e56c <__sfp>
 800e534:	60a0      	str	r0, [r4, #8]
 800e536:	4620      	mov	r0, r4
 800e538:	f000 f818 	bl	800e56c <__sfp>
 800e53c:	2200      	movs	r2, #0
 800e53e:	60e0      	str	r0, [r4, #12]
 800e540:	2104      	movs	r1, #4
 800e542:	6860      	ldr	r0, [r4, #4]
 800e544:	f7ff ff82 	bl	800e44c <std>
 800e548:	68a0      	ldr	r0, [r4, #8]
 800e54a:	2201      	movs	r2, #1
 800e54c:	2109      	movs	r1, #9
 800e54e:	f7ff ff7d 	bl	800e44c <std>
 800e552:	68e0      	ldr	r0, [r4, #12]
 800e554:	2202      	movs	r2, #2
 800e556:	2112      	movs	r1, #18
 800e558:	f7ff ff78 	bl	800e44c <std>
 800e55c:	2301      	movs	r3, #1
 800e55e:	61a3      	str	r3, [r4, #24]
 800e560:	e7d2      	b.n	800e508 <__sinit+0xc>
 800e562:	bf00      	nop
 800e564:	0800f680 	.word	0x0800f680
 800e568:	0800e495 	.word	0x0800e495

0800e56c <__sfp>:
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	4607      	mov	r7, r0
 800e570:	f7ff ffac 	bl	800e4cc <__sfp_lock_acquire>
 800e574:	4b1e      	ldr	r3, [pc, #120]	; (800e5f0 <__sfp+0x84>)
 800e576:	681e      	ldr	r6, [r3, #0]
 800e578:	69b3      	ldr	r3, [r6, #24]
 800e57a:	b913      	cbnz	r3, 800e582 <__sfp+0x16>
 800e57c:	4630      	mov	r0, r6
 800e57e:	f7ff ffbd 	bl	800e4fc <__sinit>
 800e582:	3648      	adds	r6, #72	; 0x48
 800e584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e588:	3b01      	subs	r3, #1
 800e58a:	d503      	bpl.n	800e594 <__sfp+0x28>
 800e58c:	6833      	ldr	r3, [r6, #0]
 800e58e:	b30b      	cbz	r3, 800e5d4 <__sfp+0x68>
 800e590:	6836      	ldr	r6, [r6, #0]
 800e592:	e7f7      	b.n	800e584 <__sfp+0x18>
 800e594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e598:	b9d5      	cbnz	r5, 800e5d0 <__sfp+0x64>
 800e59a:	4b16      	ldr	r3, [pc, #88]	; (800e5f4 <__sfp+0x88>)
 800e59c:	60e3      	str	r3, [r4, #12]
 800e59e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5a2:	6665      	str	r5, [r4, #100]	; 0x64
 800e5a4:	f000 f84c 	bl	800e640 <__retarget_lock_init_recursive>
 800e5a8:	f7ff ff96 	bl	800e4d8 <__sfp_lock_release>
 800e5ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5b4:	6025      	str	r5, [r4, #0]
 800e5b6:	61a5      	str	r5, [r4, #24]
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	4629      	mov	r1, r5
 800e5bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5c0:	f7fe f99c 	bl	800c8fc <memset>
 800e5c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d0:	3468      	adds	r4, #104	; 0x68
 800e5d2:	e7d9      	b.n	800e588 <__sfp+0x1c>
 800e5d4:	2104      	movs	r1, #4
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	f7ff ff62 	bl	800e4a0 <__sfmoreglue>
 800e5dc:	4604      	mov	r4, r0
 800e5de:	6030      	str	r0, [r6, #0]
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d1d5      	bne.n	800e590 <__sfp+0x24>
 800e5e4:	f7ff ff78 	bl	800e4d8 <__sfp_lock_release>
 800e5e8:	230c      	movs	r3, #12
 800e5ea:	603b      	str	r3, [r7, #0]
 800e5ec:	e7ee      	b.n	800e5cc <__sfp+0x60>
 800e5ee:	bf00      	nop
 800e5f0:	0800f680 	.word	0x0800f680
 800e5f4:	ffff0001 	.word	0xffff0001

0800e5f8 <_fwalk_reent>:
 800e5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	4688      	mov	r8, r1
 800e600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e604:	2700      	movs	r7, #0
 800e606:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e60a:	f1b9 0901 	subs.w	r9, r9, #1
 800e60e:	d505      	bpl.n	800e61c <_fwalk_reent+0x24>
 800e610:	6824      	ldr	r4, [r4, #0]
 800e612:	2c00      	cmp	r4, #0
 800e614:	d1f7      	bne.n	800e606 <_fwalk_reent+0xe>
 800e616:	4638      	mov	r0, r7
 800e618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e61c:	89ab      	ldrh	r3, [r5, #12]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d907      	bls.n	800e632 <_fwalk_reent+0x3a>
 800e622:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e626:	3301      	adds	r3, #1
 800e628:	d003      	beq.n	800e632 <_fwalk_reent+0x3a>
 800e62a:	4629      	mov	r1, r5
 800e62c:	4630      	mov	r0, r6
 800e62e:	47c0      	blx	r8
 800e630:	4307      	orrs	r7, r0
 800e632:	3568      	adds	r5, #104	; 0x68
 800e634:	e7e9      	b.n	800e60a <_fwalk_reent+0x12>
	...

0800e638 <_localeconv_r>:
 800e638:	4800      	ldr	r0, [pc, #0]	; (800e63c <_localeconv_r+0x4>)
 800e63a:	4770      	bx	lr
 800e63c:	20000170 	.word	0x20000170

0800e640 <__retarget_lock_init_recursive>:
 800e640:	4770      	bx	lr

0800e642 <__retarget_lock_acquire_recursive>:
 800e642:	4770      	bx	lr

0800e644 <__retarget_lock_release_recursive>:
 800e644:	4770      	bx	lr

0800e646 <__swhatbuf_r>:
 800e646:	b570      	push	{r4, r5, r6, lr}
 800e648:	460e      	mov	r6, r1
 800e64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e64e:	2900      	cmp	r1, #0
 800e650:	b096      	sub	sp, #88	; 0x58
 800e652:	4614      	mov	r4, r2
 800e654:	461d      	mov	r5, r3
 800e656:	da07      	bge.n	800e668 <__swhatbuf_r+0x22>
 800e658:	2300      	movs	r3, #0
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	89b3      	ldrh	r3, [r6, #12]
 800e65e:	061a      	lsls	r2, r3, #24
 800e660:	d410      	bmi.n	800e684 <__swhatbuf_r+0x3e>
 800e662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e666:	e00e      	b.n	800e686 <__swhatbuf_r+0x40>
 800e668:	466a      	mov	r2, sp
 800e66a:	f000 fd37 	bl	800f0dc <_fstat_r>
 800e66e:	2800      	cmp	r0, #0
 800e670:	dbf2      	blt.n	800e658 <__swhatbuf_r+0x12>
 800e672:	9a01      	ldr	r2, [sp, #4]
 800e674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e67c:	425a      	negs	r2, r3
 800e67e:	415a      	adcs	r2, r3
 800e680:	602a      	str	r2, [r5, #0]
 800e682:	e7ee      	b.n	800e662 <__swhatbuf_r+0x1c>
 800e684:	2340      	movs	r3, #64	; 0x40
 800e686:	2000      	movs	r0, #0
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	b016      	add	sp, #88	; 0x58
 800e68c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e690 <__smakebuf_r>:
 800e690:	898b      	ldrh	r3, [r1, #12]
 800e692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e694:	079d      	lsls	r5, r3, #30
 800e696:	4606      	mov	r6, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	d507      	bpl.n	800e6ac <__smakebuf_r+0x1c>
 800e69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	6123      	str	r3, [r4, #16]
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	6163      	str	r3, [r4, #20]
 800e6a8:	b002      	add	sp, #8
 800e6aa:	bd70      	pop	{r4, r5, r6, pc}
 800e6ac:	ab01      	add	r3, sp, #4
 800e6ae:	466a      	mov	r2, sp
 800e6b0:	f7ff ffc9 	bl	800e646 <__swhatbuf_r>
 800e6b4:	9900      	ldr	r1, [sp, #0]
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f000 fc0f 	bl	800eedc <_malloc_r>
 800e6be:	b948      	cbnz	r0, 800e6d4 <__smakebuf_r+0x44>
 800e6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c4:	059a      	lsls	r2, r3, #22
 800e6c6:	d4ef      	bmi.n	800e6a8 <__smakebuf_r+0x18>
 800e6c8:	f023 0303 	bic.w	r3, r3, #3
 800e6cc:	f043 0302 	orr.w	r3, r3, #2
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	e7e3      	b.n	800e69c <__smakebuf_r+0xc>
 800e6d4:	4b0d      	ldr	r3, [pc, #52]	; (800e70c <__smakebuf_r+0x7c>)
 800e6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	6020      	str	r0, [r4, #0]
 800e6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	9b00      	ldr	r3, [sp, #0]
 800e6e4:	6163      	str	r3, [r4, #20]
 800e6e6:	9b01      	ldr	r3, [sp, #4]
 800e6e8:	6120      	str	r0, [r4, #16]
 800e6ea:	b15b      	cbz	r3, 800e704 <__smakebuf_r+0x74>
 800e6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f000 fd05 	bl	800f100 <_isatty_r>
 800e6f6:	b128      	cbz	r0, 800e704 <__smakebuf_r+0x74>
 800e6f8:	89a3      	ldrh	r3, [r4, #12]
 800e6fa:	f023 0303 	bic.w	r3, r3, #3
 800e6fe:	f043 0301 	orr.w	r3, r3, #1
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	89a0      	ldrh	r0, [r4, #12]
 800e706:	4305      	orrs	r5, r0
 800e708:	81a5      	strh	r5, [r4, #12]
 800e70a:	e7cd      	b.n	800e6a8 <__smakebuf_r+0x18>
 800e70c:	0800e495 	.word	0x0800e495

0800e710 <malloc>:
 800e710:	4b02      	ldr	r3, [pc, #8]	; (800e71c <malloc+0xc>)
 800e712:	4601      	mov	r1, r0
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	f000 bbe1 	b.w	800eedc <_malloc_r>
 800e71a:	bf00      	nop
 800e71c:	2000001c 	.word	0x2000001c

0800e720 <_Balloc>:
 800e720:	b570      	push	{r4, r5, r6, lr}
 800e722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e724:	4604      	mov	r4, r0
 800e726:	460d      	mov	r5, r1
 800e728:	b976      	cbnz	r6, 800e748 <_Balloc+0x28>
 800e72a:	2010      	movs	r0, #16
 800e72c:	f7ff fff0 	bl	800e710 <malloc>
 800e730:	4602      	mov	r2, r0
 800e732:	6260      	str	r0, [r4, #36]	; 0x24
 800e734:	b920      	cbnz	r0, 800e740 <_Balloc+0x20>
 800e736:	4b18      	ldr	r3, [pc, #96]	; (800e798 <_Balloc+0x78>)
 800e738:	4818      	ldr	r0, [pc, #96]	; (800e79c <_Balloc+0x7c>)
 800e73a:	2166      	movs	r1, #102	; 0x66
 800e73c:	f000 fc8e 	bl	800f05c <__assert_func>
 800e740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e744:	6006      	str	r6, [r0, #0]
 800e746:	60c6      	str	r6, [r0, #12]
 800e748:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e74a:	68f3      	ldr	r3, [r6, #12]
 800e74c:	b183      	cbz	r3, 800e770 <_Balloc+0x50>
 800e74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e756:	b9b8      	cbnz	r0, 800e788 <_Balloc+0x68>
 800e758:	2101      	movs	r1, #1
 800e75a:	fa01 f605 	lsl.w	r6, r1, r5
 800e75e:	1d72      	adds	r2, r6, #5
 800e760:	0092      	lsls	r2, r2, #2
 800e762:	4620      	mov	r0, r4
 800e764:	f000 fb5a 	bl	800ee1c <_calloc_r>
 800e768:	b160      	cbz	r0, 800e784 <_Balloc+0x64>
 800e76a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e76e:	e00e      	b.n	800e78e <_Balloc+0x6e>
 800e770:	2221      	movs	r2, #33	; 0x21
 800e772:	2104      	movs	r1, #4
 800e774:	4620      	mov	r0, r4
 800e776:	f000 fb51 	bl	800ee1c <_calloc_r>
 800e77a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e77c:	60f0      	str	r0, [r6, #12]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1e4      	bne.n	800e74e <_Balloc+0x2e>
 800e784:	2000      	movs	r0, #0
 800e786:	bd70      	pop	{r4, r5, r6, pc}
 800e788:	6802      	ldr	r2, [r0, #0]
 800e78a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e78e:	2300      	movs	r3, #0
 800e790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e794:	e7f7      	b.n	800e786 <_Balloc+0x66>
 800e796:	bf00      	nop
 800e798:	0800f6c5 	.word	0x0800f6c5
 800e79c:	0800f7ac 	.word	0x0800f7ac

0800e7a0 <_Bfree>:
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	460c      	mov	r4, r1
 800e7a8:	b976      	cbnz	r6, 800e7c8 <_Bfree+0x28>
 800e7aa:	2010      	movs	r0, #16
 800e7ac:	f7ff ffb0 	bl	800e710 <malloc>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	6268      	str	r0, [r5, #36]	; 0x24
 800e7b4:	b920      	cbnz	r0, 800e7c0 <_Bfree+0x20>
 800e7b6:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <_Bfree+0x3c>)
 800e7b8:	4809      	ldr	r0, [pc, #36]	; (800e7e0 <_Bfree+0x40>)
 800e7ba:	218a      	movs	r1, #138	; 0x8a
 800e7bc:	f000 fc4e 	bl	800f05c <__assert_func>
 800e7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7c4:	6006      	str	r6, [r0, #0]
 800e7c6:	60c6      	str	r6, [r0, #12]
 800e7c8:	b13c      	cbz	r4, 800e7da <_Bfree+0x3a>
 800e7ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7cc:	6862      	ldr	r2, [r4, #4]
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7d4:	6021      	str	r1, [r4, #0]
 800e7d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e7da:	bd70      	pop	{r4, r5, r6, pc}
 800e7dc:	0800f6c5 	.word	0x0800f6c5
 800e7e0:	0800f7ac 	.word	0x0800f7ac

0800e7e4 <__multadd>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	690e      	ldr	r6, [r1, #16]
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	4698      	mov	r8, r3
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	f101 0014 	add.w	r0, r1, #20
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	6805      	ldr	r5, [r0, #0]
 800e7f8:	b2a9      	uxth	r1, r5
 800e7fa:	fb02 8101 	mla	r1, r2, r1, r8
 800e7fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e802:	0c2d      	lsrs	r5, r5, #16
 800e804:	fb02 c505 	mla	r5, r2, r5, ip
 800e808:	b289      	uxth	r1, r1
 800e80a:	3301      	adds	r3, #1
 800e80c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e810:	429e      	cmp	r6, r3
 800e812:	f840 1b04 	str.w	r1, [r0], #4
 800e816:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e81a:	dcec      	bgt.n	800e7f6 <__multadd+0x12>
 800e81c:	f1b8 0f00 	cmp.w	r8, #0
 800e820:	d022      	beq.n	800e868 <__multadd+0x84>
 800e822:	68a3      	ldr	r3, [r4, #8]
 800e824:	42b3      	cmp	r3, r6
 800e826:	dc19      	bgt.n	800e85c <__multadd+0x78>
 800e828:	6861      	ldr	r1, [r4, #4]
 800e82a:	4638      	mov	r0, r7
 800e82c:	3101      	adds	r1, #1
 800e82e:	f7ff ff77 	bl	800e720 <_Balloc>
 800e832:	4605      	mov	r5, r0
 800e834:	b928      	cbnz	r0, 800e842 <__multadd+0x5e>
 800e836:	4602      	mov	r2, r0
 800e838:	4b0d      	ldr	r3, [pc, #52]	; (800e870 <__multadd+0x8c>)
 800e83a:	480e      	ldr	r0, [pc, #56]	; (800e874 <__multadd+0x90>)
 800e83c:	21b5      	movs	r1, #181	; 0xb5
 800e83e:	f000 fc0d 	bl	800f05c <__assert_func>
 800e842:	6922      	ldr	r2, [r4, #16]
 800e844:	3202      	adds	r2, #2
 800e846:	f104 010c 	add.w	r1, r4, #12
 800e84a:	0092      	lsls	r2, r2, #2
 800e84c:	300c      	adds	r0, #12
 800e84e:	f7fe f847 	bl	800c8e0 <memcpy>
 800e852:	4621      	mov	r1, r4
 800e854:	4638      	mov	r0, r7
 800e856:	f7ff ffa3 	bl	800e7a0 <_Bfree>
 800e85a:	462c      	mov	r4, r5
 800e85c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e860:	3601      	adds	r6, #1
 800e862:	f8c3 8014 	str.w	r8, [r3, #20]
 800e866:	6126      	str	r6, [r4, #16]
 800e868:	4620      	mov	r0, r4
 800e86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e86e:	bf00      	nop
 800e870:	0800f73b 	.word	0x0800f73b
 800e874:	0800f7ac 	.word	0x0800f7ac

0800e878 <__hi0bits>:
 800e878:	0c03      	lsrs	r3, r0, #16
 800e87a:	041b      	lsls	r3, r3, #16
 800e87c:	b9d3      	cbnz	r3, 800e8b4 <__hi0bits+0x3c>
 800e87e:	0400      	lsls	r0, r0, #16
 800e880:	2310      	movs	r3, #16
 800e882:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e886:	bf04      	itt	eq
 800e888:	0200      	lsleq	r0, r0, #8
 800e88a:	3308      	addeq	r3, #8
 800e88c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e890:	bf04      	itt	eq
 800e892:	0100      	lsleq	r0, r0, #4
 800e894:	3304      	addeq	r3, #4
 800e896:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e89a:	bf04      	itt	eq
 800e89c:	0080      	lsleq	r0, r0, #2
 800e89e:	3302      	addeq	r3, #2
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	db05      	blt.n	800e8b0 <__hi0bits+0x38>
 800e8a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e8a8:	f103 0301 	add.w	r3, r3, #1
 800e8ac:	bf08      	it	eq
 800e8ae:	2320      	moveq	r3, #32
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	4770      	bx	lr
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	e7e4      	b.n	800e882 <__hi0bits+0xa>

0800e8b8 <__lo0bits>:
 800e8b8:	6803      	ldr	r3, [r0, #0]
 800e8ba:	f013 0207 	ands.w	r2, r3, #7
 800e8be:	4601      	mov	r1, r0
 800e8c0:	d00b      	beq.n	800e8da <__lo0bits+0x22>
 800e8c2:	07da      	lsls	r2, r3, #31
 800e8c4:	d424      	bmi.n	800e910 <__lo0bits+0x58>
 800e8c6:	0798      	lsls	r0, r3, #30
 800e8c8:	bf49      	itett	mi
 800e8ca:	085b      	lsrmi	r3, r3, #1
 800e8cc:	089b      	lsrpl	r3, r3, #2
 800e8ce:	2001      	movmi	r0, #1
 800e8d0:	600b      	strmi	r3, [r1, #0]
 800e8d2:	bf5c      	itt	pl
 800e8d4:	600b      	strpl	r3, [r1, #0]
 800e8d6:	2002      	movpl	r0, #2
 800e8d8:	4770      	bx	lr
 800e8da:	b298      	uxth	r0, r3
 800e8dc:	b9b0      	cbnz	r0, 800e90c <__lo0bits+0x54>
 800e8de:	0c1b      	lsrs	r3, r3, #16
 800e8e0:	2010      	movs	r0, #16
 800e8e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e8e6:	bf04      	itt	eq
 800e8e8:	0a1b      	lsreq	r3, r3, #8
 800e8ea:	3008      	addeq	r0, #8
 800e8ec:	071a      	lsls	r2, r3, #28
 800e8ee:	bf04      	itt	eq
 800e8f0:	091b      	lsreq	r3, r3, #4
 800e8f2:	3004      	addeq	r0, #4
 800e8f4:	079a      	lsls	r2, r3, #30
 800e8f6:	bf04      	itt	eq
 800e8f8:	089b      	lsreq	r3, r3, #2
 800e8fa:	3002      	addeq	r0, #2
 800e8fc:	07da      	lsls	r2, r3, #31
 800e8fe:	d403      	bmi.n	800e908 <__lo0bits+0x50>
 800e900:	085b      	lsrs	r3, r3, #1
 800e902:	f100 0001 	add.w	r0, r0, #1
 800e906:	d005      	beq.n	800e914 <__lo0bits+0x5c>
 800e908:	600b      	str	r3, [r1, #0]
 800e90a:	4770      	bx	lr
 800e90c:	4610      	mov	r0, r2
 800e90e:	e7e8      	b.n	800e8e2 <__lo0bits+0x2a>
 800e910:	2000      	movs	r0, #0
 800e912:	4770      	bx	lr
 800e914:	2020      	movs	r0, #32
 800e916:	4770      	bx	lr

0800e918 <__i2b>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	460c      	mov	r4, r1
 800e91c:	2101      	movs	r1, #1
 800e91e:	f7ff feff 	bl	800e720 <_Balloc>
 800e922:	4602      	mov	r2, r0
 800e924:	b928      	cbnz	r0, 800e932 <__i2b+0x1a>
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <__i2b+0x24>)
 800e928:	4805      	ldr	r0, [pc, #20]	; (800e940 <__i2b+0x28>)
 800e92a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e92e:	f000 fb95 	bl	800f05c <__assert_func>
 800e932:	2301      	movs	r3, #1
 800e934:	6144      	str	r4, [r0, #20]
 800e936:	6103      	str	r3, [r0, #16]
 800e938:	bd10      	pop	{r4, pc}
 800e93a:	bf00      	nop
 800e93c:	0800f73b 	.word	0x0800f73b
 800e940:	0800f7ac 	.word	0x0800f7ac

0800e944 <__multiply>:
 800e944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e948:	4614      	mov	r4, r2
 800e94a:	690a      	ldr	r2, [r1, #16]
 800e94c:	6923      	ldr	r3, [r4, #16]
 800e94e:	429a      	cmp	r2, r3
 800e950:	bfb8      	it	lt
 800e952:	460b      	movlt	r3, r1
 800e954:	460d      	mov	r5, r1
 800e956:	bfbc      	itt	lt
 800e958:	4625      	movlt	r5, r4
 800e95a:	461c      	movlt	r4, r3
 800e95c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e960:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e964:	68ab      	ldr	r3, [r5, #8]
 800e966:	6869      	ldr	r1, [r5, #4]
 800e968:	eb0a 0709 	add.w	r7, sl, r9
 800e96c:	42bb      	cmp	r3, r7
 800e96e:	b085      	sub	sp, #20
 800e970:	bfb8      	it	lt
 800e972:	3101      	addlt	r1, #1
 800e974:	f7ff fed4 	bl	800e720 <_Balloc>
 800e978:	b930      	cbnz	r0, 800e988 <__multiply+0x44>
 800e97a:	4602      	mov	r2, r0
 800e97c:	4b42      	ldr	r3, [pc, #264]	; (800ea88 <__multiply+0x144>)
 800e97e:	4843      	ldr	r0, [pc, #268]	; (800ea8c <__multiply+0x148>)
 800e980:	f240 115d 	movw	r1, #349	; 0x15d
 800e984:	f000 fb6a 	bl	800f05c <__assert_func>
 800e988:	f100 0614 	add.w	r6, r0, #20
 800e98c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e990:	4633      	mov	r3, r6
 800e992:	2200      	movs	r2, #0
 800e994:	4543      	cmp	r3, r8
 800e996:	d31e      	bcc.n	800e9d6 <__multiply+0x92>
 800e998:	f105 0c14 	add.w	ip, r5, #20
 800e99c:	f104 0314 	add.w	r3, r4, #20
 800e9a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e9a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e9a8:	9202      	str	r2, [sp, #8]
 800e9aa:	ebac 0205 	sub.w	r2, ip, r5
 800e9ae:	3a15      	subs	r2, #21
 800e9b0:	f022 0203 	bic.w	r2, r2, #3
 800e9b4:	3204      	adds	r2, #4
 800e9b6:	f105 0115 	add.w	r1, r5, #21
 800e9ba:	458c      	cmp	ip, r1
 800e9bc:	bf38      	it	cc
 800e9be:	2204      	movcc	r2, #4
 800e9c0:	9201      	str	r2, [sp, #4]
 800e9c2:	9a02      	ldr	r2, [sp, #8]
 800e9c4:	9303      	str	r3, [sp, #12]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d808      	bhi.n	800e9dc <__multiply+0x98>
 800e9ca:	2f00      	cmp	r7, #0
 800e9cc:	dc55      	bgt.n	800ea7a <__multiply+0x136>
 800e9ce:	6107      	str	r7, [r0, #16]
 800e9d0:	b005      	add	sp, #20
 800e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d6:	f843 2b04 	str.w	r2, [r3], #4
 800e9da:	e7db      	b.n	800e994 <__multiply+0x50>
 800e9dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800e9e0:	f1ba 0f00 	cmp.w	sl, #0
 800e9e4:	d020      	beq.n	800ea28 <__multiply+0xe4>
 800e9e6:	f105 0e14 	add.w	lr, r5, #20
 800e9ea:	46b1      	mov	r9, r6
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e9f2:	f8d9 b000 	ldr.w	fp, [r9]
 800e9f6:	b2a1      	uxth	r1, r4
 800e9f8:	fa1f fb8b 	uxth.w	fp, fp
 800e9fc:	fb0a b101 	mla	r1, sl, r1, fp
 800ea00:	4411      	add	r1, r2
 800ea02:	f8d9 2000 	ldr.w	r2, [r9]
 800ea06:	0c24      	lsrs	r4, r4, #16
 800ea08:	0c12      	lsrs	r2, r2, #16
 800ea0a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ea0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ea12:	b289      	uxth	r1, r1
 800ea14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ea18:	45f4      	cmp	ip, lr
 800ea1a:	f849 1b04 	str.w	r1, [r9], #4
 800ea1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ea22:	d8e4      	bhi.n	800e9ee <__multiply+0xaa>
 800ea24:	9901      	ldr	r1, [sp, #4]
 800ea26:	5072      	str	r2, [r6, r1]
 800ea28:	9a03      	ldr	r2, [sp, #12]
 800ea2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	f1b9 0f00 	cmp.w	r9, #0
 800ea34:	d01f      	beq.n	800ea76 <__multiply+0x132>
 800ea36:	6834      	ldr	r4, [r6, #0]
 800ea38:	f105 0114 	add.w	r1, r5, #20
 800ea3c:	46b6      	mov	lr, r6
 800ea3e:	f04f 0a00 	mov.w	sl, #0
 800ea42:	880a      	ldrh	r2, [r1, #0]
 800ea44:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea48:	fb09 b202 	mla	r2, r9, r2, fp
 800ea4c:	4492      	add	sl, r2
 800ea4e:	b2a4      	uxth	r4, r4
 800ea50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ea54:	f84e 4b04 	str.w	r4, [lr], #4
 800ea58:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea5c:	f8be 2000 	ldrh.w	r2, [lr]
 800ea60:	0c24      	lsrs	r4, r4, #16
 800ea62:	fb09 2404 	mla	r4, r9, r4, r2
 800ea66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ea6a:	458c      	cmp	ip, r1
 800ea6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea70:	d8e7      	bhi.n	800ea42 <__multiply+0xfe>
 800ea72:	9a01      	ldr	r2, [sp, #4]
 800ea74:	50b4      	str	r4, [r6, r2]
 800ea76:	3604      	adds	r6, #4
 800ea78:	e7a3      	b.n	800e9c2 <__multiply+0x7e>
 800ea7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1a5      	bne.n	800e9ce <__multiply+0x8a>
 800ea82:	3f01      	subs	r7, #1
 800ea84:	e7a1      	b.n	800e9ca <__multiply+0x86>
 800ea86:	bf00      	nop
 800ea88:	0800f73b 	.word	0x0800f73b
 800ea8c:	0800f7ac 	.word	0x0800f7ac

0800ea90 <__pow5mult>:
 800ea90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea94:	4615      	mov	r5, r2
 800ea96:	f012 0203 	ands.w	r2, r2, #3
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	d007      	beq.n	800eab0 <__pow5mult+0x20>
 800eaa0:	4c25      	ldr	r4, [pc, #148]	; (800eb38 <__pow5mult+0xa8>)
 800eaa2:	3a01      	subs	r2, #1
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eaaa:	f7ff fe9b 	bl	800e7e4 <__multadd>
 800eaae:	4607      	mov	r7, r0
 800eab0:	10ad      	asrs	r5, r5, #2
 800eab2:	d03d      	beq.n	800eb30 <__pow5mult+0xa0>
 800eab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eab6:	b97c      	cbnz	r4, 800ead8 <__pow5mult+0x48>
 800eab8:	2010      	movs	r0, #16
 800eaba:	f7ff fe29 	bl	800e710 <malloc>
 800eabe:	4602      	mov	r2, r0
 800eac0:	6270      	str	r0, [r6, #36]	; 0x24
 800eac2:	b928      	cbnz	r0, 800ead0 <__pow5mult+0x40>
 800eac4:	4b1d      	ldr	r3, [pc, #116]	; (800eb3c <__pow5mult+0xac>)
 800eac6:	481e      	ldr	r0, [pc, #120]	; (800eb40 <__pow5mult+0xb0>)
 800eac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eacc:	f000 fac6 	bl	800f05c <__assert_func>
 800ead0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ead4:	6004      	str	r4, [r0, #0]
 800ead6:	60c4      	str	r4, [r0, #12]
 800ead8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eadc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eae0:	b94c      	cbnz	r4, 800eaf6 <__pow5mult+0x66>
 800eae2:	f240 2171 	movw	r1, #625	; 0x271
 800eae6:	4630      	mov	r0, r6
 800eae8:	f7ff ff16 	bl	800e918 <__i2b>
 800eaec:	2300      	movs	r3, #0
 800eaee:	f8c8 0008 	str.w	r0, [r8, #8]
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	6003      	str	r3, [r0, #0]
 800eaf6:	f04f 0900 	mov.w	r9, #0
 800eafa:	07eb      	lsls	r3, r5, #31
 800eafc:	d50a      	bpl.n	800eb14 <__pow5mult+0x84>
 800eafe:	4639      	mov	r1, r7
 800eb00:	4622      	mov	r2, r4
 800eb02:	4630      	mov	r0, r6
 800eb04:	f7ff ff1e 	bl	800e944 <__multiply>
 800eb08:	4639      	mov	r1, r7
 800eb0a:	4680      	mov	r8, r0
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f7ff fe47 	bl	800e7a0 <_Bfree>
 800eb12:	4647      	mov	r7, r8
 800eb14:	106d      	asrs	r5, r5, #1
 800eb16:	d00b      	beq.n	800eb30 <__pow5mult+0xa0>
 800eb18:	6820      	ldr	r0, [r4, #0]
 800eb1a:	b938      	cbnz	r0, 800eb2c <__pow5mult+0x9c>
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4630      	mov	r0, r6
 800eb22:	f7ff ff0f 	bl	800e944 <__multiply>
 800eb26:	6020      	str	r0, [r4, #0]
 800eb28:	f8c0 9000 	str.w	r9, [r0]
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	e7e4      	b.n	800eafa <__pow5mult+0x6a>
 800eb30:	4638      	mov	r0, r7
 800eb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb36:	bf00      	nop
 800eb38:	0800f900 	.word	0x0800f900
 800eb3c:	0800f6c5 	.word	0x0800f6c5
 800eb40:	0800f7ac 	.word	0x0800f7ac

0800eb44 <__lshift>:
 800eb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb48:	460c      	mov	r4, r1
 800eb4a:	6849      	ldr	r1, [r1, #4]
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb52:	68a3      	ldr	r3, [r4, #8]
 800eb54:	4607      	mov	r7, r0
 800eb56:	4691      	mov	r9, r2
 800eb58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb5c:	f108 0601 	add.w	r6, r8, #1
 800eb60:	42b3      	cmp	r3, r6
 800eb62:	db0b      	blt.n	800eb7c <__lshift+0x38>
 800eb64:	4638      	mov	r0, r7
 800eb66:	f7ff fddb 	bl	800e720 <_Balloc>
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	b948      	cbnz	r0, 800eb82 <__lshift+0x3e>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	4b28      	ldr	r3, [pc, #160]	; (800ec14 <__lshift+0xd0>)
 800eb72:	4829      	ldr	r0, [pc, #164]	; (800ec18 <__lshift+0xd4>)
 800eb74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eb78:	f000 fa70 	bl	800f05c <__assert_func>
 800eb7c:	3101      	adds	r1, #1
 800eb7e:	005b      	lsls	r3, r3, #1
 800eb80:	e7ee      	b.n	800eb60 <__lshift+0x1c>
 800eb82:	2300      	movs	r3, #0
 800eb84:	f100 0114 	add.w	r1, r0, #20
 800eb88:	f100 0210 	add.w	r2, r0, #16
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	4553      	cmp	r3, sl
 800eb90:	db33      	blt.n	800ebfa <__lshift+0xb6>
 800eb92:	6920      	ldr	r0, [r4, #16]
 800eb94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb98:	f104 0314 	add.w	r3, r4, #20
 800eb9c:	f019 091f 	ands.w	r9, r9, #31
 800eba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eba8:	d02b      	beq.n	800ec02 <__lshift+0xbe>
 800ebaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ebae:	468a      	mov	sl, r1
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	6818      	ldr	r0, [r3, #0]
 800ebb4:	fa00 f009 	lsl.w	r0, r0, r9
 800ebb8:	4302      	orrs	r2, r0
 800ebba:	f84a 2b04 	str.w	r2, [sl], #4
 800ebbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebc2:	459c      	cmp	ip, r3
 800ebc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebc8:	d8f3      	bhi.n	800ebb2 <__lshift+0x6e>
 800ebca:	ebac 0304 	sub.w	r3, ip, r4
 800ebce:	3b15      	subs	r3, #21
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	f104 0015 	add.w	r0, r4, #21
 800ebda:	4584      	cmp	ip, r0
 800ebdc:	bf38      	it	cc
 800ebde:	2304      	movcc	r3, #4
 800ebe0:	50ca      	str	r2, [r1, r3]
 800ebe2:	b10a      	cbz	r2, 800ebe8 <__lshift+0xa4>
 800ebe4:	f108 0602 	add.w	r6, r8, #2
 800ebe8:	3e01      	subs	r6, #1
 800ebea:	4638      	mov	r0, r7
 800ebec:	612e      	str	r6, [r5, #16]
 800ebee:	4621      	mov	r1, r4
 800ebf0:	f7ff fdd6 	bl	800e7a0 <_Bfree>
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800ebfe:	3301      	adds	r3, #1
 800ec00:	e7c5      	b.n	800eb8e <__lshift+0x4a>
 800ec02:	3904      	subs	r1, #4
 800ec04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec0c:	459c      	cmp	ip, r3
 800ec0e:	d8f9      	bhi.n	800ec04 <__lshift+0xc0>
 800ec10:	e7ea      	b.n	800ebe8 <__lshift+0xa4>
 800ec12:	bf00      	nop
 800ec14:	0800f73b 	.word	0x0800f73b
 800ec18:	0800f7ac 	.word	0x0800f7ac

0800ec1c <__mcmp>:
 800ec1c:	b530      	push	{r4, r5, lr}
 800ec1e:	6902      	ldr	r2, [r0, #16]
 800ec20:	690c      	ldr	r4, [r1, #16]
 800ec22:	1b12      	subs	r2, r2, r4
 800ec24:	d10e      	bne.n	800ec44 <__mcmp+0x28>
 800ec26:	f100 0314 	add.w	r3, r0, #20
 800ec2a:	3114      	adds	r1, #20
 800ec2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec3c:	42a5      	cmp	r5, r4
 800ec3e:	d003      	beq.n	800ec48 <__mcmp+0x2c>
 800ec40:	d305      	bcc.n	800ec4e <__mcmp+0x32>
 800ec42:	2201      	movs	r2, #1
 800ec44:	4610      	mov	r0, r2
 800ec46:	bd30      	pop	{r4, r5, pc}
 800ec48:	4283      	cmp	r3, r0
 800ec4a:	d3f3      	bcc.n	800ec34 <__mcmp+0x18>
 800ec4c:	e7fa      	b.n	800ec44 <__mcmp+0x28>
 800ec4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec52:	e7f7      	b.n	800ec44 <__mcmp+0x28>

0800ec54 <__mdiff>:
 800ec54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	460c      	mov	r4, r1
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	4620      	mov	r0, r4
 800ec60:	4617      	mov	r7, r2
 800ec62:	f7ff ffdb 	bl	800ec1c <__mcmp>
 800ec66:	1e05      	subs	r5, r0, #0
 800ec68:	d110      	bne.n	800ec8c <__mdiff+0x38>
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7ff fd57 	bl	800e720 <_Balloc>
 800ec72:	b930      	cbnz	r0, 800ec82 <__mdiff+0x2e>
 800ec74:	4b39      	ldr	r3, [pc, #228]	; (800ed5c <__mdiff+0x108>)
 800ec76:	4602      	mov	r2, r0
 800ec78:	f240 2132 	movw	r1, #562	; 0x232
 800ec7c:	4838      	ldr	r0, [pc, #224]	; (800ed60 <__mdiff+0x10c>)
 800ec7e:	f000 f9ed 	bl	800f05c <__assert_func>
 800ec82:	2301      	movs	r3, #1
 800ec84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8c:	bfa4      	itt	ge
 800ec8e:	463b      	movge	r3, r7
 800ec90:	4627      	movge	r7, r4
 800ec92:	4630      	mov	r0, r6
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	bfa6      	itte	ge
 800ec98:	461c      	movge	r4, r3
 800ec9a:	2500      	movge	r5, #0
 800ec9c:	2501      	movlt	r5, #1
 800ec9e:	f7ff fd3f 	bl	800e720 <_Balloc>
 800eca2:	b920      	cbnz	r0, 800ecae <__mdiff+0x5a>
 800eca4:	4b2d      	ldr	r3, [pc, #180]	; (800ed5c <__mdiff+0x108>)
 800eca6:	4602      	mov	r2, r0
 800eca8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ecac:	e7e6      	b.n	800ec7c <__mdiff+0x28>
 800ecae:	693e      	ldr	r6, [r7, #16]
 800ecb0:	60c5      	str	r5, [r0, #12]
 800ecb2:	6925      	ldr	r5, [r4, #16]
 800ecb4:	f107 0114 	add.w	r1, r7, #20
 800ecb8:	f104 0914 	add.w	r9, r4, #20
 800ecbc:	f100 0e14 	add.w	lr, r0, #20
 800ecc0:	f107 0210 	add.w	r2, r7, #16
 800ecc4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ecc8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800eccc:	46f2      	mov	sl, lr
 800ecce:	2700      	movs	r7, #0
 800ecd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800ecd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ecd8:	fa1f f883 	uxth.w	r8, r3
 800ecdc:	fa17 f78b 	uxtah	r7, r7, fp
 800ece0:	0c1b      	lsrs	r3, r3, #16
 800ece2:	eba7 0808 	sub.w	r8, r7, r8
 800ece6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ecea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ecee:	fa1f f888 	uxth.w	r8, r8
 800ecf2:	141f      	asrs	r7, r3, #16
 800ecf4:	454d      	cmp	r5, r9
 800ecf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ecfa:	f84a 3b04 	str.w	r3, [sl], #4
 800ecfe:	d8e7      	bhi.n	800ecd0 <__mdiff+0x7c>
 800ed00:	1b2b      	subs	r3, r5, r4
 800ed02:	3b15      	subs	r3, #21
 800ed04:	f023 0303 	bic.w	r3, r3, #3
 800ed08:	3304      	adds	r3, #4
 800ed0a:	3415      	adds	r4, #21
 800ed0c:	42a5      	cmp	r5, r4
 800ed0e:	bf38      	it	cc
 800ed10:	2304      	movcc	r3, #4
 800ed12:	4419      	add	r1, r3
 800ed14:	4473      	add	r3, lr
 800ed16:	469e      	mov	lr, r3
 800ed18:	460d      	mov	r5, r1
 800ed1a:	4565      	cmp	r5, ip
 800ed1c:	d30e      	bcc.n	800ed3c <__mdiff+0xe8>
 800ed1e:	f10c 0203 	add.w	r2, ip, #3
 800ed22:	1a52      	subs	r2, r2, r1
 800ed24:	f022 0203 	bic.w	r2, r2, #3
 800ed28:	3903      	subs	r1, #3
 800ed2a:	458c      	cmp	ip, r1
 800ed2c:	bf38      	it	cc
 800ed2e:	2200      	movcc	r2, #0
 800ed30:	441a      	add	r2, r3
 800ed32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed36:	b17b      	cbz	r3, 800ed58 <__mdiff+0x104>
 800ed38:	6106      	str	r6, [r0, #16]
 800ed3a:	e7a5      	b.n	800ec88 <__mdiff+0x34>
 800ed3c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ed40:	fa17 f488 	uxtah	r4, r7, r8
 800ed44:	1422      	asrs	r2, r4, #16
 800ed46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ed4a:	b2a4      	uxth	r4, r4
 800ed4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ed50:	f84e 4b04 	str.w	r4, [lr], #4
 800ed54:	1417      	asrs	r7, r2, #16
 800ed56:	e7e0      	b.n	800ed1a <__mdiff+0xc6>
 800ed58:	3e01      	subs	r6, #1
 800ed5a:	e7ea      	b.n	800ed32 <__mdiff+0xde>
 800ed5c:	0800f73b 	.word	0x0800f73b
 800ed60:	0800f7ac 	.word	0x0800f7ac

0800ed64 <__d2b>:
 800ed64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed68:	4689      	mov	r9, r1
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	ec57 6b10 	vmov	r6, r7, d0
 800ed70:	4690      	mov	r8, r2
 800ed72:	f7ff fcd5 	bl	800e720 <_Balloc>
 800ed76:	4604      	mov	r4, r0
 800ed78:	b930      	cbnz	r0, 800ed88 <__d2b+0x24>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	4b25      	ldr	r3, [pc, #148]	; (800ee14 <__d2b+0xb0>)
 800ed7e:	4826      	ldr	r0, [pc, #152]	; (800ee18 <__d2b+0xb4>)
 800ed80:	f240 310a 	movw	r1, #778	; 0x30a
 800ed84:	f000 f96a 	bl	800f05c <__assert_func>
 800ed88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ed8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed90:	bb35      	cbnz	r5, 800ede0 <__d2b+0x7c>
 800ed92:	2e00      	cmp	r6, #0
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	d028      	beq.n	800edea <__d2b+0x86>
 800ed98:	4668      	mov	r0, sp
 800ed9a:	9600      	str	r6, [sp, #0]
 800ed9c:	f7ff fd8c 	bl	800e8b8 <__lo0bits>
 800eda0:	9900      	ldr	r1, [sp, #0]
 800eda2:	b300      	cbz	r0, 800ede6 <__d2b+0x82>
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	f1c0 0320 	rsb	r3, r0, #32
 800edaa:	fa02 f303 	lsl.w	r3, r2, r3
 800edae:	430b      	orrs	r3, r1
 800edb0:	40c2      	lsrs	r2, r0
 800edb2:	6163      	str	r3, [r4, #20]
 800edb4:	9201      	str	r2, [sp, #4]
 800edb6:	9b01      	ldr	r3, [sp, #4]
 800edb8:	61a3      	str	r3, [r4, #24]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bf14      	ite	ne
 800edbe:	2202      	movne	r2, #2
 800edc0:	2201      	moveq	r2, #1
 800edc2:	6122      	str	r2, [r4, #16]
 800edc4:	b1d5      	cbz	r5, 800edfc <__d2b+0x98>
 800edc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800edca:	4405      	add	r5, r0
 800edcc:	f8c9 5000 	str.w	r5, [r9]
 800edd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800edd4:	f8c8 0000 	str.w	r0, [r8]
 800edd8:	4620      	mov	r0, r4
 800edda:	b003      	add	sp, #12
 800eddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ede4:	e7d5      	b.n	800ed92 <__d2b+0x2e>
 800ede6:	6161      	str	r1, [r4, #20]
 800ede8:	e7e5      	b.n	800edb6 <__d2b+0x52>
 800edea:	a801      	add	r0, sp, #4
 800edec:	f7ff fd64 	bl	800e8b8 <__lo0bits>
 800edf0:	9b01      	ldr	r3, [sp, #4]
 800edf2:	6163      	str	r3, [r4, #20]
 800edf4:	2201      	movs	r2, #1
 800edf6:	6122      	str	r2, [r4, #16]
 800edf8:	3020      	adds	r0, #32
 800edfa:	e7e3      	b.n	800edc4 <__d2b+0x60>
 800edfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee04:	f8c9 0000 	str.w	r0, [r9]
 800ee08:	6918      	ldr	r0, [r3, #16]
 800ee0a:	f7ff fd35 	bl	800e878 <__hi0bits>
 800ee0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee12:	e7df      	b.n	800edd4 <__d2b+0x70>
 800ee14:	0800f73b 	.word	0x0800f73b
 800ee18:	0800f7ac 	.word	0x0800f7ac

0800ee1c <_calloc_r>:
 800ee1c:	b513      	push	{r0, r1, r4, lr}
 800ee1e:	434a      	muls	r2, r1
 800ee20:	4611      	mov	r1, r2
 800ee22:	9201      	str	r2, [sp, #4]
 800ee24:	f000 f85a 	bl	800eedc <_malloc_r>
 800ee28:	4604      	mov	r4, r0
 800ee2a:	b118      	cbz	r0, 800ee34 <_calloc_r+0x18>
 800ee2c:	9a01      	ldr	r2, [sp, #4]
 800ee2e:	2100      	movs	r1, #0
 800ee30:	f7fd fd64 	bl	800c8fc <memset>
 800ee34:	4620      	mov	r0, r4
 800ee36:	b002      	add	sp, #8
 800ee38:	bd10      	pop	{r4, pc}
	...

0800ee3c <_free_r>:
 800ee3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee3e:	2900      	cmp	r1, #0
 800ee40:	d048      	beq.n	800eed4 <_free_r+0x98>
 800ee42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee46:	9001      	str	r0, [sp, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ee4e:	bfb8      	it	lt
 800ee50:	18e4      	addlt	r4, r4, r3
 800ee52:	f000 f989 	bl	800f168 <__malloc_lock>
 800ee56:	4a20      	ldr	r2, [pc, #128]	; (800eed8 <_free_r+0x9c>)
 800ee58:	9801      	ldr	r0, [sp, #4]
 800ee5a:	6813      	ldr	r3, [r2, #0]
 800ee5c:	4615      	mov	r5, r2
 800ee5e:	b933      	cbnz	r3, 800ee6e <_free_r+0x32>
 800ee60:	6063      	str	r3, [r4, #4]
 800ee62:	6014      	str	r4, [r2, #0]
 800ee64:	b003      	add	sp, #12
 800ee66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee6a:	f000 b983 	b.w	800f174 <__malloc_unlock>
 800ee6e:	42a3      	cmp	r3, r4
 800ee70:	d90b      	bls.n	800ee8a <_free_r+0x4e>
 800ee72:	6821      	ldr	r1, [r4, #0]
 800ee74:	1862      	adds	r2, r4, r1
 800ee76:	4293      	cmp	r3, r2
 800ee78:	bf04      	itt	eq
 800ee7a:	681a      	ldreq	r2, [r3, #0]
 800ee7c:	685b      	ldreq	r3, [r3, #4]
 800ee7e:	6063      	str	r3, [r4, #4]
 800ee80:	bf04      	itt	eq
 800ee82:	1852      	addeq	r2, r2, r1
 800ee84:	6022      	streq	r2, [r4, #0]
 800ee86:	602c      	str	r4, [r5, #0]
 800ee88:	e7ec      	b.n	800ee64 <_free_r+0x28>
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	b10b      	cbz	r3, 800ee94 <_free_r+0x58>
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	d9fa      	bls.n	800ee8a <_free_r+0x4e>
 800ee94:	6811      	ldr	r1, [r2, #0]
 800ee96:	1855      	adds	r5, r2, r1
 800ee98:	42a5      	cmp	r5, r4
 800ee9a:	d10b      	bne.n	800eeb4 <_free_r+0x78>
 800ee9c:	6824      	ldr	r4, [r4, #0]
 800ee9e:	4421      	add	r1, r4
 800eea0:	1854      	adds	r4, r2, r1
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	6011      	str	r1, [r2, #0]
 800eea6:	d1dd      	bne.n	800ee64 <_free_r+0x28>
 800eea8:	681c      	ldr	r4, [r3, #0]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	6053      	str	r3, [r2, #4]
 800eeae:	4421      	add	r1, r4
 800eeb0:	6011      	str	r1, [r2, #0]
 800eeb2:	e7d7      	b.n	800ee64 <_free_r+0x28>
 800eeb4:	d902      	bls.n	800eebc <_free_r+0x80>
 800eeb6:	230c      	movs	r3, #12
 800eeb8:	6003      	str	r3, [r0, #0]
 800eeba:	e7d3      	b.n	800ee64 <_free_r+0x28>
 800eebc:	6825      	ldr	r5, [r4, #0]
 800eebe:	1961      	adds	r1, r4, r5
 800eec0:	428b      	cmp	r3, r1
 800eec2:	bf04      	itt	eq
 800eec4:	6819      	ldreq	r1, [r3, #0]
 800eec6:	685b      	ldreq	r3, [r3, #4]
 800eec8:	6063      	str	r3, [r4, #4]
 800eeca:	bf04      	itt	eq
 800eecc:	1949      	addeq	r1, r1, r5
 800eece:	6021      	streq	r1, [r4, #0]
 800eed0:	6054      	str	r4, [r2, #4]
 800eed2:	e7c7      	b.n	800ee64 <_free_r+0x28>
 800eed4:	b003      	add	sp, #12
 800eed6:	bd30      	pop	{r4, r5, pc}
 800eed8:	20001b40 	.word	0x20001b40

0800eedc <_malloc_r>:
 800eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eede:	1ccd      	adds	r5, r1, #3
 800eee0:	f025 0503 	bic.w	r5, r5, #3
 800eee4:	3508      	adds	r5, #8
 800eee6:	2d0c      	cmp	r5, #12
 800eee8:	bf38      	it	cc
 800eeea:	250c      	movcc	r5, #12
 800eeec:	2d00      	cmp	r5, #0
 800eeee:	4606      	mov	r6, r0
 800eef0:	db01      	blt.n	800eef6 <_malloc_r+0x1a>
 800eef2:	42a9      	cmp	r1, r5
 800eef4:	d903      	bls.n	800eefe <_malloc_r+0x22>
 800eef6:	230c      	movs	r3, #12
 800eef8:	6033      	str	r3, [r6, #0]
 800eefa:	2000      	movs	r0, #0
 800eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eefe:	f000 f933 	bl	800f168 <__malloc_lock>
 800ef02:	4921      	ldr	r1, [pc, #132]	; (800ef88 <_malloc_r+0xac>)
 800ef04:	680a      	ldr	r2, [r1, #0]
 800ef06:	4614      	mov	r4, r2
 800ef08:	b99c      	cbnz	r4, 800ef32 <_malloc_r+0x56>
 800ef0a:	4f20      	ldr	r7, [pc, #128]	; (800ef8c <_malloc_r+0xb0>)
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	b923      	cbnz	r3, 800ef1a <_malloc_r+0x3e>
 800ef10:	4621      	mov	r1, r4
 800ef12:	4630      	mov	r0, r6
 800ef14:	f000 f83c 	bl	800ef90 <_sbrk_r>
 800ef18:	6038      	str	r0, [r7, #0]
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f000 f837 	bl	800ef90 <_sbrk_r>
 800ef22:	1c43      	adds	r3, r0, #1
 800ef24:	d123      	bne.n	800ef6e <_malloc_r+0x92>
 800ef26:	230c      	movs	r3, #12
 800ef28:	6033      	str	r3, [r6, #0]
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f000 f922 	bl	800f174 <__malloc_unlock>
 800ef30:	e7e3      	b.n	800eefa <_malloc_r+0x1e>
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	1b5b      	subs	r3, r3, r5
 800ef36:	d417      	bmi.n	800ef68 <_malloc_r+0x8c>
 800ef38:	2b0b      	cmp	r3, #11
 800ef3a:	d903      	bls.n	800ef44 <_malloc_r+0x68>
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	441c      	add	r4, r3
 800ef40:	6025      	str	r5, [r4, #0]
 800ef42:	e004      	b.n	800ef4e <_malloc_r+0x72>
 800ef44:	6863      	ldr	r3, [r4, #4]
 800ef46:	42a2      	cmp	r2, r4
 800ef48:	bf0c      	ite	eq
 800ef4a:	600b      	streq	r3, [r1, #0]
 800ef4c:	6053      	strne	r3, [r2, #4]
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f000 f910 	bl	800f174 <__malloc_unlock>
 800ef54:	f104 000b 	add.w	r0, r4, #11
 800ef58:	1d23      	adds	r3, r4, #4
 800ef5a:	f020 0007 	bic.w	r0, r0, #7
 800ef5e:	1ac2      	subs	r2, r0, r3
 800ef60:	d0cc      	beq.n	800eefc <_malloc_r+0x20>
 800ef62:	1a1b      	subs	r3, r3, r0
 800ef64:	50a3      	str	r3, [r4, r2]
 800ef66:	e7c9      	b.n	800eefc <_malloc_r+0x20>
 800ef68:	4622      	mov	r2, r4
 800ef6a:	6864      	ldr	r4, [r4, #4]
 800ef6c:	e7cc      	b.n	800ef08 <_malloc_r+0x2c>
 800ef6e:	1cc4      	adds	r4, r0, #3
 800ef70:	f024 0403 	bic.w	r4, r4, #3
 800ef74:	42a0      	cmp	r0, r4
 800ef76:	d0e3      	beq.n	800ef40 <_malloc_r+0x64>
 800ef78:	1a21      	subs	r1, r4, r0
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f000 f808 	bl	800ef90 <_sbrk_r>
 800ef80:	3001      	adds	r0, #1
 800ef82:	d1dd      	bne.n	800ef40 <_malloc_r+0x64>
 800ef84:	e7cf      	b.n	800ef26 <_malloc_r+0x4a>
 800ef86:	bf00      	nop
 800ef88:	20001b40 	.word	0x20001b40
 800ef8c:	20001b44 	.word	0x20001b44

0800ef90 <_sbrk_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d06      	ldr	r5, [pc, #24]	; (800efac <_sbrk_r+0x1c>)
 800ef94:	2300      	movs	r3, #0
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	f7f3 ffe8 	bl	8002f70 <_sbrk>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d102      	bne.n	800efaa <_sbrk_r+0x1a>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	b103      	cbz	r3, 800efaa <_sbrk_r+0x1a>
 800efa8:	6023      	str	r3, [r4, #0]
 800efaa:	bd38      	pop	{r3, r4, r5, pc}
 800efac:	200022e0 	.word	0x200022e0

0800efb0 <__sread>:
 800efb0:	b510      	push	{r4, lr}
 800efb2:	460c      	mov	r4, r1
 800efb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb8:	f000 fa3c 	bl	800f434 <_read_r>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	bfab      	itete	ge
 800efc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efc2:	89a3      	ldrhlt	r3, [r4, #12]
 800efc4:	181b      	addge	r3, r3, r0
 800efc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efca:	bfac      	ite	ge
 800efcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800efce:	81a3      	strhlt	r3, [r4, #12]
 800efd0:	bd10      	pop	{r4, pc}

0800efd2 <__swrite>:
 800efd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd6:	461f      	mov	r7, r3
 800efd8:	898b      	ldrh	r3, [r1, #12]
 800efda:	05db      	lsls	r3, r3, #23
 800efdc:	4605      	mov	r5, r0
 800efde:	460c      	mov	r4, r1
 800efe0:	4616      	mov	r6, r2
 800efe2:	d505      	bpl.n	800eff0 <__swrite+0x1e>
 800efe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe8:	2302      	movs	r3, #2
 800efea:	2200      	movs	r2, #0
 800efec:	f000 f898 	bl	800f120 <_lseek_r>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	4632      	mov	r2, r6
 800effe:	463b      	mov	r3, r7
 800f000:	4628      	mov	r0, r5
 800f002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f006:	f000 b817 	b.w	800f038 <_write_r>

0800f00a <__sseek>:
 800f00a:	b510      	push	{r4, lr}
 800f00c:	460c      	mov	r4, r1
 800f00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f012:	f000 f885 	bl	800f120 <_lseek_r>
 800f016:	1c43      	adds	r3, r0, #1
 800f018:	89a3      	ldrh	r3, [r4, #12]
 800f01a:	bf15      	itete	ne
 800f01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f026:	81a3      	strheq	r3, [r4, #12]
 800f028:	bf18      	it	ne
 800f02a:	81a3      	strhne	r3, [r4, #12]
 800f02c:	bd10      	pop	{r4, pc}

0800f02e <__sclose>:
 800f02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f032:	f000 b831 	b.w	800f098 <_close_r>
	...

0800f038 <_write_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4d07      	ldr	r5, [pc, #28]	; (800f058 <_write_r+0x20>)
 800f03c:	4604      	mov	r4, r0
 800f03e:	4608      	mov	r0, r1
 800f040:	4611      	mov	r1, r2
 800f042:	2200      	movs	r2, #0
 800f044:	602a      	str	r2, [r5, #0]
 800f046:	461a      	mov	r2, r3
 800f048:	f7f3 fa1c 	bl	8002484 <_write>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	d102      	bne.n	800f056 <_write_r+0x1e>
 800f050:	682b      	ldr	r3, [r5, #0]
 800f052:	b103      	cbz	r3, 800f056 <_write_r+0x1e>
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	bd38      	pop	{r3, r4, r5, pc}
 800f058:	200022e0 	.word	0x200022e0

0800f05c <__assert_func>:
 800f05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f05e:	4614      	mov	r4, r2
 800f060:	461a      	mov	r2, r3
 800f062:	4b09      	ldr	r3, [pc, #36]	; (800f088 <__assert_func+0x2c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4605      	mov	r5, r0
 800f068:	68d8      	ldr	r0, [r3, #12]
 800f06a:	b14c      	cbz	r4, 800f080 <__assert_func+0x24>
 800f06c:	4b07      	ldr	r3, [pc, #28]	; (800f08c <__assert_func+0x30>)
 800f06e:	9100      	str	r1, [sp, #0]
 800f070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f074:	4906      	ldr	r1, [pc, #24]	; (800f090 <__assert_func+0x34>)
 800f076:	462b      	mov	r3, r5
 800f078:	f000 f81e 	bl	800f0b8 <fiprintf>
 800f07c:	f000 f9f9 	bl	800f472 <abort>
 800f080:	4b04      	ldr	r3, [pc, #16]	; (800f094 <__assert_func+0x38>)
 800f082:	461c      	mov	r4, r3
 800f084:	e7f3      	b.n	800f06e <__assert_func+0x12>
 800f086:	bf00      	nop
 800f088:	2000001c 	.word	0x2000001c
 800f08c:	0800f90c 	.word	0x0800f90c
 800f090:	0800f919 	.word	0x0800f919
 800f094:	0800f947 	.word	0x0800f947

0800f098 <_close_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4d06      	ldr	r5, [pc, #24]	; (800f0b4 <_close_r+0x1c>)
 800f09c:	2300      	movs	r3, #0
 800f09e:	4604      	mov	r4, r0
 800f0a0:	4608      	mov	r0, r1
 800f0a2:	602b      	str	r3, [r5, #0]
 800f0a4:	f7f3 fa1a 	bl	80024dc <_close>
 800f0a8:	1c43      	adds	r3, r0, #1
 800f0aa:	d102      	bne.n	800f0b2 <_close_r+0x1a>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	b103      	cbz	r3, 800f0b2 <_close_r+0x1a>
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	bd38      	pop	{r3, r4, r5, pc}
 800f0b4:	200022e0 	.word	0x200022e0

0800f0b8 <fiprintf>:
 800f0b8:	b40e      	push	{r1, r2, r3}
 800f0ba:	b503      	push	{r0, r1, lr}
 800f0bc:	4601      	mov	r1, r0
 800f0be:	ab03      	add	r3, sp, #12
 800f0c0:	4805      	ldr	r0, [pc, #20]	; (800f0d8 <fiprintf+0x20>)
 800f0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0c6:	6800      	ldr	r0, [r0, #0]
 800f0c8:	9301      	str	r3, [sp, #4]
 800f0ca:	f000 f883 	bl	800f1d4 <_vfiprintf_r>
 800f0ce:	b002      	add	sp, #8
 800f0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0d4:	b003      	add	sp, #12
 800f0d6:	4770      	bx	lr
 800f0d8:	2000001c 	.word	0x2000001c

0800f0dc <_fstat_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	4d07      	ldr	r5, [pc, #28]	; (800f0fc <_fstat_r+0x20>)
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	4608      	mov	r0, r1
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	602b      	str	r3, [r5, #0]
 800f0ea:	f7f3 fa47 	bl	800257c <_fstat>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d102      	bne.n	800f0f8 <_fstat_r+0x1c>
 800f0f2:	682b      	ldr	r3, [r5, #0]
 800f0f4:	b103      	cbz	r3, 800f0f8 <_fstat_r+0x1c>
 800f0f6:	6023      	str	r3, [r4, #0]
 800f0f8:	bd38      	pop	{r3, r4, r5, pc}
 800f0fa:	bf00      	nop
 800f0fc:	200022e0 	.word	0x200022e0

0800f100 <_isatty_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d06      	ldr	r5, [pc, #24]	; (800f11c <_isatty_r+0x1c>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	602b      	str	r3, [r5, #0]
 800f10c:	f7f3 f9a4 	bl	8002458 <_isatty>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_isatty_r+0x1a>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_isatty_r+0x1a>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	200022e0 	.word	0x200022e0

0800f120 <_lseek_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	4d07      	ldr	r5, [pc, #28]	; (800f140 <_lseek_r+0x20>)
 800f124:	4604      	mov	r4, r0
 800f126:	4608      	mov	r0, r1
 800f128:	4611      	mov	r1, r2
 800f12a:	2200      	movs	r2, #0
 800f12c:	602a      	str	r2, [r5, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	f7f3 f9eb 	bl	800250a <_lseek>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d102      	bne.n	800f13e <_lseek_r+0x1e>
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	b103      	cbz	r3, 800f13e <_lseek_r+0x1e>
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	bd38      	pop	{r3, r4, r5, pc}
 800f140:	200022e0 	.word	0x200022e0

0800f144 <__ascii_mbtowc>:
 800f144:	b082      	sub	sp, #8
 800f146:	b901      	cbnz	r1, 800f14a <__ascii_mbtowc+0x6>
 800f148:	a901      	add	r1, sp, #4
 800f14a:	b142      	cbz	r2, 800f15e <__ascii_mbtowc+0x1a>
 800f14c:	b14b      	cbz	r3, 800f162 <__ascii_mbtowc+0x1e>
 800f14e:	7813      	ldrb	r3, [r2, #0]
 800f150:	600b      	str	r3, [r1, #0]
 800f152:	7812      	ldrb	r2, [r2, #0]
 800f154:	1e10      	subs	r0, r2, #0
 800f156:	bf18      	it	ne
 800f158:	2001      	movne	r0, #1
 800f15a:	b002      	add	sp, #8
 800f15c:	4770      	bx	lr
 800f15e:	4610      	mov	r0, r2
 800f160:	e7fb      	b.n	800f15a <__ascii_mbtowc+0x16>
 800f162:	f06f 0001 	mvn.w	r0, #1
 800f166:	e7f8      	b.n	800f15a <__ascii_mbtowc+0x16>

0800f168 <__malloc_lock>:
 800f168:	4801      	ldr	r0, [pc, #4]	; (800f170 <__malloc_lock+0x8>)
 800f16a:	f7ff ba6a 	b.w	800e642 <__retarget_lock_acquire_recursive>
 800f16e:	bf00      	nop
 800f170:	200022d8 	.word	0x200022d8

0800f174 <__malloc_unlock>:
 800f174:	4801      	ldr	r0, [pc, #4]	; (800f17c <__malloc_unlock+0x8>)
 800f176:	f7ff ba65 	b.w	800e644 <__retarget_lock_release_recursive>
 800f17a:	bf00      	nop
 800f17c:	200022d8 	.word	0x200022d8

0800f180 <__sfputc_r>:
 800f180:	6893      	ldr	r3, [r2, #8]
 800f182:	3b01      	subs	r3, #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	b410      	push	{r4}
 800f188:	6093      	str	r3, [r2, #8]
 800f18a:	da08      	bge.n	800f19e <__sfputc_r+0x1e>
 800f18c:	6994      	ldr	r4, [r2, #24]
 800f18e:	42a3      	cmp	r3, r4
 800f190:	db01      	blt.n	800f196 <__sfputc_r+0x16>
 800f192:	290a      	cmp	r1, #10
 800f194:	d103      	bne.n	800f19e <__sfputc_r+0x1e>
 800f196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f19a:	f7fe b95d 	b.w	800d458 <__swbuf_r>
 800f19e:	6813      	ldr	r3, [r2, #0]
 800f1a0:	1c58      	adds	r0, r3, #1
 800f1a2:	6010      	str	r0, [r2, #0]
 800f1a4:	7019      	strb	r1, [r3, #0]
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ac:	4770      	bx	lr

0800f1ae <__sfputs_r>:
 800f1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	460f      	mov	r7, r1
 800f1b4:	4614      	mov	r4, r2
 800f1b6:	18d5      	adds	r5, r2, r3
 800f1b8:	42ac      	cmp	r4, r5
 800f1ba:	d101      	bne.n	800f1c0 <__sfputs_r+0x12>
 800f1bc:	2000      	movs	r0, #0
 800f1be:	e007      	b.n	800f1d0 <__sfputs_r+0x22>
 800f1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1c4:	463a      	mov	r2, r7
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f7ff ffda 	bl	800f180 <__sfputc_r>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d1f3      	bne.n	800f1b8 <__sfputs_r+0xa>
 800f1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1d4 <_vfiprintf_r>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	460d      	mov	r5, r1
 800f1da:	b09d      	sub	sp, #116	; 0x74
 800f1dc:	4614      	mov	r4, r2
 800f1de:	4698      	mov	r8, r3
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	b118      	cbz	r0, 800f1ec <_vfiprintf_r+0x18>
 800f1e4:	6983      	ldr	r3, [r0, #24]
 800f1e6:	b90b      	cbnz	r3, 800f1ec <_vfiprintf_r+0x18>
 800f1e8:	f7ff f988 	bl	800e4fc <__sinit>
 800f1ec:	4b89      	ldr	r3, [pc, #548]	; (800f414 <_vfiprintf_r+0x240>)
 800f1ee:	429d      	cmp	r5, r3
 800f1f0:	d11b      	bne.n	800f22a <_vfiprintf_r+0x56>
 800f1f2:	6875      	ldr	r5, [r6, #4]
 800f1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1f6:	07d9      	lsls	r1, r3, #31
 800f1f8:	d405      	bmi.n	800f206 <_vfiprintf_r+0x32>
 800f1fa:	89ab      	ldrh	r3, [r5, #12]
 800f1fc:	059a      	lsls	r2, r3, #22
 800f1fe:	d402      	bmi.n	800f206 <_vfiprintf_r+0x32>
 800f200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f202:	f7ff fa1e 	bl	800e642 <__retarget_lock_acquire_recursive>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	071b      	lsls	r3, r3, #28
 800f20a:	d501      	bpl.n	800f210 <_vfiprintf_r+0x3c>
 800f20c:	692b      	ldr	r3, [r5, #16]
 800f20e:	b9eb      	cbnz	r3, 800f24c <_vfiprintf_r+0x78>
 800f210:	4629      	mov	r1, r5
 800f212:	4630      	mov	r0, r6
 800f214:	f7fe f972 	bl	800d4fc <__swsetup_r>
 800f218:	b1c0      	cbz	r0, 800f24c <_vfiprintf_r+0x78>
 800f21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f21c:	07dc      	lsls	r4, r3, #31
 800f21e:	d50e      	bpl.n	800f23e <_vfiprintf_r+0x6a>
 800f220:	f04f 30ff 	mov.w	r0, #4294967295
 800f224:	b01d      	add	sp, #116	; 0x74
 800f226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22a:	4b7b      	ldr	r3, [pc, #492]	; (800f418 <_vfiprintf_r+0x244>)
 800f22c:	429d      	cmp	r5, r3
 800f22e:	d101      	bne.n	800f234 <_vfiprintf_r+0x60>
 800f230:	68b5      	ldr	r5, [r6, #8]
 800f232:	e7df      	b.n	800f1f4 <_vfiprintf_r+0x20>
 800f234:	4b79      	ldr	r3, [pc, #484]	; (800f41c <_vfiprintf_r+0x248>)
 800f236:	429d      	cmp	r5, r3
 800f238:	bf08      	it	eq
 800f23a:	68f5      	ldreq	r5, [r6, #12]
 800f23c:	e7da      	b.n	800f1f4 <_vfiprintf_r+0x20>
 800f23e:	89ab      	ldrh	r3, [r5, #12]
 800f240:	0598      	lsls	r0, r3, #22
 800f242:	d4ed      	bmi.n	800f220 <_vfiprintf_r+0x4c>
 800f244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f246:	f7ff f9fd 	bl	800e644 <__retarget_lock_release_recursive>
 800f24a:	e7e9      	b.n	800f220 <_vfiprintf_r+0x4c>
 800f24c:	2300      	movs	r3, #0
 800f24e:	9309      	str	r3, [sp, #36]	; 0x24
 800f250:	2320      	movs	r3, #32
 800f252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f256:	f8cd 800c 	str.w	r8, [sp, #12]
 800f25a:	2330      	movs	r3, #48	; 0x30
 800f25c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f420 <_vfiprintf_r+0x24c>
 800f260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f264:	f04f 0901 	mov.w	r9, #1
 800f268:	4623      	mov	r3, r4
 800f26a:	469a      	mov	sl, r3
 800f26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f270:	b10a      	cbz	r2, 800f276 <_vfiprintf_r+0xa2>
 800f272:	2a25      	cmp	r2, #37	; 0x25
 800f274:	d1f9      	bne.n	800f26a <_vfiprintf_r+0x96>
 800f276:	ebba 0b04 	subs.w	fp, sl, r4
 800f27a:	d00b      	beq.n	800f294 <_vfiprintf_r+0xc0>
 800f27c:	465b      	mov	r3, fp
 800f27e:	4622      	mov	r2, r4
 800f280:	4629      	mov	r1, r5
 800f282:	4630      	mov	r0, r6
 800f284:	f7ff ff93 	bl	800f1ae <__sfputs_r>
 800f288:	3001      	adds	r0, #1
 800f28a:	f000 80aa 	beq.w	800f3e2 <_vfiprintf_r+0x20e>
 800f28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f290:	445a      	add	r2, fp
 800f292:	9209      	str	r2, [sp, #36]	; 0x24
 800f294:	f89a 3000 	ldrb.w	r3, [sl]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 80a2 	beq.w	800f3e2 <_vfiprintf_r+0x20e>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a8:	f10a 0a01 	add.w	sl, sl, #1
 800f2ac:	9304      	str	r3, [sp, #16]
 800f2ae:	9307      	str	r3, [sp, #28]
 800f2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f2b6:	4654      	mov	r4, sl
 800f2b8:	2205      	movs	r2, #5
 800f2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2be:	4858      	ldr	r0, [pc, #352]	; (800f420 <_vfiprintf_r+0x24c>)
 800f2c0:	f7f0 ff8e 	bl	80001e0 <memchr>
 800f2c4:	9a04      	ldr	r2, [sp, #16]
 800f2c6:	b9d8      	cbnz	r0, 800f300 <_vfiprintf_r+0x12c>
 800f2c8:	06d1      	lsls	r1, r2, #27
 800f2ca:	bf44      	itt	mi
 800f2cc:	2320      	movmi	r3, #32
 800f2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2d2:	0713      	lsls	r3, r2, #28
 800f2d4:	bf44      	itt	mi
 800f2d6:	232b      	movmi	r3, #43	; 0x2b
 800f2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2e2:	d015      	beq.n	800f310 <_vfiprintf_r+0x13c>
 800f2e4:	9a07      	ldr	r2, [sp, #28]
 800f2e6:	4654      	mov	r4, sl
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	f04f 0c0a 	mov.w	ip, #10
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2f4:	3b30      	subs	r3, #48	; 0x30
 800f2f6:	2b09      	cmp	r3, #9
 800f2f8:	d94e      	bls.n	800f398 <_vfiprintf_r+0x1c4>
 800f2fa:	b1b0      	cbz	r0, 800f32a <_vfiprintf_r+0x156>
 800f2fc:	9207      	str	r2, [sp, #28]
 800f2fe:	e014      	b.n	800f32a <_vfiprintf_r+0x156>
 800f300:	eba0 0308 	sub.w	r3, r0, r8
 800f304:	fa09 f303 	lsl.w	r3, r9, r3
 800f308:	4313      	orrs	r3, r2
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	46a2      	mov	sl, r4
 800f30e:	e7d2      	b.n	800f2b6 <_vfiprintf_r+0xe2>
 800f310:	9b03      	ldr	r3, [sp, #12]
 800f312:	1d19      	adds	r1, r3, #4
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	9103      	str	r1, [sp, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bfbb      	ittet	lt
 800f31c:	425b      	neglt	r3, r3
 800f31e:	f042 0202 	orrlt.w	r2, r2, #2
 800f322:	9307      	strge	r3, [sp, #28]
 800f324:	9307      	strlt	r3, [sp, #28]
 800f326:	bfb8      	it	lt
 800f328:	9204      	strlt	r2, [sp, #16]
 800f32a:	7823      	ldrb	r3, [r4, #0]
 800f32c:	2b2e      	cmp	r3, #46	; 0x2e
 800f32e:	d10c      	bne.n	800f34a <_vfiprintf_r+0x176>
 800f330:	7863      	ldrb	r3, [r4, #1]
 800f332:	2b2a      	cmp	r3, #42	; 0x2a
 800f334:	d135      	bne.n	800f3a2 <_vfiprintf_r+0x1ce>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	1d1a      	adds	r2, r3, #4
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	9203      	str	r2, [sp, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	bfb8      	it	lt
 800f342:	f04f 33ff 	movlt.w	r3, #4294967295
 800f346:	3402      	adds	r4, #2
 800f348:	9305      	str	r3, [sp, #20]
 800f34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f430 <_vfiprintf_r+0x25c>
 800f34e:	7821      	ldrb	r1, [r4, #0]
 800f350:	2203      	movs	r2, #3
 800f352:	4650      	mov	r0, sl
 800f354:	f7f0 ff44 	bl	80001e0 <memchr>
 800f358:	b140      	cbz	r0, 800f36c <_vfiprintf_r+0x198>
 800f35a:	2340      	movs	r3, #64	; 0x40
 800f35c:	eba0 000a 	sub.w	r0, r0, sl
 800f360:	fa03 f000 	lsl.w	r0, r3, r0
 800f364:	9b04      	ldr	r3, [sp, #16]
 800f366:	4303      	orrs	r3, r0
 800f368:	3401      	adds	r4, #1
 800f36a:	9304      	str	r3, [sp, #16]
 800f36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f370:	482c      	ldr	r0, [pc, #176]	; (800f424 <_vfiprintf_r+0x250>)
 800f372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f376:	2206      	movs	r2, #6
 800f378:	f7f0 ff32 	bl	80001e0 <memchr>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d03f      	beq.n	800f400 <_vfiprintf_r+0x22c>
 800f380:	4b29      	ldr	r3, [pc, #164]	; (800f428 <_vfiprintf_r+0x254>)
 800f382:	bb1b      	cbnz	r3, 800f3cc <_vfiprintf_r+0x1f8>
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	3307      	adds	r3, #7
 800f388:	f023 0307 	bic.w	r3, r3, #7
 800f38c:	3308      	adds	r3, #8
 800f38e:	9303      	str	r3, [sp, #12]
 800f390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f392:	443b      	add	r3, r7
 800f394:	9309      	str	r3, [sp, #36]	; 0x24
 800f396:	e767      	b.n	800f268 <_vfiprintf_r+0x94>
 800f398:	fb0c 3202 	mla	r2, ip, r2, r3
 800f39c:	460c      	mov	r4, r1
 800f39e:	2001      	movs	r0, #1
 800f3a0:	e7a5      	b.n	800f2ee <_vfiprintf_r+0x11a>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	3401      	adds	r4, #1
 800f3a6:	9305      	str	r3, [sp, #20]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	f04f 0c0a 	mov.w	ip, #10
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3b4:	3a30      	subs	r2, #48	; 0x30
 800f3b6:	2a09      	cmp	r2, #9
 800f3b8:	d903      	bls.n	800f3c2 <_vfiprintf_r+0x1ee>
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d0c5      	beq.n	800f34a <_vfiprintf_r+0x176>
 800f3be:	9105      	str	r1, [sp, #20]
 800f3c0:	e7c3      	b.n	800f34a <_vfiprintf_r+0x176>
 800f3c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e7f0      	b.n	800f3ae <_vfiprintf_r+0x1da>
 800f3cc:	ab03      	add	r3, sp, #12
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	462a      	mov	r2, r5
 800f3d2:	4b16      	ldr	r3, [pc, #88]	; (800f42c <_vfiprintf_r+0x258>)
 800f3d4:	a904      	add	r1, sp, #16
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	f7fd fb38 	bl	800ca4c <_printf_float>
 800f3dc:	4607      	mov	r7, r0
 800f3de:	1c78      	adds	r0, r7, #1
 800f3e0:	d1d6      	bne.n	800f390 <_vfiprintf_r+0x1bc>
 800f3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3e4:	07d9      	lsls	r1, r3, #31
 800f3e6:	d405      	bmi.n	800f3f4 <_vfiprintf_r+0x220>
 800f3e8:	89ab      	ldrh	r3, [r5, #12]
 800f3ea:	059a      	lsls	r2, r3, #22
 800f3ec:	d402      	bmi.n	800f3f4 <_vfiprintf_r+0x220>
 800f3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3f0:	f7ff f928 	bl	800e644 <__retarget_lock_release_recursive>
 800f3f4:	89ab      	ldrh	r3, [r5, #12]
 800f3f6:	065b      	lsls	r3, r3, #25
 800f3f8:	f53f af12 	bmi.w	800f220 <_vfiprintf_r+0x4c>
 800f3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3fe:	e711      	b.n	800f224 <_vfiprintf_r+0x50>
 800f400:	ab03      	add	r3, sp, #12
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	462a      	mov	r2, r5
 800f406:	4b09      	ldr	r3, [pc, #36]	; (800f42c <_vfiprintf_r+0x258>)
 800f408:	a904      	add	r1, sp, #16
 800f40a:	4630      	mov	r0, r6
 800f40c:	f7fd fdc2 	bl	800cf94 <_printf_i>
 800f410:	e7e4      	b.n	800f3dc <_vfiprintf_r+0x208>
 800f412:	bf00      	nop
 800f414:	0800f76c 	.word	0x0800f76c
 800f418:	0800f78c 	.word	0x0800f78c
 800f41c:	0800f74c 	.word	0x0800f74c
 800f420:	0800f952 	.word	0x0800f952
 800f424:	0800f95c 	.word	0x0800f95c
 800f428:	0800ca4d 	.word	0x0800ca4d
 800f42c:	0800f1af 	.word	0x0800f1af
 800f430:	0800f958 	.word	0x0800f958

0800f434 <_read_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d07      	ldr	r5, [pc, #28]	; (800f454 <_read_r+0x20>)
 800f438:	4604      	mov	r4, r0
 800f43a:	4608      	mov	r0, r1
 800f43c:	4611      	mov	r1, r2
 800f43e:	2200      	movs	r2, #0
 800f440:	602a      	str	r2, [r5, #0]
 800f442:	461a      	mov	r2, r3
 800f444:	f7f3 f872 	bl	800252c <_read>
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	d102      	bne.n	800f452 <_read_r+0x1e>
 800f44c:	682b      	ldr	r3, [r5, #0]
 800f44e:	b103      	cbz	r3, 800f452 <_read_r+0x1e>
 800f450:	6023      	str	r3, [r4, #0]
 800f452:	bd38      	pop	{r3, r4, r5, pc}
 800f454:	200022e0 	.word	0x200022e0

0800f458 <__ascii_wctomb>:
 800f458:	b149      	cbz	r1, 800f46e <__ascii_wctomb+0x16>
 800f45a:	2aff      	cmp	r2, #255	; 0xff
 800f45c:	bf85      	ittet	hi
 800f45e:	238a      	movhi	r3, #138	; 0x8a
 800f460:	6003      	strhi	r3, [r0, #0]
 800f462:	700a      	strbls	r2, [r1, #0]
 800f464:	f04f 30ff 	movhi.w	r0, #4294967295
 800f468:	bf98      	it	ls
 800f46a:	2001      	movls	r0, #1
 800f46c:	4770      	bx	lr
 800f46e:	4608      	mov	r0, r1
 800f470:	4770      	bx	lr

0800f472 <abort>:
 800f472:	b508      	push	{r3, lr}
 800f474:	2006      	movs	r0, #6
 800f476:	f000 f82b 	bl	800f4d0 <raise>
 800f47a:	2001      	movs	r0, #1
 800f47c:	f000 f854 	bl	800f528 <_exit>

0800f480 <_raise_r>:
 800f480:	291f      	cmp	r1, #31
 800f482:	b538      	push	{r3, r4, r5, lr}
 800f484:	4604      	mov	r4, r0
 800f486:	460d      	mov	r5, r1
 800f488:	d904      	bls.n	800f494 <_raise_r+0x14>
 800f48a:	2316      	movs	r3, #22
 800f48c:	6003      	str	r3, [r0, #0]
 800f48e:	f04f 30ff 	mov.w	r0, #4294967295
 800f492:	bd38      	pop	{r3, r4, r5, pc}
 800f494:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f496:	b112      	cbz	r2, 800f49e <_raise_r+0x1e>
 800f498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f49c:	b94b      	cbnz	r3, 800f4b2 <_raise_r+0x32>
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f000 f830 	bl	800f504 <_getpid_r>
 800f4a4:	462a      	mov	r2, r5
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ae:	f000 b817 	b.w	800f4e0 <_kill_r>
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d00a      	beq.n	800f4cc <_raise_r+0x4c>
 800f4b6:	1c59      	adds	r1, r3, #1
 800f4b8:	d103      	bne.n	800f4c2 <_raise_r+0x42>
 800f4ba:	2316      	movs	r3, #22
 800f4bc:	6003      	str	r3, [r0, #0]
 800f4be:	2001      	movs	r0, #1
 800f4c0:	e7e7      	b.n	800f492 <_raise_r+0x12>
 800f4c2:	2400      	movs	r4, #0
 800f4c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	4798      	blx	r3
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	e7e0      	b.n	800f492 <_raise_r+0x12>

0800f4d0 <raise>:
 800f4d0:	4b02      	ldr	r3, [pc, #8]	; (800f4dc <raise+0xc>)
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	f7ff bfd3 	b.w	800f480 <_raise_r>
 800f4da:	bf00      	nop
 800f4dc:	2000001c 	.word	0x2000001c

0800f4e0 <_kill_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d07      	ldr	r5, [pc, #28]	; (800f500 <_kill_r+0x20>)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	602b      	str	r3, [r5, #0]
 800f4ee:	f000 f813 	bl	800f518 <_kill>
 800f4f2:	1c43      	adds	r3, r0, #1
 800f4f4:	d102      	bne.n	800f4fc <_kill_r+0x1c>
 800f4f6:	682b      	ldr	r3, [r5, #0]
 800f4f8:	b103      	cbz	r3, 800f4fc <_kill_r+0x1c>
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	bd38      	pop	{r3, r4, r5, pc}
 800f4fe:	bf00      	nop
 800f500:	200022e0 	.word	0x200022e0

0800f504 <_getpid_r>:
 800f504:	f000 b800 	b.w	800f508 <_getpid>

0800f508 <_getpid>:
 800f508:	4b02      	ldr	r3, [pc, #8]	; (800f514 <_getpid+0xc>)
 800f50a:	2258      	movs	r2, #88	; 0x58
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	f04f 30ff 	mov.w	r0, #4294967295
 800f512:	4770      	bx	lr
 800f514:	200022e0 	.word	0x200022e0

0800f518 <_kill>:
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <_kill+0xc>)
 800f51a:	2258      	movs	r2, #88	; 0x58
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	f04f 30ff 	mov.w	r0, #4294967295
 800f522:	4770      	bx	lr
 800f524:	200022e0 	.word	0x200022e0

0800f528 <_exit>:
 800f528:	e7fe      	b.n	800f528 <_exit>
	...

0800f52c <_init>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	bf00      	nop
 800f530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f532:	bc08      	pop	{r3}
 800f534:	469e      	mov	lr, r3
 800f536:	4770      	bx	lr

0800f538 <_fini>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	bf00      	nop
 800f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53e:	bc08      	pop	{r3}
 800f540:	469e      	mov	lr, r3
 800f542:	4770      	bx	lr
